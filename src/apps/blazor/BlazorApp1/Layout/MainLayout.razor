@inherits LayoutComponentBase
@using BlazorApp1.Services
@inject ThemeService ThemeService
@implements IDisposable

<FluentLayout>
    <FluentHeader>
        BlazorApp1
        <FluentSpacer/>
        
        <!-- Theme Controls in Header -->
        <FluentStack HorizontalAlignment="HorizontalAlignment.Right" Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Style="margin-right: 8px;">Dark Mode</FluentLabel>
            <FluentSwitch Value="_isDarkMode" 
                         ValueChanged="OnModeToggled" 
                         Style="margin-right: 16px;" />
            
            <FluentLabel Style="margin-right: 8px;">Theme Color</FluentLabel>
            <FluentCombobox @bind-Value="_selectedColorValue" 
                           @onchange="OnColorChanged"
                           Items="@_colorOptions"
                           OptionText="@(item => item.DisplayName)"
                           OptionValue="@(item => item.Value.ToString())"
                           Style="width: 120px;">
            </FluentCombobox>
        </FluentStack>
    </FluentHeader>
    
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu/>
        <FluentBodyContent Class="body-content">
            <ErrorBoundary>
                <ChildContent>
                    <div class="content">
                        @Body
                    </div>
                </ChildContent>
                <ErrorContent Context="ex">
                    <div class="blazor-error-boundary">@ex.Message</div>
                </ErrorContent>
            </ErrorBoundary>
        </FluentBodyContent>
    </FluentStack>
    
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer/>
        <FluentLabel Typo="Typography.Body">Made with ❤️ by Microsoft</FluentLabel>
    </FluentFooter>
</FluentLayout>

<FluentDesignTheme Mode="@ThemeService.CurrentMode"
                   OfficeColor="@ThemeService.CurrentColor" />

<style>
    .main {
        height: calc(100vh - 120px);
    }
    
    .content {
        padding: 20px;
    }
    
    .body-content {
        flex: 1;
        overflow-y: auto;
    }
</style>

@code {
    private bool _isDarkMode = false; // Default to light mode
    private string _selectedColorValue = "Default";
    
    private List<ColorOption> _colorOptions = new();

    public class ColorOption
    {
        public OfficeColor Value { get; set; }
        public string DisplayName { get; set; } = string.Empty;
    }

    protected override void OnInitialized()
    {
        // Initialize color options
        _colorOptions = Enum.GetValues<OfficeColor>()
            .Select(color => new ColorOption 
            { 
                Value = color, 
                DisplayName = GetColorDisplayName(color) 
            })
            .ToList();
        
        // Set initial values from ThemeService (defaults to Light mode)
        _isDarkMode = ThemeService.CurrentMode == DesignThemeModes.Dark;
        _selectedColorValue = ThemeService.CurrentColor.ToString();
        
        // Subscribe to theme changes
        ThemeService.ThemeChanged += OnThemeChanged;
    }

    private void OnThemeChanged(DesignThemeModes mode, OfficeColor color)
    {
        _isDarkMode = mode == DesignThemeModes.Dark;
        _selectedColorValue = color.ToString();
        InvokeAsync(StateHasChanged);
    }

    private async Task OnModeToggled(bool isDark)
    {
        _isDarkMode = isDark;
        var mode = _isDarkMode ? DesignThemeModes.Dark : DesignThemeModes.Light;
        ThemeService.SetThemeMode(mode);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnColorChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<OfficeColor>(e.Value?.ToString(), out var color))
        {
            _selectedColorValue = color.ToString();
            ThemeService.SetThemeColor(color);
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetColorDisplayName(OfficeColor color)
    {
        return color switch
        {
            OfficeColor.Default => "Default",
            _ => color.ToString()
        };
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}
