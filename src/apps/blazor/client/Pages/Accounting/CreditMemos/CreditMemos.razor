@page "/accounting/credit-memos"
@using FSH.Starter.Blazor.Client.Pages.Accounting.CreditMemos

<PageHeader Title="Credit Memos" Header="Credit Memos" Subheader="Manage credit memos for receivables and payables adjustments" />

<EntityTable @ref="_table" TEntity="CreditMemoResponse" TId="DefaultIdType" TRequest="CreditMemoViewModel" Context="@Context">
    

    <ActionsContent Context="context">
        @if (context.Id != DefaultIdType.Empty)
        {
            var status = context.Status;
            var approvalStatus = context.ApprovalStatus;
            
            @* Show Approve action for Draft memos with Pending approval *@
            @if (status == "Draft" && approvalStatus == "Pending")
            {
                <MudMenuItem OnClick="@(() => OnApproveMemo(context.Id))">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
                    Approve
                </MudMenuItem>
            }
            
            @* Show Apply action for Approved memos that haven't been fully applied *@
            @if (approvalStatus == "Approved" && context.UnappliedAmount > 0)
            {
                <MudMenuItem OnClick="@(() => OnApplyMemo(context.Id))">
                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="me-2" />
                    Apply to Document
                </MudMenuItem>
            }
            
            @* Show Refund action for Approved memos that haven't been fully refunded *@
            @if (approvalStatus == "Approved" && context.UnappliedAmount > 0)
            {
                <MudMenuItem OnClick="@(() => OnRefundMemo(context.Id))">
                    <MudIcon Icon="@Icons.Material.Filled.MoneyOff" Class="me-2" />
                    Issue Refund
                </MudMenuItem>
            }
            
            @* Show Void action for non-voided memos *@
            @if (status != "Voided")
            {
                <MudMenuItem OnClick="@(() => OnVoidMemo(context.Id))">
                    <MudIcon Icon="@Icons.Material.Filled.Cancel" Class="me-2" />
                    Void
                </MudMenuItem>
            }
            
            @* Show View Applications for memos that have been applied *@
            @if (context.AppliedAmount > 0 || context.RefundedAmount > 0)
            {
                <MudMenuItem OnClick="@(() => OnViewApplications(context.Id))">
                    <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="me-2" />
                    View Applications
                </MudMenuItem>
            }
        }
    </ActionsContent>

    <EditFormContent Context="context">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="context.MemoNumber" Label="Memo Number" Required Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudDatePicker Date="@context.MemoDate" DateChanged="@(date => context.MemoDate = date ?? DateTime.UtcNow)" Label="Memo Date" Required Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudNumericField @bind-Value="context.Amount" Label="Amount" Required Variant="Variant.Outlined" Format="F2" Min="0" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="context.ReferenceType" Label="Reference Type" Required Variant="Variant.Outlined">
                    <MudSelectItem Value="@("Customer")">Customer</MudSelectItem>
                    <MudSelectItem Value="@("Vendor")">Vendor</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="context.ReferenceId" Label="Reference ID (Customer/Vendor)" Required Variant="Variant.Outlined" 
                              HelperText="Enter the customer or vendor ID" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="context.OriginalDocumentId" Label="Original Document ID" Variant="Variant.Outlined" 
                              HelperText="Optional: Invoice or bill being adjusted" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="context.Reason" Label="Reason" Variant="Variant.Outlined" Lines="2"
                              HelperText="Reason for the credit adjustment" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="context.Description" Label="Description" Variant="Variant.Outlined" Lines="3" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="context.Notes" Label="Notes" Variant="Variant.Outlined" Lines="3" />
            </MudItem>
            
            @* Display-only fields for existing records *@
            @if (context.Id != DefaultIdType.Empty)
            {
                <MudItem xs="12" md="4">
                    <MudChip T="string" Color="@GetStatusColor(context.Status)" Text="@context.Status" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudChip T="string" Color="@GetApprovalStatusColor(context.ApprovalStatus)" Text="@context.ApprovalStatus" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudText Typo="Typo.body2">Applied: @context.AppliedAmount.ToString("C")</MudText>
                    <MudText Typo="Typo.body2">Refunded: @context.RefundedAmount.ToString("C")</MudText>
                    <MudText Typo="Typo.body2">Unapplied: @context.UnappliedAmount.ToString("C")</MudText>
                </MudItem>
                @if (context.ApprovedBy != null)
                {
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.body2">Approved By: @context.ApprovedBy</MudText>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.body2">Approved Date: @context.ApprovedDate?.ToString("g")</MudText>
                    </MudItem>
                }
            }
        </MudGrid>
    </EditFormContent>


</EntityTable>

@* Approve Memo Dialog *@
<MudDialog @bind-Visible="_approveDialogVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="me-2" />
            Approve Credit Memo
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1" Class="mb-4">Are you sure you want to approve this credit memo?</MudText>
        <MudTextField @bind-Value="_approveCommand.ApprovedBy" Label="Approved By" Required Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _approveDialogVisible = false)">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SubmitApproveMemo">Approve</MudButton>
    </DialogActions>
</MudDialog>

@* Apply Memo Dialog *@
<MudDialog @bind-Visible="_applyDialogVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Assignment" Class="me-2" />
            Apply Credit Memo
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudNumericField @bind-Value="_applyCommand.AmountToApply" Label="Amount to Apply" Required Variant="Variant.Outlined" 
                         Format="F2" Min="0" HelperText="Amount to apply from unapplied balance" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _applyDialogVisible = false)">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SubmitApplyMemo">Apply</MudButton>
    </DialogActions>
</MudDialog>

@* Refund Memo Dialog *@
<MudDialog @bind-Visible="_refundDialogVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.MoneyOff" Class="me-2" />
            Issue Refund for Credit Memo
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudNumericField @bind-Value="_refundCommand.RefundAmount" Label="Refund Amount" Required Variant="Variant.Outlined" 
                         Format="F2" Min="0" HelperText="Amount to refund from unapplied balance" />
        <MudTextField @bind-Value="_refundCommand.RefundMethod" Label="Refund Method" Variant="Variant.Outlined" 
                      HelperText="e.g., Check, ACH, Credit Card Reversal" />
        <MudTextField @bind-Value="_refundCommand.RefundReference" Label="Refund Reference" Variant="Variant.Outlined" 
                      HelperText="Check number or transaction ID" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _refundDialogVisible = false)">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SubmitRefundMemo">Issue Refund</MudButton>
    </DialogActions>
</MudDialog>

@* Void Memo Dialog *@
<MudDialog @bind-Visible="_voidDialogVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Cancel" Class="me-2" />
            Void Credit Memo
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudAlert Severity="Severity.Warning" Class="mb-4">Warning: Voiding this memo will reverse any applications or refunds.</MudAlert>
        <MudTextField @bind-Value="_voidCommand.VoidReason" Label="Void Reason" Required Variant="Variant.Outlined" Lines="3"
                      HelperText="Provide a reason for voiding this memo" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _voidDialogVisible = false)">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="SubmitVoidMemo">Void</MudButton>
    </DialogActions>
</MudDialog>
