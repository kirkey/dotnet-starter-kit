@page "/store/purchase-orders/items/{PurchaseOrderId:guid}"

<MudTable Items="@_items" Hover="true" Dense="true" Bordered="true" Striped="true" Loading="@_loading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Order Items</MudText>
        <MudSpacer />
        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="@OpenAddItemDialog">
            Add Item
        </MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Grocery Item</MudTh>
        <MudTh>Quantity</MudTh>
        <MudTh>Unit Price</MudTh>
        <MudTh>Discount</MudTh>
        <MudTh>Total Price</MudTh>
        <MudTh>Received Qty</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Grocery Item">@context.GroceryItemName (@context.GroceryItemSku)</MudTd>
        <MudTd DataLabel="Quantity">@context.Quantity @context.Unit</MudTd>
        <MudTd DataLabel="Unit Price">@context.UnitPrice.ToString("C2")</MudTd>
        <MudTd DataLabel="Discount">@context.DiscountPercentage%</MudTd>
        <MudTd DataLabel="Total Price">@context.Total.ToString("C2")</MudTd>
        <MudTd DataLabel="Received Qty">N/A</MudTd>
        <MudTd DataLabel="Actions">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => OpenEditItemDialog(context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => RemoveItem(context.Id))" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No items added yet. Click "Add Item" to start.</MudText>
    </NoRecordsContent>
</MudTable>

@code {
    [Inject] private IClient ApiClient { get; set; } = default!;
    [Inject] private HttpClient HttpClient { get; set; } = default!;

    [Parameter] public DefaultIdType PurchaseOrderId { get; set; }

    private bool _loading;
    private List<PurchaseOrderItemModel> _items = new();

    protected override async Task OnInitializedAsync()
    {
        if (PurchaseOrderId != default)
        {
            await LoadItemsAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PurchaseOrderId != default)
        {
            await LoadItemsAsync();
        }
    }

    private async Task LoadItemsAsync()
    {
        _loading = true;
        try
        {
            // TODO: Replace with ApiClient.GetPurchaseOrderItemsEndpointAsync once the API client is regenerated
            // For now, making a direct HTTP call to the new endpoint
            var response = await HttpClient.GetAsync($"api/v1/purchase-orders/{PurchaseOrderId}/items").ConfigureAwait(false);
            
            if (response.IsSuccessStatusCode)
            {
                var items = await response.Content.ReadFromJsonAsync<List<PurchaseOrderItemResponse>>().ConfigureAwait(false);
                
                if (items != null)
                {
                    // Map the response to PurchaseOrderItemModel
                    _items = items.Select(item => new PurchaseOrderItemModel
                    {
                        Id = item.Id,
                        PurchaseOrderId = item.PurchaseOrderId,
                        GroceryItemId = item.GroceryItemId,
                        GroceryItemName = item.GroceryItemName,
                        GroceryItemSku = item.GroceryItemSku,
                        Quantity = item.Quantity,
                        UnitPrice = item.UnitPrice,
                        DiscountPercentage = (item.UnitPrice > 0 && item.Quantity > 0) 
                            ? (item.DiscountAmount / (item.Quantity * item.UnitPrice)) * 100 
                            : 0,
                        Unit = "" // Not available in the response yet
                    }).ToList();
                }
            }
            else
            {
                Toast.Add($"Failed to load order items: {response.ReasonPhrase}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Toast.Add($"Failed to load order items: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    // Helper class for deserializing the API response
    private class PurchaseOrderItemResponse
    {
        public DefaultIdType Id { get; set; }
        public DefaultIdType PurchaseOrderId { get; set; }
        public DefaultIdType GroceryItemId { get; set; }
        public string GroceryItemName { get; set; } = string.Empty;
        public string GroceryItemSku { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public decimal UnitPrice { get; set; }
        public decimal DiscountAmount { get; set; }
        public decimal TotalPrice { get; set; }
        public int ReceivedQuantity { get; set; }
        public string? Notes { get; set; }
    }

    private async Task OpenAddItemDialog()
    {
        var parameters = new DialogParameters
        {
            { "PurchaseOrderId", PurchaseOrderId },
            { "IsEdit", false }
        };

        var dialog = await DialogService.ShowAsync<PurchaseOrderItemDialog>("Add Order Item", parameters);
        if (dialog == null) return;
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            // Reload the items list from the server
            await LoadItemsAsync();
            Toast.Add("Item added successfully", Severity.Success);
        }
    }

    private async Task OpenEditItemDialog(PurchaseOrderItemModel item)
    {
        var parameters = new DialogParameters
        {
            { "PurchaseOrderId", PurchaseOrderId },
            { "Item", item },
            { "IsEdit", true }
        };

        var dialog = await DialogService.ShowAsync<PurchaseOrderItemDialog>("Edit Order Item", parameters);
        if (dialog == null) return;
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            // Reload the items list from the server
            await LoadItemsAsync();
            Toast.Add("Item updated successfully", Severity.Success);
        }
    }

    private async Task RemoveItem(DefaultIdType itemId)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Remove Item",
            "Are you sure you want to remove this item from the order?",
            yesText: "Remove", cancelText: "Cancel");

        if (confirmed == true)
        {
            try
            {
                var item = _items.FirstOrDefault(x => x.Id == itemId);
                if (item != null)
                {
                    await ApiClient.RemovePurchaseOrderItemEndpointAsync("1", PurchaseOrderId, item.GroceryItemId).ConfigureAwait(false);
                    // Reload the items list from the server
                    await LoadItemsAsync();
                    Toast.Add("Item removed successfully", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                Toast.Add($"Failed to remove item: {ex.Message}", Severity.Error);
            }
        }
    }
}
