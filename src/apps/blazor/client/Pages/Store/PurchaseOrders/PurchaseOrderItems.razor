<MudTable Items="@_items" Dense="true" Hover="true" Loading="@_loading" Class="mt-4">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Order Items</MudText>
        <MudSpacer />
        @if (PurchaseOrderId != default)
        {
            <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="@AddItemAsync" Variant="Variant.Filled">
                Add Item
            </MudButton>
        }
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Item</MudTh>
        <MudTh>SKU</MudTh>
        <MudTh Style="text-align: right">Quantity</MudTh>
        <MudTh Style="text-align: right">Unit Price</MudTh>
        <MudTh Style="text-align: right">Discount</MudTh>
        <MudTh Style="text-align: right">Total</MudTh>
        <MudTh Style="text-align: right">Received</MudTh>
        <MudTh>Notes</MudTh>
        <MudTh Style="text-align: center">Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Item">@context.ItemName</MudTd>
        <MudTd DataLabel="SKU">@context.ItemSku</MudTd>
        <MudTd DataLabel="Quantity" Style="text-align: right">@context.Quantity</MudTd>
        <MudTd DataLabel="Unit Price" Style="text-align: right">@context.UnitPrice.ToString("C2")</MudTd>
        <MudTd DataLabel="Discount" Style="text-align: right">@context.DiscountAmount.ToString("C2")</MudTd>
        <MudTd DataLabel="Total" Style="text-align: right">@context.TotalPrice.ToString("C2")</MudTd>
        <MudTd DataLabel="Received" Style="text-align: right">@context.ReceivedQuantity</MudTd>
        <MudTd DataLabel="Notes">@context.Notes</MudTd>
        <MudTd DataLabel="Actions" Style="text-align: center">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditItemAsync(context))" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="@(() => DeleteItemAsync(context.Id))" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No items added yet</MudText>
    </NoRecordsContent>
</MudTable>

@code {
    [Parameter] public DefaultIdType PurchaseOrderId { get; set; }
    [Parameter] public EventCallback OnItemsChanged { get; set; }

    private List<PurchaseOrderItemResponse> _items = new();
    private bool _loading;

    protected override async Task OnParametersSetAsync()
    {
        if (PurchaseOrderId != default)
        {
            await LoadItemsAsync();
        }
    }

    private async Task LoadItemsAsync()
    {
        _loading = true;
        try
        {
            _items = (await Client.GetPurchaseOrderItemsEndpointAsync("1", PurchaseOrderId).ConfigureAwait(false))?.ToList() ?? new();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load items: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task AddItemAsync()
    {
        var parameters = new DialogParameters<PurchaseOrderItemDialog>
        {
            { x => x.PurchaseOrderId, PurchaseOrderId },
            { x => x.Model, new PurchaseOrderItemModel() }
        };

        var dialog = await DialogService.ShowAsync<PurchaseOrderItemDialog>("Add Item", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadItemsAsync();
            await OnItemsChanged.InvokeAsync();
        }
    }

    private async Task EditItemAsync(PurchaseOrderItemResponse item)
    {
        var model = new PurchaseOrderItemModel
        {
            Id = item.Id,
            ItemId = item.ItemId,
            Quantity = item.Quantity,
            UnitPrice = item.UnitPrice,
            DiscountAmount = item.DiscountAmount,
            ReceivedQuantity = item.ReceivedQuantity,
            Notes = item.Notes
        };

        var parameters = new DialogParameters<PurchaseOrderItemDialog>
        {
            { x => x.PurchaseOrderId, PurchaseOrderId },
            { x => x.Model, model }
        };

        var dialog = await DialogService.ShowAsync<PurchaseOrderItemDialog>("Edit Item", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadItemsAsync();
            await OnItemsChanged.InvokeAsync();
        }
    }

    private async Task DeleteItemAsync(DefaultIdType itemId)
    {
        var parameters = new DialogParameters<DeleteConfirmation>
        {
            { x => x.ContentText, "Are you sure you want to delete this item?" }
        };

        var dialog = await DialogService.ShowAsync<DeleteConfirmation>("Delete Item", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            try
            {
                await Client.RemovePurchaseOrderItemEndpointAsync("1", PurchaseOrderId, itemId).ConfigureAwait(false);
                Snackbar.Add("Item deleted successfully", Severity.Success);
                await LoadItemsAsync();
                await OnItemsChanged.InvokeAsync();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete item: {ex.Message}", Severity.Error);
            }
        }
    }
}

