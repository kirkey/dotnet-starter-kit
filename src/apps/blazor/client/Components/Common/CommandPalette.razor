@using MudBlazor

@inject ICommandPaletteService Palette
@inject ISnackbar Toast

<MudDialog @bind-IsVisible="_open" MaxWidth="MaxWidth.Medium" Position="DialogPosition.TopCenter">
    <TitleContent>
        <MudText Typo="Typo.h6">Command Palette</MudText>
    </TitleContent>
    <DialogContent>
        <DialogContent Class="pa-4">
            <MudTextField @bind-Value="_search" Placeholder="Type to search commands..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" OnKeyDown="HandleKey" />
            <MudList T="CommandDescriptor" Dense Class="mt-2" Style="max-height:300px;overflow:auto;">
                @if(_filtered.Count==0)
                {
                    <MudListItem T="CommandDescriptor" Disabled>No matching commands</MudListItem>
                }
                else
                {
                    @foreach(var cmd in _filtered)
                    {
                        <MudListItem T="CommandDescriptor" Class="d-flex justify-space-between" @onclick="(()=>Execute(cmd))" Style="cursor:pointer;">
                            <span>@cmd.Title</span>
                            <MudChip Size="Size.Small" Variant="Variant.Outlined">@cmd.Category</MudChip>
                        </MudListItem>
                    }
                }
            </MudList>
        </DialogContent>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _open;
    private string _search="";
    private List<CommandDescriptor> _filtered = new();

    public void Open()
    {
        _open = true;
        _search = string.Empty;
        Filter();
        StateHasChanged();
    }
    private void Close(){ _open=false; }

    private void Filter()
    {
        _filtered = Palette.Search(_search).Take(100).ToList();
    }

    private void Execute(CommandDescriptor cmd)
    {
        try { cmd.Execute(); }
        catch(Exception ex) { Toast.Add($"Command failed: {ex.Message}", Severity.Error); }
        Close();
    }

    private void HandleKey(KeyboardEventArgs e)
    {
        if(e.Key=="Escape") Close();
        Filter();
        if(e.Key=="Enter" && _filtered.Any()) Execute(_filtered.First());
    }
}
