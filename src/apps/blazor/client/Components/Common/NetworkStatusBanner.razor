@inject INetworkStatusService Network
@inject IOfflineRequestQueue OfflineQueue
@inject IOfflineRetryService OfflineRetry
@inject ISnackbar Toast
@inject HttpClient Http

<div class="d-flex flex-row align-center" style="position:sticky;top:0;z-index:500;">
    @if (!Online)
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Elevation="0" Dense Class="ma-0 pa-2 flex-grow-1" Icon="@Icons.Material.Filled.CloudOff">
            <div class="d-flex align-center justify-space-between" style="width:100%">
                <span>Offline mode. Requests are queued and will retry automatically (@Pending pending).</span>
                <div>
                    <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning" Disabled="Pending==0" OnClick="FlushAsync">Sync Now</MudButton>
                    <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Error" Disabled="Pending==0" OnClick="ClearAsync">Clear</MudButton>
                </div>
            </div>
        </MudAlert>
    }
    else if (Pending > 0 || _manualSyncInProgress)
    {
        <MudAlert Severity="@(_manualSyncInProgress ? Severity.Info : Severity.Info)" Variant="Variant.Outlined" Dense Elevation="0" Class="ma-0 pa-2 flex-grow-1" Icon="@Icons.Material.Filled.CloudSync">
            <div class="d-flex align-center justify-space-between" style="width:100%">
                <span>@(_manualSyncInProgress ? $"Manually syncing queued requests ({Pending})..." : $"Online. Auto-retry service running ({Pending} queued)...")</span>
                <div class="d-flex align-center">
                    @if (_manualSyncInProgress)
                    {
                        <MudProgressCircular Indeterminate Size="Size.Medium" Class="mr-2" />
                    }
                    else if (OfflineRetry.IsRunning)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Autorenew" Class="mr-2" Color="Color.Success" Title="Auto-retry active" />
                    }
                    <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Info" Disabled="Pending==0 || _manualSyncInProgress" OnClick="FlushAsync">Sync Now</MudButton>
                    <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Error" Disabled="Pending==0 || _manualSyncInProgress" OnClick="ClearAsync">Clear</MudButton>
                </div>
            </div>
        </MudAlert>
    }
</div>

@code {
    [Parameter] public bool Online { get; set; }
    [Parameter] public int Pending { get; set; }
    private bool _manualSyncInProgress;

    private async Task FlushAsync()
    {
        if (!Network.IsOnline)
        {
            Toast.Add("Still offline.", Severity.Warning);
            return;
        }
        if (Pending == 0) return;
        _manualSyncInProgress = true;
        StateHasChanged();
        
        await OfflineQueue.FlushAsync(async qr =>
        {
            try
            {
                var msg = new HttpRequestMessage(new HttpMethod(qr.Method), qr.Url);
                if (qr.Body != null)
                {
                    msg.Content = new StringContent(qr.Body, System.Text.Encoding.UTF8,
                        qr.Headers.TryGetValue("Content-Type", out var ct) ? ct : "application/json");
                }
                foreach (var h in qr.Headers)
                {
                    if (h.Key.Equals("Content-Type", StringComparison.OrdinalIgnoreCase)) continue;
                    if (h.Key.Equals("Authorization", StringComparison.OrdinalIgnoreCase)) continue;
                    msg.Headers.TryAddWithoutValidation(h.Key, h.Value);
                }
                var resp = await Http.SendAsync(msg);
                return resp.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        });
        
        _manualSyncInProgress = false;
        Toast.Add("Manual sync complete.", Severity.Success);
    }

    private async Task ClearAsync()
    {
        await OfflineQueue.ClearAsync();
        Toast.Add("Queue cleared.", Severity.Success);
    }
}
