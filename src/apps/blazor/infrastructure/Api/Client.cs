//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace FSH.Starter.Blazor.Infrastructure.Api
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IClient
    {
        /// <summary>
        /// create accounting period
        /// </summary>
        /// <remarks>
        /// create accounting period
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> AccountingPeriodCreateEndpointAsync(string version, CreateAccountingPeriodCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create accounting period
        /// </summary>
        /// <remarks>
        /// create accounting period
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> AccountingPeriodCreateEndpointAsync(string version, CreateAccountingPeriodCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update accounting period
        /// </summary>
        /// <remarks>
        /// update accounting period
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> AccountingPeriodUpdateEndpointAsync(string version, System.Guid id, UpdateAccountingPeriodCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update accounting period
        /// </summary>
        /// <remarks>
        /// update accounting period
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> AccountingPeriodUpdateEndpointAsync(string version, System.Guid id, UpdateAccountingPeriodCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// delete accounting period by id
        /// </summary>
        /// <remarks>
        /// delete accounting period by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccountingPeriodDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete accounting period by id
        /// </summary>
        /// <remarks>
        /// delete accounting period by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccountingPeriodDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get accounting period by id
        /// </summary>
        /// <remarks>
        /// get accounting period by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountingPeriodResponse> AccountingPeriodGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get accounting period by id
        /// </summary>
        /// <remarks>
        /// get accounting period by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountingPeriodResponse> AccountingPeriodGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// search accounting periods
        /// </summary>
        /// <remarks>
        /// search accounting periods
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountingPeriodResponsePagedList> AccountingPeriodSearchEndpointAsync(string version, SearchAccountingPeriodsQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// search accounting periods
        /// </summary>
        /// <remarks>
        /// search accounting periods
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccountingPeriodResponsePagedList> AccountingPeriodSearchEndpointAsync(string version, SearchAccountingPeriodsQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create an accrual
        /// </summary>
        /// <remarks>
        /// Creates a new accrual entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateAccrualResponse> AccrualCreateEndpointAsync(string version, CreateAccrualCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an accrual
        /// </summary>
        /// <remarks>
        /// Creates a new accrual entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateAccrualResponse> AccrualCreateEndpointAsync(string version, CreateAccrualCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an accrual
        /// </summary>
        /// <remarks>
        /// Updates an accrual's mutable fields
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> AccrualUpdateEndpointAsync(string version, System.Guid id, UpdateAccrualCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an accrual
        /// </summary>
        /// <remarks>
        /// Updates an accrual's mutable fields
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> AccrualUpdateEndpointAsync(string version, System.Guid id, UpdateAccrualCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete accrual by id
        /// </summary>
        /// <remarks>
        /// Deletes an accrual entry by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccrualDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete accrual by id
        /// </summary>
        /// <remarks>
        /// Deletes an accrual entry by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccrualDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get an accrual by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of an accrual by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccrualResponse> AccrualGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an accrual by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of an accrual by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccrualResponse> AccrualGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reverse an accrual
        /// </summary>
        /// <remarks>
        /// Reverses an accrual entry by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccrualReverseEndpointAsync(string version, System.Guid id, ReverseAccrualCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reverse an accrual
        /// </summary>
        /// <remarks>
        /// Reverses an accrual entry by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AccrualReverseEndpointAsync(string version, System.Guid id, ReverseAccrualCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search accruals
        /// </summary>
        /// <remarks>
        /// Search accrual entries with filters and pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccrualResponsePagedList> AccrualSearchEndpointAsync(string version, SearchAccrualsQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search accruals
        /// </summary>
        /// <remarks>
        /// Search accrual entries with filters and pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccrualResponsePagedList> AccrualSearchEndpointAsync(string version, SearchAccrualsQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Create a new bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> BankReconciliationCreateEndpointAsync(string version, CreateBankReconciliationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Create a new bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> BankReconciliationCreateEndpointAsync(string version, CreateBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Update reconciliation items for a bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> BankReconciliationUpdateEndpointAsync(string version, System.Guid id, UpdateBankReconciliationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Update reconciliation items for a bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> BankReconciliationUpdateEndpointAsync(string version, System.Guid id, UpdateBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Get a bank reconciliation by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankReconciliationResponse> BankReconciliationGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Get a bank reconciliation by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankReconciliationResponse> BankReconciliationGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Delete a bank reconciliation by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Delete a bank reconciliation by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search bank reconciliations
        /// </summary>
        /// <remarks>
        /// Search and filter bank reconciliations with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankReconciliationResponsePagedList> BankReconciliationSearchEndpointAsync(string version, SearchBankReconciliationsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search bank reconciliations
        /// </summary>
        /// <remarks>
        /// Search and filter bank reconciliations with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankReconciliationResponsePagedList> BankReconciliationSearchEndpointAsync(string version, SearchBankReconciliationsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Mark a bank reconciliation as in progress
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationStartEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Mark a bank reconciliation as in progress
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationStartEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Complete a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Mark a bank reconciliation as completed
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationCompleteEndpointAsync(string version, System.Guid id, CompleteBankReconciliationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Mark a bank reconciliation as completed
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationCompleteEndpointAsync(string version, System.Guid id, CompleteBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Approve a completed bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationApproveEndpointAsync(string version, System.Guid id, ApproveBankReconciliationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Approve a completed bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationApproveEndpointAsync(string version, System.Guid id, ApproveBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reject a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Reject a completed bank reconciliation for rework
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationRejectEndpointAsync(string version, System.Guid id, RejectBankReconciliationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reject a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Reject a completed bank reconciliation for rework
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BankReconciliationRejectEndpointAsync(string version, System.Guid id, RejectBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new bank
        /// </summary>
        /// <remarks>
        /// Creates a new bank in the accounting system with comprehensive validation and returns the created bank ID.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankCreateResponse> BankCreateEndpointAsync(string version, BankCreateCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new bank
        /// </summary>
        /// <remarks>
        /// Creates a new bank in the accounting system with comprehensive validation and returns the created bank ID.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankCreateResponse> BankCreateEndpointAsync(string version, BankCreateCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing bank
        /// </summary>
        /// <remarks>
        /// Updates an existing bank in the accounting system with comprehensive validation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankUpdateResponse> BankUpdateEndpointAsync(string version, System.Guid id, BankUpdateCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing bank
        /// </summary>
        /// <remarks>
        /// Updates an existing bank in the accounting system with comprehensive validation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankUpdateResponse> BankUpdateEndpointAsync(string version, System.Guid id, BankUpdateCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a bank
        /// </summary>
        /// <remarks>
        /// Deletes a bank from the accounting system. Consider deactivating instead of deleting to preserve historical data.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankDeleteResponse> BankDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a bank
        /// </summary>
        /// <remarks>
        /// Deletes a bank from the accounting system. Consider deactivating instead of deleting to preserve historical data.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankDeleteResponse> BankDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a bank by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a bank by its unique identifier with all details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponse> BankGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a bank by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a bank by its unique identifier with all details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponse> BankGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search banks
        /// </summary>
        /// <remarks>
        /// Searches banks with filtering by bank code, name, routing number, SWIFT code, and active status. Supports pagination and sorting.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponsePagedList> BankSearchEndpointAsync(string version, BankSearchCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search banks
        /// </summary>
        /// <remarks>
        /// Searches banks with filtering by bank code, name, routing number, SWIFT code, and active status. Supports pagination and sorting.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponsePagedList> BankSearchEndpointAsync(string version, BankSearchCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create invoice from consumption
        /// </summary>
        /// <remarks>
        /// Creates an invoice for a consumption record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> CreateInvoiceFromConsumptionEndpointAsync(string version, CreateInvoiceFromConsumptionCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create invoice from consumption
        /// </summary>
        /// <remarks>
        /// Creates an invoice for a consumption record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> CreateInvoiceFromConsumptionEndpointAsync(string version, CreateInvoiceFromConsumptionCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new bin
        /// </summary>
        /// <remarks>
        /// Creates a new storage bin within a warehouse location
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateBinResponse> CreateBinEndpointAsync(string version, CreateBinCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new bin
        /// </summary>
        /// <remarks>
        /// Creates a new storage bin within a warehouse location
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateBinResponse> CreateBinEndpointAsync(string version, CreateBinCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing bin
        /// </summary>
        /// <remarks>
        /// Updates an existing storage bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateBinResponse> UpdateBinEndpointAsync(string version, System.Guid id, UpdateBinCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing bin
        /// </summary>
        /// <remarks>
        /// Updates an existing storage bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateBinResponse> UpdateBinEndpointAsync(string version, System.Guid id, UpdateBinCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a bin
        /// </summary>
        /// <remarks>
        /// Deletes a storage bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DeleteBinEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a bin
        /// </summary>
        /// <remarks>
        /// Deletes a storage bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DeleteBinEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get bin by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific storage bin by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinResponse> GetBinEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get bin by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific storage bin by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinResponse> GetBinEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search bins
        /// </summary>
        /// <remarks>
        /// Searches for storage bins with pagination and filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinResponsePagedList> SearchBinsEndpointAsync(string version, SearchBinsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search bins
        /// </summary>
        /// <remarks>
        /// Searches for storage bins with pagination and filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinResponsePagedList> SearchBinsEndpointAsync(string version, SearchBinsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// creates a brand
        /// </summary>
        /// <remarks>
        /// creates a brand
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateBrandResponse> CreateBrandEndpointAsync(string version, CreateBrandCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// creates a brand
        /// </summary>
        /// <remarks>
        /// creates a brand
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateBrandResponse> CreateBrandEndpointAsync(string version, CreateBrandCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// gets brand by id
        /// </summary>
        /// <remarks>
        /// gets brand by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BrandResponse> GetBrandEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// gets brand by id
        /// </summary>
        /// <remarks>
        /// gets brand by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BrandResponse> GetBrandEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update a brand
        /// </summary>
        /// <remarks>
        /// update a brand
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateBrandResponse> UpdateBrandEndpointAsync(string version, System.Guid id, UpdateBrandCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a brand
        /// </summary>
        /// <remarks>
        /// update a brand
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateBrandResponse> UpdateBrandEndpointAsync(string version, System.Guid id, UpdateBrandCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// deletes brand by id
        /// </summary>
        /// <remarks>
        /// deletes brand by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBrandEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// deletes brand by id
        /// </summary>
        /// <remarks>
        /// deletes brand by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBrandEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a list of brands
        /// </summary>
        /// <remarks>
        /// Gets a list of brands with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BrandResponsePagedList> SearchBrandsEndpointAsync(string version, SearchBrandsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of brands
        /// </summary>
        /// <remarks>
        /// Gets a list of brands with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BrandResponsePagedList> SearchBrandsEndpointAsync(string version, SearchBrandsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// create budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> BudgetDetailCreateEndpointAsync(string version, CreateBudgetDetailCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> BudgetDetailCreateEndpointAsync(string version, CreateBudgetDetailCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> BudgetDetailUpdateEndpointAsync(string version, System.Guid id, UpdateBudgetDetailCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> BudgetDetailUpdateEndpointAsync(string version, System.Guid id, UpdateBudgetDetailCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// delete budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BudgetDetailDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BudgetDetailDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get budget detail by id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetDetailResponse> BudgetDetailGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get budget detail by id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetDetailResponse> BudgetDetailGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// list budget details by budget id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetDetailResponse>> BudgetDetailSearchEndpointAsync(string version, System.Guid budgetId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// list budget details by budget id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetDetailResponse>> BudgetDetailSearchEndpointAsync(string version, System.Guid budgetId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// create a budget
        /// </summary>
        /// <remarks>
        /// create a budget
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateBudgetResponse> BudgetCreateEndpointAsync(string version, CreateBudgetCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create a budget
        /// </summary>
        /// <remarks>
        /// create a budget
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateBudgetResponse> BudgetCreateEndpointAsync(string version, CreateBudgetCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a list of budgets
        /// </summary>
        /// <remarks>
        /// Gets a list of budgets with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetResponsePagedList> BudgetSearchEndpointAsync(string version, SearchBudgetsQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of budgets
        /// </summary>
        /// <remarks>
        /// Gets a list of budgets with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetResponsePagedList> BudgetSearchEndpointAsync(string version, SearchBudgetsQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get a budget by id
        /// </summary>
        /// <remarks>
        /// get a budget by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetResponse> BudgetGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get a budget by id
        /// </summary>
        /// <remarks>
        /// get a budget by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BudgetResponse> BudgetGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update a budget
        /// </summary>
        /// <remarks>
        /// update a budget
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateBudgetResponse> BudgetUpdateEndpointAsync(string version, System.Guid id, UpdateBudgetCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a budget
        /// </summary>
        /// <remarks>
        /// update a budget
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateBudgetResponse> BudgetUpdateEndpointAsync(string version, System.Guid id, UpdateBudgetCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// delete budget by id
        /// </summary>
        /// <remarks>
        /// delete budget by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BudgetDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete budget by id
        /// </summary>
        /// <remarks>
        /// delete budget by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BudgetDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new category
        /// </summary>
        /// <remarks>
        /// Creates a new category
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateCategoryResponse> CreateCategoryEndpointAsync(string version, CreateCategoryCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new category
        /// </summary>
        /// <remarks>
        /// Creates a new category
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateCategoryResponse> CreateCategoryEndpointAsync(string version, CreateCategoryCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// Updates an existing category
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateCategoryResponse> UpdateCategoryEndpointAsync(string version, System.Guid id, UpdateCategoryCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// Updates an existing category
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateCategoryResponse> UpdateCategoryEndpointAsync(string version, System.Guid id, UpdateCategoryCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// Deletes a category by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCategoryEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// Deletes a category by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCategoryEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get category by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a category by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryResponse> GetCategoryEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get category by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a category by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryResponse> GetCategoryEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search categories
        /// </summary>
        /// <remarks>
        /// Searches categories with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryResponsePagedList> SearchCategoriesEndpointAsync(string version, SearchCategoriesCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search categories
        /// </summary>
        /// <remarks>
        /// Searches categories with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CategoryResponsePagedList> SearchCategoriesEndpointAsync(string version, SearchCategoriesCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// create a chart of account
        /// </summary>
        /// <remarks>
        /// create a chart of account
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ChartOfAccountCreateEndpointAsync(string version, CreateChartOfAccountCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create a chart of account
        /// </summary>
        /// <remarks>
        /// create a chart of account
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ChartOfAccountCreateEndpointAsync(string version, CreateChartOfAccountCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update a chart of account
        /// </summary>
        /// <remarks>
        /// update a chart of account
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ChartOfAccountUpdateEndpointAsync(string version, System.Guid id, UpdateChartOfAccountCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a chart of account
        /// </summary>
        /// <remarks>
        /// update a chart of account
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ChartOfAccountUpdateEndpointAsync(string version, System.Guid id, UpdateChartOfAccountCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// delete chart of account by id
        /// </summary>
        /// <remarks>
        /// delete chart of account by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChartOfAccountDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete chart of account by id
        /// </summary>
        /// <remarks>
        /// delete chart of account by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChartOfAccountDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get a chart of account by id
        /// </summary>
        /// <remarks>
        /// get a chart of account by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChartOfAccountResponse> ChartOfAccountGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get a chart of account by id
        /// </summary>
        /// <remarks>
        /// get a chart of account by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChartOfAccountResponse> ChartOfAccountGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a list of chart of accounts
        /// </summary>
        /// <remarks>
        /// Gets a list of chart of accounts with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChartOfAccountResponsePagedList> ChartOfAccountSearchEndpointAsync(string version, SearchChartOfAccountQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of chart of accounts
        /// </summary>
        /// <remarks>
        /// Gets a list of chart of accounts with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChartOfAccountResponsePagedList> ChartOfAccountSearchEndpointAsync(string version, SearchChartOfAccountQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Import chart of accounts from Excel file
        /// </summary>
        /// <remarks>
        /// Imports chart of accounts from an Excel (.xlsx) file with validation and duplicate checking
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ChartOfAccountImportEndpointAsync(string version, ImportChartOfAccountsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import chart of accounts from Excel file
        /// </summary>
        /// <remarks>
        /// Imports chart of accounts from an Excel (.xlsx) file with validation and duplicate checking
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ChartOfAccountImportEndpointAsync(string version, ImportChartOfAccountsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Export chart of accounts to Excel file
        /// </summary>
        /// <remarks>
        /// Exports chart of accounts to Excel (.xlsx) file with optional filtering by account type, USOA category, and search criteria
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ChartOfAccountExportEndpointAsync(string version, ExportChartOfAccountsQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export chart of accounts to Excel file
        /// </summary>
        /// <remarks>
        /// Exports chart of accounts to Excel (.xlsx) file with optional filtering by account type, USOA category, and search criteria
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ChartOfAccountExportEndpointAsync(string version, ExportChartOfAccountsQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get check by ID
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a specific check including current status, payment details, and complete audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckGetResponse> CheckGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get check by ID
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a specific check including current status, payment details, and complete audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckGetResponse> CheckGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing check
        /// </summary>
        /// <remarks>
        /// Updates an existing check in the accounting system. BankAccountName and BankName are automatically populated from their respective entities based on the provided BankAccountCode and BankId.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckUpdateResponse> CheckUpdateEndpointAsync(string version, System.Guid id, CheckUpdateCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing check
        /// </summary>
        /// <remarks>
        /// Updates an existing check in the accounting system. BankAccountName and BankName are automatically populated from their respective entities based on the provided BankAccountCode and BankId.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckUpdateResponse> CheckUpdateEndpointAsync(string version, System.Guid id, CheckUpdateCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search checks
        /// </summary>
        /// <remarks>
        /// Search and filter checks with pagination, status filtering, date ranges, and amount ranges. Supports advanced filtering by check number, bank account, payee name, and print/stop payment status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckSearchResponsePagedList> CheckSearchEndpointAsync(string version, CheckSearchQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search checks
        /// </summary>
        /// <remarks>
        /// Search and filter checks with pagination, status filtering, date ranges, and amount ranges. Supports advanced filtering by check number, bank account, payee name, and print/stop payment status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckSearchResponsePagedList> CheckSearchEndpointAsync(string version, CheckSearchQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Register a new check
        /// </summary>
        /// <remarks>
        /// Register a new check in the system for later use in payments. Creates a check in 'Available' status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckCreateResponse> CheckCreateEndpointAsync(string version, CheckCreateCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register a new check
        /// </summary>
        /// <remarks>
        /// Register a new check in the system for later use in payments. Creates a check in 'Available' status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckCreateResponse> CheckCreateEndpointAsync(string version, CheckCreateCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Issue a check for payment
        /// </summary>
        /// <remarks>
        /// Issue a check to a payee/vendor for payment of expenses, invoices, or other obligations. Transitions check to Issued status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckIssueResponse> CheckIssueEndpointAsync(string version, CheckIssueCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Issue a check for payment
        /// </summary>
        /// <remarks>
        /// Issue a check to a payee/vendor for payment of expenses, invoices, or other obligations. Transitions check to Issued status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckIssueResponse> CheckIssueEndpointAsync(string version, CheckIssueCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Void a check
        /// </summary>
        /// <remarks>
        /// Void a check that was issued in error or needs to be cancelled. Records the void reason in audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckVoidResponse> CheckVoidEndpointAsync(string version, CheckVoidCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Void a check
        /// </summary>
        /// <remarks>
        /// Void a check that was issued in error or needs to be cancelled. Records the void reason in audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckVoidResponse> CheckVoidEndpointAsync(string version, CheckVoidCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mark check as cleared
        /// </summary>
        /// <remarks>
        /// Mark a check as cleared during bank reconciliation when it appears on the bank statement.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckClearResponse> CheckClearEndpointAsync(string version, CheckClearCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark check as cleared
        /// </summary>
        /// <remarks>
        /// Mark a check as cleared during bank reconciliation when it appears on the bank statement.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckClearResponse> CheckClearEndpointAsync(string version, CheckClearCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Request stop payment on check
        /// </summary>
        /// <remarks>
        /// Request stop payment on a check that is lost, stolen, or needs to be cancelled before presentation to the bank.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckStopPaymentResponse> CheckStopPaymentEndpointAsync(string version, CheckStopPaymentCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request stop payment on check
        /// </summary>
        /// <remarks>
        /// Request stop payment on a check that is lost, stolen, or needs to be cancelled before presentation to the bank.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckStopPaymentResponse> CheckStopPaymentEndpointAsync(string version, CheckStopPaymentCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mark check as printed
        /// </summary>
        /// <remarks>
        /// Mark a check as printed and record who performed the printing. Maintains audit trail for compliance.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckPrintResponse> CheckPrintEndpointAsync(string version, CheckPrintCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark check as printed
        /// </summary>
        /// <remarks>
        /// Mark a check as printed and record who performed the printing. Maintains audit trail for compliance.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CheckPrintResponse> CheckPrintEndpointAsync(string version, CheckPrintCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a credit memo
        /// </summary>
        /// <remarks>
        /// Create a new credit memo for receivable/payable adjustments
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> CreditMemoCreateEndpointAsync(string version, CreateCreditMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a credit memo
        /// </summary>
        /// <remarks>
        /// Create a new credit memo for receivable/payable adjustments
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> CreditMemoCreateEndpointAsync(string version, CreateCreditMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a credit memo
        /// </summary>
        /// <remarks>
        /// Update an existing credit memo (draft only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoUpdateEndpointAsync(string version, System.Guid id, UpdateCreditMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a credit memo
        /// </summary>
        /// <remarks>
        /// Update an existing credit memo (draft only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoUpdateEndpointAsync(string version, System.Guid id, UpdateCreditMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get credit memo by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a specific credit memo by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreditMemoResponse> CreditMemoGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get credit memo by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a specific credit memo by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreditMemoResponse> CreditMemoGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a credit memo
        /// </summary>
        /// <remarks>
        /// Delete a credit memo (draft status only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a credit memo
        /// </summary>
        /// <remarks>
        /// Delete a credit memo (draft status only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search credit memos
        /// </summary>
        /// <remarks>
        /// Search and filter credit memos with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreditMemoResponsePagedList> CreditMemoSearchEndpointAsync(string version, SearchCreditMemosQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search credit memos
        /// </summary>
        /// <remarks>
        /// Search and filter credit memos with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreditMemoResponsePagedList> CreditMemoSearchEndpointAsync(string version, SearchCreditMemosQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve a credit memo
        /// </summary>
        /// <remarks>
        /// Approve a draft credit memo for application or refund
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoApproveEndpointAsync(string version, System.Guid id, ApproveCreditMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a credit memo
        /// </summary>
        /// <remarks>
        /// Approve a draft credit memo for application or refund
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoApproveEndpointAsync(string version, System.Guid id, ApproveCreditMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Apply a credit memo
        /// </summary>
        /// <remarks>
        /// Apply an approved credit memo to an invoice or bill
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoApplyEndpointAsync(string version, System.Guid id, ApplyCreditMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Apply a credit memo
        /// </summary>
        /// <remarks>
        /// Apply an approved credit memo to an invoice or bill
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoApplyEndpointAsync(string version, System.Guid id, ApplyCreditMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Issue refund for credit memo
        /// </summary>
        /// <remarks>
        /// Issue a direct refund for an approved credit memo
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoRefundEndpointAsync(string version, System.Guid id, RefundCreditMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Issue refund for credit memo
        /// </summary>
        /// <remarks>
        /// Issue a direct refund for an approved credit memo
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoRefundEndpointAsync(string version, System.Guid id, RefundCreditMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Void a credit memo
        /// </summary>
        /// <remarks>
        /// Void a credit memo and reverse any applications or refunds
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoVoidEndpointAsync(string version, System.Guid id, VoidCreditMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Void a credit memo
        /// </summary>
        /// <remarks>
        /// Void a credit memo and reverse any applications or refunds
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CreditMemoVoidEndpointAsync(string version, System.Guid id, VoidCreditMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new cycle count
        /// </summary>
        /// <remarks>
        /// Schedules a new cycle count for a warehouse or location
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateCycleCountResponse> CreateCycleCountEndpointAsync(string version, CreateCycleCountCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new cycle count
        /// </summary>
        /// <remarks>
        /// Schedules a new cycle count for a warehouse or location
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateCycleCountResponse> CreateCycleCountEndpointAsync(string version, CreateCycleCountCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search cycle counts
        /// </summary>
        /// <remarks>
        /// Searches cycle counts with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CycleCountResponsePagedList> SearchCycleCountsEndpointAsync(string version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search cycle counts
        /// </summary>
        /// <remarks>
        /// Searches cycle counts with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CycleCountResponsePagedList> SearchCycleCountsEndpointAsync(string version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a cycle count
        /// </summary>
        /// <remarks>
        /// Updates cycle count details. Only cycle counts in 'Scheduled' status can be updated.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateCycleCountResponse> UpdateCycleCountEndpointAsync(string version, System.Guid id, UpdateCycleCountCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a cycle count
        /// </summary>
        /// <remarks>
        /// Updates cycle count details. Only cycle counts in 'Scheduled' status can be updated.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateCycleCountResponse> UpdateCycleCountEndpointAsync(string version, System.Guid id, UpdateCycleCountCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get cycle count by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a cycle count by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CycleCountResponse> GetCycleCountEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get cycle count by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a cycle count by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CycleCountResponse> GetCycleCountEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start a cycle count
        /// </summary>
        /// <remarks>
        /// Marks a scheduled cycle count as in-progress
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StartCycleCountResponse> StartCycleCountEndpointAsync(string version, System.Guid id, StartCycleCountCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a cycle count
        /// </summary>
        /// <remarks>
        /// Marks a scheduled cycle count as in-progress
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StartCycleCountResponse> StartCycleCountEndpointAsync(string version, System.Guid id, StartCycleCountCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Complete a cycle count
        /// </summary>
        /// <remarks>
        /// Marks an in-progress cycle count as completed and computes metrics
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompleteCycleCountResponse> CompleteCycleCountEndpointAsync(string version, System.Guid id, CompleteCycleCountCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete a cycle count
        /// </summary>
        /// <remarks>
        /// Marks an in-progress cycle count as completed and computes metrics
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompleteCycleCountResponse> CompleteCycleCountEndpointAsync(string version, System.Guid id, CompleteCycleCountCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel a cycle count
        /// </summary>
        /// <remarks>
        /// Cancels a cycle count that is in 'Scheduled' or 'InProgress' status
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelCycleCountResponse> CancelCycleCountEndpointAsync(string version, System.Guid id, CancelCycleCountCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a cycle count
        /// </summary>
        /// <remarks>
        /// Cancels a cycle count that is in 'Scheduled' or 'InProgress' status
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelCycleCountResponse> CancelCycleCountEndpointAsync(string version, System.Guid id, CancelCycleCountCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reconcile a cycle count
        /// </summary>
        /// <remarks>
        /// Runs reconciliation for a completed cycle count and returns any discrepancies
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReconcileCycleCountResponse> ReconcileCycleCountEndpointAsync(string version, System.Guid id, ReconcileCycleCountCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reconcile a cycle count
        /// </summary>
        /// <remarks>
        /// Runs reconciliation for a completed cycle count and returns any discrepancies
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReconcileCycleCountResponse> ReconcileCycleCountEndpointAsync(string version, System.Guid id, ReconcileCycleCountCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add an item count to a cycle count
        /// </summary>
        /// <remarks>
        /// Adds counted quantity for a grocery item to the cycle count
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddCycleCountItemResponse> AddCycleCountItemEndpointAsync(string version, System.Guid id, AddCycleCountItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an item count to a cycle count
        /// </summary>
        /// <remarks>
        /// Adds counted quantity for a grocery item to the cycle count
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddCycleCountItemResponse> AddCycleCountItemEndpointAsync(string version, System.Guid id, AddCycleCountItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Record counted quantity for a cycle count item
        /// </summary>
        /// <remarks>
        /// Records the physically counted quantity for a specific item during the counting phase. This is the core operation of cycle counting.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecordCycleCountItemResponse> RecordCycleCountItemEndpointAsync(string version, System.Guid cycleCountId, System.Guid itemId, RecordCycleCountItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Record counted quantity for a cycle count item
        /// </summary>
        /// <remarks>
        /// Records the physically counted quantity for a specific item during the counting phase. This is the core operation of cycle counting.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecordCycleCountItemResponse> RecordCycleCountItemEndpointAsync(string version, System.Guid cycleCountId, System.Guid itemId, RecordCycleCountItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a debit memo
        /// </summary>
        /// <remarks>
        /// Create a new debit memo for receivable/payable adjustments
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DebitMemoCreateEndpointAsync(string version, CreateDebitMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a debit memo
        /// </summary>
        /// <remarks>
        /// Create a new debit memo for receivable/payable adjustments
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DebitMemoCreateEndpointAsync(string version, CreateDebitMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a debit memo
        /// </summary>
        /// <remarks>
        /// Update an existing debit memo (draft only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoUpdateEndpointAsync(string version, System.Guid id, UpdateDebitMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a debit memo
        /// </summary>
        /// <remarks>
        /// Update an existing debit memo (draft only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoUpdateEndpointAsync(string version, System.Guid id, UpdateDebitMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get debit memo by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a specific debit memo by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DebitMemoResponse> DebitMemoGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get debit memo by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a specific debit memo by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DebitMemoResponse> DebitMemoGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a debit memo
        /// </summary>
        /// <remarks>
        /// Delete a debit memo (draft status only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a debit memo
        /// </summary>
        /// <remarks>
        /// Delete a debit memo (draft status only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search debit memos
        /// </summary>
        /// <remarks>
        /// Search and filter debit memos with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DebitMemoResponsePagedList> DebitMemoSearchEndpointAsync(string version, SearchDebitMemosQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search debit memos
        /// </summary>
        /// <remarks>
        /// Search and filter debit memos with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DebitMemoResponsePagedList> DebitMemoSearchEndpointAsync(string version, SearchDebitMemosQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve a debit memo
        /// </summary>
        /// <remarks>
        /// Approve a draft debit memo for application
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoApproveEndpointAsync(string version, System.Guid id, ApproveDebitMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a debit memo
        /// </summary>
        /// <remarks>
        /// Approve a draft debit memo for application
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoApproveEndpointAsync(string version, System.Guid id, ApproveDebitMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Apply a debit memo
        /// </summary>
        /// <remarks>
        /// Apply an approved debit memo to an invoice or bill
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoApplyEndpointAsync(string version, System.Guid id, ApplyDebitMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Apply a debit memo
        /// </summary>
        /// <remarks>
        /// Apply an approved debit memo to an invoice or bill
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoApplyEndpointAsync(string version, System.Guid id, ApplyDebitMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Void a debit memo
        /// </summary>
        /// <remarks>
        /// Void a debit memo and reverse any applications
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoVoidEndpointAsync(string version, System.Guid id, VoidDebitMemoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Void a debit memo
        /// </summary>
        /// <remarks>
        /// Void a debit memo and reverse any applications
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DebitMemoVoidEndpointAsync(string version, System.Guid id, VoidDebitMemoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create deferred revenue
        /// </summary>
        /// <remarks>
        /// Creates a new deferred revenue entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DeferredRevenueCreateEndpointAsync(string version, CreateDeferredRevenueCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create deferred revenue
        /// </summary>
        /// <remarks>
        /// Creates a new deferred revenue entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DeferredRevenueCreateEndpointAsync(string version, CreateDeferredRevenueCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Recognize deferred revenue
        /// </summary>
        /// <remarks>
        /// Recognizes deferred revenue for a given entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeferredRevenueUpdateEndpointAsync(string version, System.Guid id, RecognizeDeferredRevenueCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recognize deferred revenue
        /// </summary>
        /// <remarks>
        /// Recognizes deferred revenue for a given entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeferredRevenueUpdateEndpointAsync(string version, System.Guid id, RecognizeDeferredRevenueCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get deferred revenue by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of a deferred revenue entry by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeferredRevenueGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get deferred revenue by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of a deferred revenue entry by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeferredRevenueGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search deferred revenues
        /// </summary>
        /// <remarks>
        /// Searches deferred revenue entries with filters and pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeferredRevenueSearchEndpointAsync(string version, SearchDeferredRevenuesQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search deferred revenues
        /// </summary>
        /// <remarks>
        /// Searches deferred revenue entries with filters and pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeferredRevenueSearchEndpointAsync(string version, SearchDeferredRevenuesQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a depreciation method
        /// </summary>
        /// <remarks>
        /// Creates a new depreciation method
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DepreciationMethodCreateEndpointAsync(string version, CreateDepreciationMethodRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a depreciation method
        /// </summary>
        /// <remarks>
        /// Creates a new depreciation method
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DepreciationMethodCreateEndpointAsync(string version, CreateDepreciationMethodRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a depreciation method
        /// </summary>
        /// <remarks>
        /// Updates an existing depreciation method
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DepreciationMethodUpdateEndpointAsync(string version, System.Guid id, UpdateDepreciationMethodRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a depreciation method
        /// </summary>
        /// <remarks>
        /// Updates an existing depreciation method
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DepreciationMethodUpdateEndpointAsync(string version, System.Guid id, UpdateDepreciationMethodRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a depreciation method
        /// </summary>
        /// <remarks>
        /// Deletes a depreciation method by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DepreciationMethodDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a depreciation method
        /// </summary>
        /// <remarks>
        /// Deletes a depreciation method by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DepreciationMethodDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a depreciation method by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of a depreciation method by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DepreciationMethodGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a depreciation method by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of a depreciation method by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DepreciationMethodGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new goods receipt
        /// </summary>
        /// <remarks>
        /// Creates a new goods receipt for tracking inbound deliveries from suppliers.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateGoodsReceiptResponse> CreateGoodsReceiptEndpointAsync(string version, CreateGoodsReceiptCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new goods receipt
        /// </summary>
        /// <remarks>
        /// Creates a new goods receipt for tracking inbound deliveries from suppliers.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateGoodsReceiptResponse> CreateGoodsReceiptEndpointAsync(string version, CreateGoodsReceiptCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add item to goods receipt
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing goods receipt.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddGoodsReceiptItemResponse> AddGoodsReceiptItemEndpointAsync(string version, System.Guid id, AddGoodsReceiptItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add item to goods receipt
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing goods receipt.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddGoodsReceiptItemResponse> AddGoodsReceiptItemEndpointAsync(string version, System.Guid id, AddGoodsReceiptItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mark goods receipt as received
        /// </summary>
        /// <remarks>
        /// Marks a goods receipt as received/completed.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarkReceivedResponse> MarkReceivedEndpointAsync(string version, System.Guid id, MarkReceivedCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark goods receipt as received
        /// </summary>
        /// <remarks>
        /// Marks a goods receipt as received/completed.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarkReceivedResponse> MarkReceivedEndpointAsync(string version, System.Guid id, MarkReceivedCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a goods receipt
        /// </summary>
        /// <remarks>
        /// Deletes an existing goods receipt.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteGoodsReceiptResponse> DeleteGoodsReceiptEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a goods receipt
        /// </summary>
        /// <remarks>
        /// Deletes an existing goods receipt.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteGoodsReceiptResponse> DeleteGoodsReceiptEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get goods receipt by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific goods receipt with all items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetGoodsReceiptResponse> GetGoodsReceiptEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get goods receipt by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific goods receipt with all items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetGoodsReceiptResponse> GetGoodsReceiptEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search goods receipts
        /// </summary>
        /// <remarks>
        /// Searches goods receipts with pagination and filtering options.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GoodsReceiptResponsePagedList> SearchGoodsReceiptsEndpointAsync(string version, SearchGoodsReceiptsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search goods receipts
        /// </summary>
        /// <remarks>
        /// Searches goods receipts with pagination and filtering options.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GoodsReceiptResponsePagedList> SearchGoodsReceiptsEndpointAsync(string version, SearchGoodsReceiptsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get PO items available for receiving
        /// </summary>
        /// <remarks>
        /// Returns purchase order items with their ordered, received, and remaining quantities for partial receiving support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPurchaseOrderItemsForReceivingResponse> GetPurchaseOrderItemsForReceivingEndpointAsync(string version, System.Guid purchaseOrderId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get PO items available for receiving
        /// </summary>
        /// <remarks>
        /// Returns purchase order items with their ordered, received, and remaining quantities for partial receiving support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPurchaseOrderItemsForReceivingResponse> GetPurchaseOrderItemsForReceivingEndpointAsync(string version, System.Guid purchaseOrderId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create inventory item
        /// </summary>
        /// <remarks>
        /// Creates a new inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> CreateInventoryItemEndpointAsync(string version, CreateInventoryItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create inventory item
        /// </summary>
        /// <remarks>
        /// Creates a new inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> CreateInventoryItemEndpointAsync(string version, CreateInventoryItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new inventory transfer
        /// </summary>
        /// <remarks>
        /// Creates a new transfer between warehouses
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateInventoryTransferResponse> CreateInventoryTransferEndpointAsync(string version, CreateInventoryTransferCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new inventory transfer
        /// </summary>
        /// <remarks>
        /// Creates a new transfer between warehouses
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateInventoryTransferResponse> CreateInventoryTransferEndpointAsync(string version, CreateInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update inventory transfer
        /// </summary>
        /// <remarks>
        /// Updates an existing inventory transfer with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateInventoryTransferResponse> UpdateInventoryTransferEndpointAsync(string version, System.Guid id, UpdateInventoryTransferCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update inventory transfer
        /// </summary>
        /// <remarks>
        /// Updates an existing inventory transfer with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateInventoryTransferResponse> UpdateInventoryTransferEndpointAsync(string version, System.Guid id, UpdateInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an inventory transfer
        /// </summary>
        /// <remarks>
        /// Deletes an inventory transfer by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInventoryTransferEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an inventory transfer
        /// </summary>
        /// <remarks>
        /// Deletes an inventory transfer by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInventoryTransferEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get inventory transfer by ID
        /// </summary>
        /// <remarks>
        /// Retrieves an inventory transfer by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInventoryTransferResponse> GetInventoryTransferEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get inventory transfer by ID
        /// </summary>
        /// <remarks>
        /// Retrieves an inventory transfer by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInventoryTransferResponse> GetInventoryTransferEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get list of inventory transfers
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of inventory transfers with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInventoryTransferListResponsePagedList> SearchInventoryTransfersEndpointAsync(string version, SearchInventoryTransfersCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of inventory transfers
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of inventory transfers with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetInventoryTransferListResponsePagedList> SearchInventoryTransfersEndpointAsync(string version, SearchInventoryTransfersCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add item to inventory transfer
        /// </summary>
        /// <remarks>
        /// Adds a grocery item line to an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddInventoryTransferItemResponse> AddInventoryTransferItemEndpointAsync(string version, System.Guid id, AddInventoryTransferItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add item to inventory transfer
        /// </summary>
        /// <remarks>
        /// Adds a grocery item line to an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddInventoryTransferItemResponse> AddInventoryTransferItemEndpointAsync(string version, System.Guid id, AddInventoryTransferItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove item from inventory transfer
        /// </summary>
        /// <remarks>
        /// Removes a grocery item line from an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveInventoryTransferItemEndpointAsync(string version, System.Guid id, System.Guid itemId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove item from inventory transfer
        /// </summary>
        /// <remarks>
        /// Removes a grocery item line from an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveInventoryTransferItemEndpointAsync(string version, System.Guid id, System.Guid itemId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update inventory transfer item
        /// </summary>
        /// <remarks>
        /// Updates quantity and unit price of an item within an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateInventoryTransferItemResponse> UpdateInventoryTransferItemEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdateInventoryTransferItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update inventory transfer item
        /// </summary>
        /// <remarks>
        /// Updates quantity and unit price of an item within an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateInventoryTransferItemResponse> UpdateInventoryTransferItemEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdateInventoryTransferItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve inventory transfer
        /// </summary>
        /// <remarks>
        /// Approves an inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApproveInventoryTransferResponse> ApproveInventoryTransferEndpointAsync(string version, System.Guid id, ApproveInventoryTransferCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve inventory transfer
        /// </summary>
        /// <remarks>
        /// Approves an inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApproveInventoryTransferResponse> ApproveInventoryTransferEndpointAsync(string version, System.Guid id, ApproveInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Mark inventory transfer as in-transit
        /// </summary>
        /// <remarks>
        /// Marks an approved inventory transfer as InTransit
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarkInTransitInventoryTransferResponse> MarkInTransitInventoryTransferEndpointAsync(string version, System.Guid id, MarkInTransitInventoryTransferCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark inventory transfer as in-transit
        /// </summary>
        /// <remarks>
        /// Marks an approved inventory transfer as InTransit
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MarkInTransitInventoryTransferResponse> MarkInTransitInventoryTransferEndpointAsync(string version, System.Guid id, MarkInTransitInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Complete inventory transfer
        /// </summary>
        /// <remarks>
        /// Marks an in-transit inventory transfer as completed and records actual arrival
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompleteInventoryTransferResponse> CompleteInventoryTransferEndpointAsync(string version, System.Guid id, CompleteInventoryTransferCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete inventory transfer
        /// </summary>
        /// <remarks>
        /// Marks an in-transit inventory transfer as completed and records actual arrival
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompleteInventoryTransferResponse> CompleteInventoryTransferEndpointAsync(string version, System.Guid id, CompleteInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel inventory transfer
        /// </summary>
        /// <remarks>
        /// Cancels a pending or approved inventory transfer with optional reason
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelInventoryTransferResponse> CancelInventoryTransferEndpointAsync(string version, System.Guid id, CancelInventoryTransferCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel inventory transfer
        /// </summary>
        /// <remarks>
        /// Cancels a pending or approved inventory transfer with optional reason
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelInventoryTransferResponse> CancelInventoryTransferEndpointAsync(string version, System.Guid id, CancelInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new inventory reservation
        /// </summary>
        /// <remarks>
        /// Creates a new inventory reservation to prevent overselling and support order fulfillment.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateInventoryReservationResponse> CreateInventoryReservationEndpointAsync(string version, CreateInventoryReservationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new inventory reservation
        /// </summary>
        /// <remarks>
        /// Creates a new inventory reservation to prevent overselling and support order fulfillment.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateInventoryReservationResponse> CreateInventoryReservationEndpointAsync(string version, CreateInventoryReservationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Release an inventory reservation
        /// </summary>
        /// <remarks>
        /// Releases an active inventory reservation, returning the quantity to available stock.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReleaseInventoryReservationResponse> ReleaseInventoryReservationEndpointAsync(string version, System.Guid id, ReleaseInventoryReservationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Release an inventory reservation
        /// </summary>
        /// <remarks>
        /// Releases an active inventory reservation, returning the quantity to available stock.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReleaseInventoryReservationResponse> ReleaseInventoryReservationEndpointAsync(string version, System.Guid id, ReleaseInventoryReservationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an inventory reservation
        /// </summary>
        /// <remarks>
        /// Deletes an existing inventory reservation from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteInventoryReservationResponse> DeleteInventoryReservationEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an inventory reservation
        /// </summary>
        /// <remarks>
        /// Deletes an existing inventory reservation from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteInventoryReservationResponse> DeleteInventoryReservationEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get an inventory reservation by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory reservation by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InventoryReservationResponse> GetInventoryReservationEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an inventory reservation by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory reservation by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InventoryReservationResponse> GetInventoryReservationEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search inventory reservations
        /// </summary>
        /// <remarks>
        /// Searches for inventory reservations with pagination and filtering by reservation number, item, warehouse, type, status, dates, and more.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InventoryReservationDtoPagedList> SearchInventoryReservationsEndpointAsync(string version, SearchInventoryReservationsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search inventory reservations
        /// </summary>
        /// <remarks>
        /// Searches for inventory reservations with pagination and filtering by reservation number, item, warehouse, type, status, dates, and more.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InventoryReservationDtoPagedList> SearchInventoryReservationsEndpointAsync(string version, SearchInventoryReservationsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new inventory transaction
        /// </summary>
        /// <remarks>
        /// Creates a new inventory transaction for stock movement tracking and audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateInventoryTransactionResponse> CreateInventoryTransactionEndpointAsync(string version, CreateInventoryTransactionCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new inventory transaction
        /// </summary>
        /// <remarks>
        /// Creates a new inventory transaction for stock movement tracking and audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateInventoryTransactionResponse> CreateInventoryTransactionEndpointAsync(string version, CreateInventoryTransactionCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve an inventory transaction
        /// </summary>
        /// <remarks>
        /// Approves a pending inventory transaction for authorization and compliance.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApproveInventoryTransactionResponse> ApproveInventoryTransactionEndpointAsync(string version, System.Guid id, ApproveInventoryTransactionCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve an inventory transaction
        /// </summary>
        /// <remarks>
        /// Approves a pending inventory transaction for authorization and compliance.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApproveInventoryTransactionResponse> ApproveInventoryTransactionEndpointAsync(string version, System.Guid id, ApproveInventoryTransactionCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reject an inventory transaction
        /// </summary>
        /// <remarks>
        /// Rejects a previously approved inventory transaction, optionally recording the reason for rejection.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RejectInventoryTransactionResponse> RejectInventoryTransactionEndpointAsync(string version, System.Guid id, RejectInventoryTransactionCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reject an inventory transaction
        /// </summary>
        /// <remarks>
        /// Rejects a previously approved inventory transaction, optionally recording the reason for rejection.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RejectInventoryTransactionResponse> RejectInventoryTransactionEndpointAsync(string version, System.Guid id, RejectInventoryTransactionCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update inventory transaction notes
        /// </summary>
        /// <remarks>
        /// Updates the notes field on an existing inventory transaction for additional documentation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateInventoryTransactionNotesResponse> UpdateInventoryTransactionNotesEndpointAsync(string version, System.Guid id, UpdateInventoryTransactionNotesCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update inventory transaction notes
        /// </summary>
        /// <remarks>
        /// Updates the notes field on an existing inventory transaction for additional documentation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateInventoryTransactionNotesResponse> UpdateInventoryTransactionNotesEndpointAsync(string version, System.Guid id, UpdateInventoryTransactionNotesCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an inventory transaction
        /// </summary>
        /// <remarks>
        /// Deletes an existing inventory transaction from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteInventoryTransactionResponse> DeleteInventoryTransactionEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an inventory transaction
        /// </summary>
        /// <remarks>
        /// Deletes an existing inventory transaction from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteInventoryTransactionResponse> DeleteInventoryTransactionEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get an inventory transaction by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory transaction by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InventoryTransactionResponse> GetInventoryTransactionEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an inventory transaction by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory transaction by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InventoryTransactionResponse> GetInventoryTransactionEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search inventory transactions
        /// </summary>
        /// <remarks>
        /// Searches for inventory transactions with pagination and filtering by transaction number, item, warehouse, type, date range, approval status, and cost range.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InventoryTransactionDtoPagedList> SearchInventoryTransactionsEndpointAsync(string version, SearchInventoryTransactionsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search inventory transactions
        /// </summary>
        /// <remarks>
        /// Searches for inventory transactions with pagination and filtering by transaction number, item, warehouse, type, date range, approval status, and cost range.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<InventoryTransactionDtoPagedList> SearchInventoryTransactionsEndpointAsync(string version, SearchInventoryTransactionsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new item
        /// </summary>
        /// <remarks>
        /// Creates a new inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateItemResponse> CreateItemEndpointAsync(string version, CreateItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new item
        /// </summary>
        /// <remarks>
        /// Creates a new inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateItemResponse> CreateItemEndpointAsync(string version, CreateItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing item
        /// </summary>
        /// <remarks>
        /// Updates an existing inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateItemResponse> UpdateItemEndpointAsync(string version, System.Guid id, UpdateItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing item
        /// </summary>
        /// <remarks>
        /// Updates an existing inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateItemResponse> UpdateItemEndpointAsync(string version, System.Guid id, UpdateItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an item
        /// </summary>
        /// <remarks>
        /// Deletes an inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DeleteItemEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an item
        /// </summary>
        /// <remarks>
        /// Deletes an inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> DeleteItemEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get item by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory item by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemResponse> GetItemEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get item by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory item by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemResponse> GetItemEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search items
        /// </summary>
        /// <remarks>
        /// Searches for inventory items with pagination and filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemResponsePagedList> SearchItemsEndpointAsync(string version, SearchItemsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search items
        /// </summary>
        /// <remarks>
        /// Searches for inventory items with pagination and filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemResponsePagedList> SearchItemsEndpointAsync(string version, SearchItemsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Import items from Excel file
        /// </summary>
        /// <remarks>
        /// Imports items from an Excel file with validation. Returns ImportResponse with successful/failed counts and detailed error messages.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImportResponse> ImportItemsEndpointAsync(string version, ImportItemsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import items from Excel file
        /// </summary>
        /// <remarks>
        /// Imports items from an Excel file with validation. Returns ImportResponse with successful/failed counts and detailed error messages.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ImportResponse> ImportItemsEndpointAsync(string version, ImportItemsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Export items to Excel file
        /// </summary>
        /// <remarks>
        /// Exports items to Excel format with optional filtering by category, supplier, price range, and other criteria. Returns an ExportResponse with file data.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportResponse> ExportItemsEndpointAsync(string version, ExportItemsQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export items to Excel file
        /// </summary>
        /// <remarks>
        /// Exports items to Excel format with optional filtering by category, supplier, price range, and other criteria. Returns an ExportResponse with file data.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportResponse> ExportItemsEndpointAsync(string version, ExportItemsQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Creates a new relationship between an item and a supplier with pricing and lead time details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateItemSupplierResponse> CreateItemSupplierEndpointAsync(string version, CreateItemSupplierCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Creates a new relationship between an item and a supplier with pricing and lead time details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateItemSupplierResponse> CreateItemSupplierEndpointAsync(string version, CreateItemSupplierCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Updates pricing, lead time, and other details for an existing item-supplier relationship
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateItemSupplierResponse> UpdateItemSupplierEndpointAsync(string version, System.Guid id, UpdateItemSupplierCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Updates pricing, lead time, and other details for an existing item-supplier relationship
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateItemSupplierResponse> UpdateItemSupplierEndpointAsync(string version, System.Guid id, UpdateItemSupplierCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Removes an item-supplier relationship from the system
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteItemSupplierEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Removes an item-supplier relationship from the system
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteItemSupplierEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get an item-supplier relationship by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific item-supplier relationship
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemSupplierResponse> GetItemSupplierEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an item-supplier relationship by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific item-supplier relationship
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemSupplierResponse> GetItemSupplierEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search item-supplier relationships
        /// </summary>
        /// <remarks>
        /// Search and filter item-supplier relationships with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemSupplierResponsePagedList> SearchItemSuppliersEndpointAsync(string version, SearchItemSuppliersCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search item-supplier relationships
        /// </summary>
        /// <remarks>
        /// Search and filter item-supplier relationships with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItemSupplierResponsePagedList> SearchItemSuppliersEndpointAsync(string version, SearchItemSuppliersCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new lot number
        /// </summary>
        /// <remarks>
        /// Creates a new lot/batch number for inventory traceability and expiration management
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateLotNumberResponse> CreateLotNumberEndpointAsync(string version, CreateLotNumberCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new lot number
        /// </summary>
        /// <remarks>
        /// Creates a new lot/batch number for inventory traceability and expiration management
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateLotNumberResponse> CreateLotNumberEndpointAsync(string version, CreateLotNumberCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a lot number
        /// </summary>
        /// <remarks>
        /// Updates lot status and quality notes
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateLotNumberResponse> UpdateLotNumberEndpointAsync(string version, System.Guid id, UpdateLotNumberCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a lot number
        /// </summary>
        /// <remarks>
        /// Updates lot status and quality notes
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateLotNumberResponse> UpdateLotNumberEndpointAsync(string version, System.Guid id, UpdateLotNumberCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a lot number
        /// </summary>
        /// <remarks>
        /// Removes a lot number from the system
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteLotNumberEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a lot number
        /// </summary>
        /// <remarks>
        /// Removes a lot number from the system
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteLotNumberEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a lot number by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific lot/batch number
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LotNumberResponse> GetLotNumberEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a lot number by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific lot/batch number
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LotNumberResponse> GetLotNumberEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search lot numbers
        /// </summary>
        /// <remarks>
        /// Search and filter lot numbers with expiration tracking and pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LotNumberResponsePagedList> SearchLotNumbersEndpointAsync(string version, SearchLotNumbersCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search lot numbers
        /// </summary>
        /// <remarks>
        /// Search and filter lot numbers with expiration tracking and pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LotNumberResponsePagedList> SearchLotNumbersEndpointAsync(string version, SearchLotNumbersCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new payee
        /// </summary>
        /// <remarks>
        /// Creates a new payee in the accounting system with comprehensive validation and returns the created payee ID.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeCreateResponse> PayeeCreateEndpointAsync(string version, PayeeCreateCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new payee
        /// </summary>
        /// <remarks>
        /// Creates a new payee in the accounting system with comprehensive validation and returns the created payee ID.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeCreateResponse> PayeeCreateEndpointAsync(string version, PayeeCreateCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing payee
        /// </summary>
        /// <remarks>
        /// Updates an existing payee in the accounting system with comprehensive validation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeUpdateResponse> PayeeUpdateEndpointAsync(string version, System.Guid id, PayeeUpdateCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing payee
        /// </summary>
        /// <remarks>
        /// Updates an existing payee in the accounting system with comprehensive validation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeUpdateResponse> PayeeUpdateEndpointAsync(string version, System.Guid id, PayeeUpdateCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a payee
        /// </summary>
        /// <remarks>
        /// Deletes a payee from the accounting system. Returns 204 No Content on successful deletion.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PayeeDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a payee
        /// </summary>
        /// <remarks>
        /// Deletes a payee from the accounting system. Returns 204 No Content on successful deletion.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PayeeDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a payee by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific payee from the accounting system using its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeResponse> PayeeGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a payee by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific payee from the accounting system using its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeResponse> PayeeGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search payees with pagination
        /// </summary>
        /// <remarks>
        /// Searches payees with comprehensive filtering capabilities including keyword search, payee code, name, expense account code, and TIN filters with pagination support.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeResponsePagedList> PayeeSearchEndpointAsync(string version, PayeeSearchCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search payees with pagination
        /// </summary>
        /// <remarks>
        /// Searches payees with comprehensive filtering capabilities including keyword search, payee code, name, expense account code, and TIN filters with pagination support.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PayeeResponsePagedList> PayeeSearchEndpointAsync(string version, PayeeSearchCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Import payees from Excel file
        /// </summary>
        /// <remarks>
        /// Imports payees from an Excel (.xlsx) file with validation, duplicate checking, and TIN validation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PayeeImportEndpointAsync(string version, ImportPayeesCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import payees from Excel file
        /// </summary>
        /// <remarks>
        /// Imports payees from an Excel (.xlsx) file with validation, duplicate checking, and TIN validation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PayeeImportEndpointAsync(string version, ImportPayeesCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Export payees to Excel file
        /// </summary>
        /// <remarks>
        /// Exports payees to Excel (.xlsx) file with optional filtering by expense account, search criteria, TIN presence, and active status
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PayeeExportEndpointAsync(string version, ExportPayeesQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export payees to Excel file
        /// </summary>
        /// <remarks>
        /// Exports payees to Excel (.xlsx) file with optional filtering by expense account, search criteria, TIN presence, and active status
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> PayeeExportEndpointAsync(string version, ExportPayeesQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a payment allocation by id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentAllocationResponse> PaymentAllocationGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a payment allocation by id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentAllocationResponse> PaymentAllocationGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a payment allocation
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PaymentAllocationDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a payment allocation
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PaymentAllocationDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Searches payment allocations
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentAllocationResponse>> PaymentAllocationSearchEndpointAsync(string version, SearchPaymentAllocationsQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches payment allocations
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentAllocationResponse>> PaymentAllocationSearchEndpointAsync(string version, SearchPaymentAllocationsQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Allocate a payment
        /// </summary>
        /// <remarks>
        /// Allocate a payment to invoices
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AllocatePaymentEndpointAsync(string version, AllocatePaymentCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allocate a payment
        /// </summary>
        /// <remarks>
        /// Allocate a payment to invoices
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AllocatePaymentEndpointAsync(string version, AllocatePaymentCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new pick list
        /// </summary>
        /// <remarks>
        /// Creates a new pick list for warehouse order fulfillment.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatePickListResponse> CreatePickListEndpointAsync(string version, CreatePickListCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new pick list
        /// </summary>
        /// <remarks>
        /// Creates a new pick list for warehouse order fulfillment.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatePickListResponse> CreatePickListEndpointAsync(string version, CreatePickListCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add item to pick list
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing pick list. The pick list must be in 'Created' status. Creates PickListItem as a separate aggregate.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddPickListItemResponse> AddPickListItemEndpointAsync(string version, System.Guid id, AddPickListItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add item to pick list
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing pick list. The pick list must be in 'Created' status. Creates PickListItem as a separate aggregate.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddPickListItemResponse> AddPickListItemEndpointAsync(string version, System.Guid id, AddPickListItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Assign pick list to picker
        /// </summary>
        /// <remarks>
        /// Assigns a pick list to a warehouse picker.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssignPickListResponse> AssignPickListEndpointAsync(string version, System.Guid id, AssignPickListCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign pick list to picker
        /// </summary>
        /// <remarks>
        /// Assigns a pick list to a warehouse picker.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssignPickListResponse> AssignPickListEndpointAsync(string version, System.Guid id, AssignPickListCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start picking
        /// </summary>
        /// <remarks>
        /// Marks a pick list as started and records the start time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StartPickingResponse> StartPickingEndpointAsync(string version, System.Guid id, StartPickingCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start picking
        /// </summary>
        /// <remarks>
        /// Marks a pick list as started and records the start time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StartPickingResponse> StartPickingEndpointAsync(string version, System.Guid id, StartPickingCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Complete picking
        /// </summary>
        /// <remarks>
        /// Marks a pick list as completed and records the completion time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompletePickingResponse> CompletePickingEndpointAsync(string version, System.Guid id, CompletePickingCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete picking
        /// </summary>
        /// <remarks>
        /// Marks a pick list as completed and records the completion time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompletePickingResponse> CompletePickingEndpointAsync(string version, System.Guid id, CompletePickingCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a pick list
        /// </summary>
        /// <remarks>
        /// Deletes an existing pick list.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeletePickListResponse> DeletePickListEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a pick list
        /// </summary>
        /// <remarks>
        /// Deletes an existing pick list.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeletePickListResponse> DeletePickListEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get pick list by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific pick list with all items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPickListResponse> GetPickListEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get pick list by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific pick list with all items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPickListResponse> GetPickListEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search pick lists
        /// </summary>
        /// <remarks>
        /// Searches pick lists with pagination and filtering options.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PickListResponsePagedList> SearchPickListsEndpointAsync(string version, SearchPickListsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search pick lists
        /// </summary>
        /// <remarks>
        /// Searches pick lists with pagination and filtering options.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PickListResponsePagedList> SearchPickListsEndpointAsync(string version, SearchPickListsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// creates a product
        /// </summary>
        /// <remarks>
        /// creates a product
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateProductResponse> CreateProductEndpointAsync(string version, CreateProductCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// creates a product
        /// </summary>
        /// <remarks>
        /// creates a product
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateProductResponse> CreateProductEndpointAsync(string version, CreateProductCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// gets product by id
        /// </summary>
        /// <remarks>
        /// gets prodct by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductResponse> GetProductEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// gets product by id
        /// </summary>
        /// <remarks>
        /// gets prodct by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductResponse> GetProductEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update a product
        /// </summary>
        /// <remarks>
        /// update a product
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateProductResponse> UpdateProductEndpointAsync(string version, System.Guid id, UpdateProductCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a product
        /// </summary>
        /// <remarks>
        /// update a product
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateProductResponse> UpdateProductEndpointAsync(string version, System.Guid id, UpdateProductCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// deletes product by id
        /// </summary>
        /// <remarks>
        /// deletes product by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProductEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// deletes product by id
        /// </summary>
        /// <remarks>
        /// deletes product by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProductEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a list of products
        /// </summary>
        /// <remarks>
        /// Gets a list of products with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductResponsePagedList> SearchProductsEndpointAsync(string version, SearchProductsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of products
        /// </summary>
        /// <remarks>
        /// Gets a list of products with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProductResponsePagedList> SearchProductsEndpointAsync(string version, SearchProductsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// create a project
        /// </summary>
        /// <remarks>
        /// create a project
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ProjectCreateEndpointAsync(string version, CreateProjectCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create a project
        /// </summary>
        /// <remarks>
        /// create a project
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ProjectCreateEndpointAsync(string version, CreateProjectCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update a project
        /// </summary>
        /// <remarks>
        /// update a project
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ProjectUpdateEndpointAsync(string version, System.Guid id, UpdateProjectCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a project
        /// </summary>
        /// <remarks>
        /// update a project
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ProjectUpdateEndpointAsync(string version, System.Guid id, UpdateProjectCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a project by id
        /// </summary>
        /// <remarks>
        /// Deletes a project by its unique identifier and returns the result.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteProjectResponse> ProjectDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a project by id
        /// </summary>
        /// <remarks>
        /// Deletes a project by its unique identifier and returns the result.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteProjectResponse> ProjectDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get a project by id
        /// </summary>
        /// <remarks>
        /// get a project by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectResponse> ProjectGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get a project by id
        /// </summary>
        /// <remarks>
        /// get a project by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectResponse> ProjectGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a list of projects
        /// </summary>
        /// <remarks>
        /// Gets a list of projects with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectResponsePagedList> ProjectSearchEndpointAsync(string version, SearchProjectsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of projects
        /// </summary>
        /// <remarks>
        /// Gets a list of projects with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectResponsePagedList> ProjectSearchEndpointAsync(string version, SearchProjectsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// create project costing entry
        /// </summary>
        /// <remarks>
        /// Creates a new project costing entry for tracking project expenses
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ProjectCostingCreateEndpointAsync(string version, CreateProjectCostingCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create project costing entry
        /// </summary>
        /// <remarks>
        /// Creates a new project costing entry for tracking project expenses
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> ProjectCostingCreateEndpointAsync(string version, CreateProjectCostingCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update project costing entry
        /// </summary>
        /// <remarks>
        /// Updates an existing project costing entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProjectCostingUpdateEndpointAsync(string version, System.Guid id, UpdateProjectCostingCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update project costing entry
        /// </summary>
        /// <remarks>
        /// Updates an existing project costing entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProjectCostingUpdateEndpointAsync(string version, System.Guid id, UpdateProjectCostingCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// delete project costing entry
        /// </summary>
        /// <remarks>
        /// Deletes a project costing entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProjectCostingDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete project costing entry
        /// </summary>
        /// <remarks>
        /// Deletes a project costing entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProjectCostingDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get project costing entry
        /// </summary>
        /// <remarks>
        /// Gets a single project costing entry by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectCostingResponse> ProjectCostingGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get project costing entry
        /// </summary>
        /// <remarks>
        /// Gets a single project costing entry by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectCostingResponse> ProjectCostingGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// search project costing entries
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of project costing entries with filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectCostingResponsePagedList> ProjectCostingSearchEndpointAsync(string version, SearchProjectCostingsQuery body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// search project costing entries
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of project costing entries with filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectCostingResponsePagedList> ProjectCostingSearchEndpointAsync(string version, SearchProjectCostingsQuery body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new purchase order
        /// </summary>
        /// <remarks>
        /// Creates a new purchase order
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatePurchaseOrderResponse> CreatePurchaseOrderEndpointAsync(string version, CreatePurchaseOrderCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new purchase order
        /// </summary>
        /// <remarks>
        /// Creates a new purchase order
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatePurchaseOrderResponse> CreatePurchaseOrderEndpointAsync(string version, CreatePurchaseOrderCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a purchase order
        /// </summary>
        /// <remarks>
        /// Updates an existing purchase order
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdatePurchaseOrderResponse> UpdatePurchaseOrderEndpointAsync(string version, System.Guid id, UpdatePurchaseOrderCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a purchase order
        /// </summary>
        /// <remarks>
        /// Updates an existing purchase order
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdatePurchaseOrderResponse> UpdatePurchaseOrderEndpointAsync(string version, System.Guid id, UpdatePurchaseOrderCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a purchase order
        /// </summary>
        /// <remarks>
        /// Deletes a purchase order by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePurchaseOrderEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a purchase order
        /// </summary>
        /// <remarks>
        /// Deletes a purchase order by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePurchaseOrderEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a purchase order
        /// </summary>
        /// <remarks>
        /// Retrieves a purchase order by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PurchaseOrderResponse> GetPurchaseOrderEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a purchase order
        /// </summary>
        /// <remarks>
        /// Retrieves a purchase order by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PurchaseOrderResponse> GetPurchaseOrderEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search purchase orders
        /// </summary>
        /// <remarks>
        /// Search and filter purchase orders with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PurchaseOrderResponsePagedList> SearchPurchaseOrdersEndpointAsync(string version, SearchPurchaseOrdersCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search purchase orders
        /// </summary>
        /// <remarks>
        /// Search and filter purchase orders with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PurchaseOrderResponsePagedList> SearchPurchaseOrdersEndpointAsync(string version, SearchPurchaseOrdersCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add an item to a purchase order
        /// </summary>
        /// <remarks>
        /// Adds a grocery item line to an existing purchase order. If the item already exists the aggregate will increase the quantity.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddPurchaseOrderItemResponse> AddPurchaseOrderItemEndpointAsync(string version, System.Guid id, AddPurchaseOrderItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an item to a purchase order
        /// </summary>
        /// <remarks>
        /// Adds a grocery item line to an existing purchase order. If the item already exists the aggregate will increase the quantity.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddPurchaseOrderItemResponse> AddPurchaseOrderItemEndpointAsync(string version, System.Guid id, AddPurchaseOrderItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all items for a purchase order
        /// </summary>
        /// <remarks>
        /// Retrieves all line items associated with a purchase order, including grocery item details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PurchaseOrderItemResponse>> GetPurchaseOrderItemsEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all items for a purchase order
        /// </summary>
        /// <remarks>
        /// Retrieves all line items associated with a purchase order, including grocery item details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PurchaseOrderItemResponse>> GetPurchaseOrderItemsEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove an item from a purchase order
        /// </summary>
        /// <remarks>
        /// Removes an item line from a purchase order. Only allowed for modifiable orders.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemovePurchaseOrderItemEndpointAsync(string version, System.Guid id, System.Guid itemId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an item from a purchase order
        /// </summary>
        /// <remarks>
        /// Removes an item line from a purchase order. Only allowed for modifiable orders.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemovePurchaseOrderItemEndpointAsync(string version, System.Guid id, System.Guid itemId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update item quantity
        /// </summary>
        /// <remarks>
        /// Updates the ordered quantity for a specific purchase order line item. Quantity cannot be less than already received quantity.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePurchaseOrderItemQuantityEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdatePurchaseOrderItemQuantityCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update item quantity
        /// </summary>
        /// <remarks>
        /// Updates the ordered quantity for a specific purchase order line item. Quantity cannot be less than already received quantity.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePurchaseOrderItemQuantityEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdatePurchaseOrderItemQuantityCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update item price and discount
        /// </summary>
        /// <remarks>
        /// Updates the unit price and optional discount on a specific purchase order line item.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePurchaseOrderItemPriceEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdatePurchaseOrderItemPriceCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update item price and discount
        /// </summary>
        /// <remarks>
        /// Updates the unit price and optional discount on a specific purchase order line item.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdatePurchaseOrderItemPriceEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdatePurchaseOrderItemPriceCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Submit a purchase order for approval
        /// </summary>
        /// <remarks>
        /// Submits a draft purchase order for approval, changing status from Draft to Submitted
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmitPurchaseOrderResponse> SubmitPurchaseOrderEndpointAsync(string version, System.Guid id, SubmitPurchaseOrderCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Submit a purchase order for approval
        /// </summary>
        /// <remarks>
        /// Submits a draft purchase order for approval, changing status from Draft to Submitted
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SubmitPurchaseOrderResponse> SubmitPurchaseOrderEndpointAsync(string version, System.Guid id, SubmitPurchaseOrderCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve a submitted purchase order
        /// </summary>
        /// <remarks>
        /// Approves a submitted purchase order, changing status from Submitted to Approved
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApprovePurchaseOrderResponse> ApprovePurchaseOrderEndpointAsync(string version, System.Guid id, ApprovePurchaseOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a submitted purchase order
        /// </summary>
        /// <remarks>
        /// Approves a submitted purchase order, changing status from Submitted to Approved
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApprovePurchaseOrderResponse> ApprovePurchaseOrderEndpointAsync(string version, System.Guid id, ApprovePurchaseOrderRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Send an approved purchase order to supplier
        /// </summary>
        /// <remarks>
        /// Sends an approved purchase order to the supplier, changing status from Approved to Sent
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SendPurchaseOrderResponse> SendPurchaseOrderEndpointAsync(string version, System.Guid id, SendPurchaseOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an approved purchase order to supplier
        /// </summary>
        /// <remarks>
        /// Sends an approved purchase order to the supplier, changing status from Approved to Sent
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SendPurchaseOrderResponse> SendPurchaseOrderEndpointAsync(string version, System.Guid id, SendPurchaseOrderRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Receive a purchase order delivery
        /// </summary>
        /// <remarks>
        /// Marks a sent purchase order as received and records the actual delivery date
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReceivePurchaseOrderResponse> ReceivePurchaseOrderEndpointAsync(string version, System.Guid id, ReceivePurchaseOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receive a purchase order delivery
        /// </summary>
        /// <remarks>
        /// Marks a sent purchase order as received and records the actual delivery date
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReceivePurchaseOrderResponse> ReceivePurchaseOrderEndpointAsync(string version, System.Guid id, ReceivePurchaseOrderRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Record received quantity for an item
        /// </summary>
        /// <remarks>
        /// Sets the received quantity for a purchase order line item (can be partial or complete).
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReceivePurchaseOrderItemQuantityEndpointAsync(string version, System.Guid id, System.Guid itemId, ReceivePurchaseOrderItemQuantityCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Record received quantity for an item
        /// </summary>
        /// <remarks>
        /// Sets the received quantity for a purchase order line item (can be partial or complete).
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReceivePurchaseOrderItemQuantityEndpointAsync(string version, System.Guid id, System.Guid itemId, ReceivePurchaseOrderItemQuantityCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel a purchase order
        /// </summary>
        /// <remarks>
        /// Cancels a purchase order that hasn't been received yet
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelPurchaseOrderResponse> CancelPurchaseOrderEndpointAsync(string version, System.Guid id, CancelPurchaseOrderRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a purchase order
        /// </summary>
        /// <remarks>
        /// Cancels a purchase order that hasn't been received yet
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CancelPurchaseOrderResponse> CancelPurchaseOrderEndpointAsync(string version, System.Guid id, CancelPurchaseOrderRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Generate PDF report for a purchase order
        /// </summary>
        /// <remarks>
        /// Generates a professional PDF report for the specified purchase order including all items and approval information.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GeneratePurchaseOrderPdfEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate PDF report for a purchase order
        /// </summary>
        /// <remarks>
        /// Generates a professional PDF report for the specified purchase order including all items and approval information.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GeneratePurchaseOrderPdfEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new put-away task
        /// </summary>
        /// <remarks>
        /// Creates a new put-away task for warehouse operations.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatePutAwayTaskResponse> CreatePutAwayTaskEndpointAsync(string version, CreatePutAwayTaskCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new put-away task
        /// </summary>
        /// <remarks>
        /// Creates a new put-away task for warehouse operations.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatePutAwayTaskResponse> CreatePutAwayTaskEndpointAsync(string version, CreatePutAwayTaskCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add an item to a put-away task
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing put-away task for warehouse operations.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddPutAwayTaskItemResponse> AddPutAwayTaskItemEndpointAsync(string version, System.Guid id, AddPutAwayTaskItemCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an item to a put-away task
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing put-away task for warehouse operations.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddPutAwayTaskItemResponse> AddPutAwayTaskItemEndpointAsync(string version, System.Guid id, AddPutAwayTaskItemCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Assign a put-away task to a worker
        /// </summary>
        /// <remarks>
        /// Assigns a put-away task to a warehouse worker for execution.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssignPutAwayTaskResponse> AssignPutAwayTaskEndpointAsync(string version, System.Guid id, AssignPutAwayTaskCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign a put-away task to a worker
        /// </summary>
        /// <remarks>
        /// Assigns a put-away task to a warehouse worker for execution.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AssignPutAwayTaskResponse> AssignPutAwayTaskEndpointAsync(string version, System.Guid id, AssignPutAwayTaskCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Start a put-away task
        /// </summary>
        /// <remarks>
        /// Marks a put-away task as started and records the start time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StartPutAwayResponse> StartPutAwayEndpointAsync(string version, System.Guid id, StartPutAwayCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a put-away task
        /// </summary>
        /// <remarks>
        /// Marks a put-away task as started and records the start time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StartPutAwayResponse> StartPutAwayEndpointAsync(string version, System.Guid id, StartPutAwayCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Complete a put-away task
        /// </summary>
        /// <remarks>
        /// Marks a put-away task as completed and records the completion time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompletePutAwayResponse> CompletePutAwayEndpointAsync(string version, System.Guid id, CompletePutAwayCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete a put-away task
        /// </summary>
        /// <remarks>
        /// Marks a put-away task as completed and records the completion time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CompletePutAwayResponse> CompletePutAwayEndpointAsync(string version, System.Guid id, CompletePutAwayCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a put-away task
        /// </summary>
        /// <remarks>
        /// Deletes a put-away task and all associated items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeletePutAwayTaskResponse> DeletePutAwayTaskEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a put-away task
        /// </summary>
        /// <remarks>
        /// Deletes a put-away task and all associated items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeletePutAwayTaskResponse> DeletePutAwayTaskEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a put-away task by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific put-away task with all items and details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPutAwayTaskResponse> GetPutAwayTaskEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a put-away task by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific put-away task with all items and details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPutAwayTaskResponse> GetPutAwayTaskEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search put-away tasks
        /// </summary>
        /// <remarks>
        /// Searches put-away tasks with filtering, sorting, and pagination.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PutAwayTaskResponsePagedList> SearchPutAwayTasksEndpointAsync(string version, SearchPutAwayTasksCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search put-away tasks
        /// </summary>
        /// <remarks>
        /// Searches put-away tasks with filtering, sorting, and pagination.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PutAwayTaskResponsePagedList> SearchPutAwayTasksEndpointAsync(string version, SearchPutAwayTasksCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Create a new recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> RecurringJournalEntryCreateEndpointAsync(string version, CreateRecurringJournalEntryCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Create a new recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> RecurringJournalEntryCreateEndpointAsync(string version, CreateRecurringJournalEntryCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Get a recurring journal entry template by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecurringJournalEntryResponse> RecurringJournalEntryGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Get a recurring journal entry template by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecurringJournalEntryResponse> RecurringJournalEntryGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Delete a recurring journal entry template by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RecurringJournalEntryDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Delete a recurring journal entry template by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RecurringJournalEntryDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search recurring journal entry templates
        /// </summary>
        /// <remarks>
        /// Search and filter recurring journal entry templates with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecurringJournalEntryResponsePagedList> RecurringJournalEntrySearchEndpointAsync(string version, SearchRecurringJournalEntriesCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search recurring journal entry templates
        /// </summary>
        /// <remarks>
        /// Search and filter recurring journal entry templates with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RecurringJournalEntryResponsePagedList> RecurringJournalEntrySearchEndpointAsync(string version, SearchRecurringJournalEntriesCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Approve a recurring journal entry template for use
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RecurringJournalEntryApproveEndpointAsync(string version, System.Guid id, ApproveRecurringJournalEntryCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Approve a recurring journal entry template for use
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RecurringJournalEntryApproveEndpointAsync(string version, System.Guid id, ApproveRecurringJournalEntryCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Suspend a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Temporarily suspend a recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RecurringJournalEntrySuspendEndpointAsync(string version, System.Guid id, SuspendRecurringJournalEntryCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Suspend a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Temporarily suspend a recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RecurringJournalEntrySuspendEndpointAsync(string version, System.Guid id, SuspendRecurringJournalEntryCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reactivate a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Reactivate a suspended recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RecurringJournalEntryReactivateEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reactivate a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Reactivate a suspended recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RecurringJournalEntryReactivateEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get role details by ID
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a role by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleDto> GetRoleByIdEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get role details by ID
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a role by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleDto> GetRoleByIdEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a role by ID
        /// </summary>
        /// <remarks>
        /// Remove a role from the system by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRoleEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a role by ID
        /// </summary>
        /// <remarks>
        /// Remove a role from the system by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRoleEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a list of all roles
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all roles available in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleDto>> GetRolesEndpointAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all roles
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all roles available in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleDto>> GetRolesEndpointAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create or update a role
        /// </summary>
        /// <remarks>
        /// Create a new role or update an existing role.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleDto> CreateOrUpdateRoleEndpointAsync(CreateOrUpdateRoleCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update a role
        /// </summary>
        /// <remarks>
        /// Create a new role or update an existing role.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleDto> CreateOrUpdateRoleEndpointAsync(CreateOrUpdateRoleCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get role permissions
        /// </summary>
        /// <remarks>
        /// get role permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleDto> GetRolePermissionsEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get role permissions
        /// </summary>
        /// <remarks>
        /// get role permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleDto> GetRolePermissionsEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update role permissions
        /// </summary>
        /// <remarks>
        /// update role permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateRolePermissionsEndpointAsync(string id, UpdatePermissionsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update role permissions
        /// </summary>
        /// <remarks>
        /// update role permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateRolePermissionsEndpointAsync(string id, UpdatePermissionsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new serial number
        /// </summary>
        /// <remarks>
        /// Creates a new serial number for unit-level tracking of inventory items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateSerialNumberResponse> CreateSerialNumberEndpointAsync(string version, CreateSerialNumberCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new serial number
        /// </summary>
        /// <remarks>
        /// Creates a new serial number for unit-level tracking of inventory items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateSerialNumberResponse> CreateSerialNumberEndpointAsync(string version, CreateSerialNumberCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a serial number
        /// </summary>
        /// <remarks>
        /// Updates an existing serial number's status, location, or other properties.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateSerialNumberResponse> UpdateSerialNumberEndpointAsync(string version, System.Guid id, UpdateSerialNumberCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a serial number
        /// </summary>
        /// <remarks>
        /// Updates an existing serial number's status, location, or other properties.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateSerialNumberResponse> UpdateSerialNumberEndpointAsync(string version, System.Guid id, UpdateSerialNumberCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a serial number
        /// </summary>
        /// <remarks>
        /// Deletes an existing serial number from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteSerialNumberResponse> DeleteSerialNumberEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a serial number
        /// </summary>
        /// <remarks>
        /// Deletes an existing serial number from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeleteSerialNumberResponse> DeleteSerialNumberEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a serial number by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific serial number by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SerialNumberResponse> GetSerialNumberEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a serial number by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific serial number by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SerialNumberResponse> GetSerialNumberEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search serial numbers
        /// </summary>
        /// <remarks>
        /// Searches for serial numbers with pagination and filtering by serial value, item, warehouse, status, receipt date, warranty status, and external reference.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SerialNumberResponsePagedList> SearchSerialNumbersEndpointAsync(string version, SearchSerialNumbersCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search serial numbers
        /// </summary>
        /// <remarks>
        /// Searches for serial numbers with pagination and filtering by serial value, item, warehouse, status, receipt date, warranty status, and external reference.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SerialNumberResponsePagedList> SearchSerialNumbersEndpointAsync(string version, SearchSerialNumbersCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new stock adjustment
        /// </summary>
        /// <remarks>
        /// Creates a stock adjustment for inventory
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateStockAdjustmentResponse> CreateStockAdjustmentEndpointAsync(string version, CreateStockAdjustmentCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new stock adjustment
        /// </summary>
        /// <remarks>
        /// Creates a stock adjustment for inventory
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateStockAdjustmentResponse> CreateStockAdjustmentEndpointAsync(string version, CreateStockAdjustmentCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a stock adjustment
        /// </summary>
        /// <remarks>
        /// Updates an existing stock adjustment
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateStockAdjustmentResponse> UpdateStockAdjustmentEndpointAsync(string version, System.Guid id, UpdateStockAdjustmentCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a stock adjustment
        /// </summary>
        /// <remarks>
        /// Updates an existing stock adjustment
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateStockAdjustmentResponse> UpdateStockAdjustmentEndpointAsync(string version, System.Guid id, UpdateStockAdjustmentCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a stock adjustment
        /// </summary>
        /// <remarks>
        /// Deletes a stock adjustment by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStockAdjustmentEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a stock adjustment
        /// </summary>
        /// <remarks>
        /// Deletes a stock adjustment by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStockAdjustmentEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get stock adjustment by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a stock adjustment by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockAdjustmentResponse> GetStockAdjustmentEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get stock adjustment by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a stock adjustment by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockAdjustmentResponse> GetStockAdjustmentEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search stock adjustments
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of stock adjustments with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockAdjustmentResponsePagedList> SearchStockAdjustmentsEndpointAsync(string version, SearchStockAdjustmentsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search stock adjustments
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of stock adjustments with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockAdjustmentResponsePagedList> SearchStockAdjustmentsEndpointAsync(string version, SearchStockAdjustmentsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Approve stock adjustment
        /// </summary>
        /// <remarks>
        /// Approves a stock adjustment and applies changes to inventory
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApproveStockAdjustmentResponse> ApproveStockAdjustmentEndpointAsync(string version, System.Guid id, ApproveStockAdjustmentCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve stock adjustment
        /// </summary>
        /// <remarks>
        /// Approves a stock adjustment and applies changes to inventory
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApproveStockAdjustmentResponse> ApproveStockAdjustmentEndpointAsync(string version, System.Guid id, ApproveStockAdjustmentCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new stock level record
        /// </summary>
        /// <remarks>
        /// Creates a new stock level tracking record for an item at a specific warehouse/location/bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateStockLevelResponse> CreateStockLevelEndpointAsync(string version, CreateStockLevelCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new stock level record
        /// </summary>
        /// <remarks>
        /// Creates a new stock level tracking record for an item at a specific warehouse/location/bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateStockLevelResponse> CreateStockLevelEndpointAsync(string version, CreateStockLevelCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a stock level record
        /// </summary>
        /// <remarks>
        /// Updates location/bin/lot/serial assignments for a stock level record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateStockLevelResponse> UpdateStockLevelEndpointAsync(string version, System.Guid id, UpdateStockLevelCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a stock level record
        /// </summary>
        /// <remarks>
        /// Updates location/bin/lot/serial assignments for a stock level record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateStockLevelResponse> UpdateStockLevelEndpointAsync(string version, System.Guid id, UpdateStockLevelCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a stock level record
        /// </summary>
        /// <remarks>
        /// Removes a stock level record (only allowed when quantity is zero)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStockLevelEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a stock level record
        /// </summary>
        /// <remarks>
        /// Removes a stock level record (only allowed when quantity is zero)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteStockLevelEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a stock level by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific stock level record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockLevelResponse> GetStockLevelEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a stock level by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific stock level record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockLevelResponse> GetStockLevelEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search stock levels
        /// </summary>
        /// <remarks>
        /// Search and filter stock levels with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockLevelResponsePagedList> SearchStockLevelsEndpointAsync(string version, SearchStockLevelsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search stock levels
        /// </summary>
        /// <remarks>
        /// Search and filter stock levels with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StockLevelResponsePagedList> SearchStockLevelsEndpointAsync(string version, SearchStockLevelsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reserve stock quantity
        /// </summary>
        /// <remarks>
        /// Reserves quantity from available stock for orders or transfers (soft allocation)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReserveStockResponse> ReserveStockEndpointAsync(string version, System.Guid id, ReserveStockCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reserve stock quantity
        /// </summary>
        /// <remarks>
        /// Reserves quantity from available stock for orders or transfers (soft allocation)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReserveStockResponse> ReserveStockEndpointAsync(string version, System.Guid id, ReserveStockCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Allocate reserved stock
        /// </summary>
        /// <remarks>
        /// Allocates reserved quantity to pick lists (hard allocation)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AllocateStockResponse> AllocateStockEndpointAsync(string version, System.Guid id, AllocateStockCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allocate reserved stock
        /// </summary>
        /// <remarks>
        /// Allocates reserved quantity to pick lists (hard allocation)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AllocateStockResponse> AllocateStockEndpointAsync(string version, System.Guid id, AllocateStockCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Release reserved stock
        /// </summary>
        /// <remarks>
        /// Releases reserved quantity back to available (e.g., when order is cancelled)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReleaseStockResponse> ReleaseStockEndpointAsync(string version, System.Guid id, ReleaseStockCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Release reserved stock
        /// </summary>
        /// <remarks>
        /// Releases reserved quantity back to available (e.g., when order is cancelled)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ReleaseStockResponse> ReleaseStockEndpointAsync(string version, System.Guid id, ReleaseStockCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new supplier
        /// </summary>
        /// <remarks>
        /// Creates a new supplier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateSupplierResponse> CreateSupplierEndpointAsync(string version, CreateSupplierCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new supplier
        /// </summary>
        /// <remarks>
        /// Creates a new supplier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateSupplierResponse> CreateSupplierEndpointAsync(string version, CreateSupplierCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update a supplier
        /// </summary>
        /// <remarks>
        /// Updates an existing supplier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateSupplierResponse> UpdateSupplierEndpointAsync(string version, System.Guid id, UpdateSupplierCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a supplier
        /// </summary>
        /// <remarks>
        /// Updates an existing supplier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateSupplierResponse> UpdateSupplierEndpointAsync(string version, System.Guid id, UpdateSupplierCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a supplier
        /// </summary>
        /// <remarks>
        /// Deletes a supplier by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSupplierEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a supplier
        /// </summary>
        /// <remarks>
        /// Deletes a supplier by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSupplierEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a supplier
        /// </summary>
        /// <remarks>
        /// Retrieves a supplier by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupplierResponse> GetSupplierEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a supplier
        /// </summary>
        /// <remarks>
        /// Retrieves a supplier by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupplierResponse> GetSupplierEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search Suppliers
        /// </summary>
        /// <remarks>
        /// Searches Suppliers with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupplierResponsePagedList> SearchSuppliersEndpointAsync(string version, SearchSuppliersCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search Suppliers
        /// </summary>
        /// <remarks>
        /// Searches Suppliers with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupplierResponsePagedList> SearchSuppliersEndpointAsync(string version, SearchSuppliersCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Activate a supplier
        /// </summary>
        /// <remarks>
        /// Activates a supplier to allow transactions
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivateSupplierResponse> ActivateSupplierEndpointAsync(string version, System.Guid id, ActivateSupplierCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activate a supplier
        /// </summary>
        /// <remarks>
        /// Activates a supplier to allow transactions
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivateSupplierResponse> ActivateSupplierEndpointAsync(string version, System.Guid id, ActivateSupplierCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deactivate a supplier
        /// </summary>
        /// <remarks>
        /// Deactivates a supplier to block transactions
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeactivateSupplierResponse> DeactivateSupplierEndpointAsync(string version, System.Guid id, DeactivateSupplierCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deactivate a supplier
        /// </summary>
        /// <remarks>
        /// Deactivates a supplier to block transactions
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DeactivateSupplierResponse> DeactivateSupplierEndpointAsync(string version, System.Guid id, DeactivateSupplierCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a tax code
        /// </summary>
        /// <remarks>
        /// Create a new tax code with rate and jurisdiction
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> TaxCodeCreateEndpointAsync(string version, CreateTaxCodeCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a tax code
        /// </summary>
        /// <remarks>
        /// Create a new tax code with rate and jurisdiction
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Guid> TaxCodeCreateEndpointAsync(string version, CreateTaxCodeCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get a tax code
        /// </summary>
        /// <remarks>
        /// Get a tax code by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaxCodeResponse> TaxCodeGetEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a tax code
        /// </summary>
        /// <remarks>
        /// Get a tax code by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaxCodeResponse> TaxCodeGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a tax code
        /// </summary>
        /// <remarks>
        /// Delete a tax code by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TaxCodeDeleteEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a tax code
        /// </summary>
        /// <remarks>
        /// Delete a tax code by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TaxCodeDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search tax codes
        /// </summary>
        /// <remarks>
        /// Search and filter tax codes with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaxCodeResponsePagedList> TaxCodeSearchEndpointAsync(string version, SearchTaxCodesCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search tax codes
        /// </summary>
        /// <remarks>
        /// Search and filter tax codes with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaxCodeResponsePagedList> TaxCodeSearchEndpointAsync(string version, SearchTaxCodesCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// creates a tenant
        /// </summary>
        /// <remarks>
        /// creates a tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateTenantResponse> CreateTenantEndpointAsync(CreateTenantCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// creates a tenant
        /// </summary>
        /// <remarks>
        /// creates a tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateTenantResponse> CreateTenantEndpointAsync(CreateTenantCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get tenants
        /// </summary>
        /// <remarks>
        /// get tenants
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TenantDetail>> GetTenantsEndpointAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get tenants
        /// </summary>
        /// <remarks>
        /// get tenants
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TenantDetail>> GetTenantsEndpointAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get tenant by id
        /// </summary>
        /// <remarks>
        /// get tenant by id
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TenantDetail> GetTenantByIdEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get tenant by id
        /// </summary>
        /// <remarks>
        /// get tenant by id
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TenantDetail> GetTenantByIdEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// upgrade tenant subscription
        /// </summary>
        /// <remarks>
        /// upgrade tenant subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpgradeSubscriptionResponse> UpgradeSubscriptionEndpointAsync(UpgradeSubscriptionCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// upgrade tenant subscription
        /// </summary>
        /// <remarks>
        /// upgrade tenant subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpgradeSubscriptionResponse> UpgradeSubscriptionEndpointAsync(UpgradeSubscriptionCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// activate tenant
        /// </summary>
        /// <remarks>
        /// activate tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivateTenantResponse> ActivateTenantEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// activate tenant
        /// </summary>
        /// <remarks>
        /// activate tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ActivateTenantResponse> ActivateTenantEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// activate tenant
        /// </summary>
        /// <remarks>
        /// activate tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisableTenantResponse> DisableTenantEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// activate tenant
        /// </summary>
        /// <remarks>
        /// activate tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DisableTenantResponse> DisableTenantEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a todo item
        /// </summary>
        /// <remarks>
        /// Creates a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateTodoResponse> CreateTodoEndpointAsync(string version, CreateTodoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a todo item
        /// </summary>
        /// <remarks>
        /// Creates a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateTodoResponse> CreateTodoEndpointAsync(string version, CreateTodoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// gets todo item by id
        /// </summary>
        /// <remarks>
        /// gets todo item by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTodoResponse> GetTodoEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// gets todo item by id
        /// </summary>
        /// <remarks>
        /// gets todo item by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetTodoResponse> GetTodoEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Updates a todo item
        /// </summary>
        /// <remarks>
        /// Updated a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateTodoResponse> UpdateTodoEndpointAsync(string version, System.Guid id, UpdateTodoCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a todo item
        /// </summary>
        /// <remarks>
        /// Updated a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateTodoResponse> UpdateTodoEndpointAsync(string version, System.Guid id, UpdateTodoCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Deletes a todo item
        /// </summary>
        /// <remarks>
        /// Deleted a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTodoEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a todo item
        /// </summary>
        /// <remarks>
        /// Deleted a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTodoEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets a list of todo items with paging support
        /// </summary>
        /// <remarks>
        /// Gets a list of todo items with paging support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TodoDtoPagedList> GetTodoListEndpointAsync(string version, PaginationFilter body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of todo items with paging support
        /// </summary>
        /// <remarks>
        /// Gets a list of todo items with paging support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TodoDtoPagedList> GetTodoListEndpointAsync(string version, PaginationFilter body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// refresh JWTs
        /// </summary>
        /// <remarks>
        /// refresh JWTs
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenResponse> RefreshTokenEndpointAsync(string tenant, string? deviceType, RefreshTokenCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// refresh JWTs
        /// </summary>
        /// <remarks>
        /// refresh JWTs
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenResponse> RefreshTokenEndpointAsync(string tenant, string? deviceType, RefreshTokenCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// generate JWTs
        /// </summary>
        /// <remarks>
        /// generate JWTs
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenResponse> TokenGenerationEndpointAsync(string tenant, string? deviceType, TokenGenerationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// generate JWTs
        /// </summary>
        /// <remarks>
        /// generate JWTs
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenResponse> TokenGenerationEndpointAsync(string tenant, string? deviceType, TokenGenerationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// register user
        /// </summary>
        /// <remarks>
        /// register user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RegisterUserResponse> RegisterUserEndpointAsync(RegisterUserCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// register user
        /// </summary>
        /// <remarks>
        /// register user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RegisterUserResponse> RegisterUserEndpointAsync(RegisterUserCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// self register user
        /// </summary>
        /// <remarks>
        /// self register user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RegisterUserResponse> SelfRegisterUserEndpointAsync(string tenant, RegisterUserCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// self register user
        /// </summary>
        /// <remarks>
        /// self register user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RegisterUserResponse> SelfRegisterUserEndpointAsync(string tenant, RegisterUserCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// update user profile
        /// </summary>
        /// <remarks>
        /// update user profile
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateUserEndpointAsync(UpdateUserCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update user profile
        /// </summary>
        /// <remarks>
        /// update user profile
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateUserEndpointAsync(UpdateUserCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get current user information based on token
        /// </summary>
        /// <remarks>
        /// Get current user information based on token
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDetail> GetUserProfileEndpointAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get current user information based on token
        /// </summary>
        /// <remarks>
        /// Get current user information based on token
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDetail> GetUserProfileEndpointAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get users list
        /// </summary>
        /// <remarks>
        /// get users list
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDetail>> GetUsersListEndpointAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get users list
        /// </summary>
        /// <remarks>
        /// get users list
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDetail>> GetUsersListEndpointAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// delete user profile
        /// </summary>
        /// <remarks>
        /// delete user profile
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete user profile
        /// </summary>
        /// <remarks>
        /// delete user profile
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get user profile by ID
        /// </summary>
        /// <remarks>
        /// Get another user's profile details by user ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDetail> GetUserEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user profile by ID
        /// </summary>
        /// <remarks>
        /// Get another user's profile details by user ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserDetail> GetUserEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Forgot password
        /// </summary>
        /// <remarks>
        /// Generates a password reset token and sends it via email.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForgotPasswordEndpointAsync(string tenant, ForgotPasswordCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forgot password
        /// </summary>
        /// <remarks>
        /// Generates a password reset token and sends it via email.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ForgotPasswordEndpointAsync(string tenant, ForgotPasswordCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Changes password
        /// </summary>
        /// <remarks>
        /// Change password
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordEndpointAsync(ChangePasswordCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Changes password
        /// </summary>
        /// <remarks>
        /// Change password
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChangePasswordEndpointAsync(ChangePasswordCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Resets the password using the token and new password provided.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetPasswordEndpointAsync(string tenant, ResetPasswordCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Resets the password using the token and new password provided.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetPasswordEndpointAsync(string tenant, ResetPasswordCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get current user permissions
        /// </summary>
        /// <remarks>
        /// Get current user permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetUserPermissionsEndpointAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get current user permissions
        /// </summary>
        /// <remarks>
        /// Get current user permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetUserPermissionsEndpointAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Toggle a user's active status
        /// </summary>
        /// <remarks>
        /// Toggle a user's active status
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ToggleUserStatusEndpointAsync(string id, ToggleUserStatusCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Toggle a user's active status
        /// </summary>
        /// <remarks>
        /// Toggle a user's active status
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ToggleUserStatusEndpointAsync(string id, ToggleUserStatusCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// assign roles
        /// </summary>
        /// <remarks>
        /// assign roles
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AssignRolesToUserEndpointAsync(string id, AssignUserRoleCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// assign roles
        /// </summary>
        /// <remarks>
        /// assign roles
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AssignRolesToUserEndpointAsync(string id, AssignUserRoleCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get user roles
        /// </summary>
        /// <remarks>
        /// get user roles
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRoleDetail>> GetUserRolesEndpointAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get user roles
        /// </summary>
        /// <remarks>
        /// get user roles
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRoleDetail>> GetUserRolesEndpointAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get user's audit trail details
        /// </summary>
        /// <remarks>
        /// Get user's audit trail details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuditTrail>> GetUserAuditTrailEndpointAsync(System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user's audit trail details
        /// </summary>
        /// <remarks>
        /// Get user's audit trail details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuditTrail>> GetUserAuditTrailEndpointAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// confirm user email
        /// </summary>
        /// <remarks>
        /// confirm user email
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ConfirmEmailEndpointAsync(string userId, string code, string tenant);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// confirm user email
        /// </summary>
        /// <remarks>
        /// confirm user email
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ConfirmEmailEndpointAsync(string userId, string code, string tenant, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new warehouse location
        /// </summary>
        /// <remarks>
        /// Creates a new warehouse location for storing items
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateWarehouseLocationResponse> CreateWarehouseLocationEndpointAsync(string version, CreateWarehouseLocationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new warehouse location
        /// </summary>
        /// <remarks>
        /// Creates a new warehouse location for storing items
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateWarehouseLocationResponse> CreateWarehouseLocationEndpointAsync(string version, CreateWarehouseLocationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update warehouse location
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouse location with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateWarehouseLocationResponse> UpdateWarehouseLocationEndpointAsync(string version, System.Guid id, UpdateWarehouseLocationCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update warehouse location
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouse location with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateWarehouseLocationResponse> UpdateWarehouseLocationEndpointAsync(string version, System.Guid id, UpdateWarehouseLocationCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a warehouse location
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse location by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWarehouseLocationEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a warehouse location
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse location by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWarehouseLocationEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get warehouse location by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a warehouse location by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWarehouseLocationResponse> GetWarehouseLocationEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse location by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a warehouse location by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWarehouseLocationResponse> GetWarehouseLocationEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get list of warehouse locations
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of warehouse locations with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWarehouseLocationListResponsePagedList> SearchWarehouseLocationsEndpointAsync(string version, SearchWarehouseLocationsCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of warehouse locations
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of warehouse locations with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetWarehouseLocationListResponsePagedList> SearchWarehouseLocationsEndpointAsync(string version, SearchWarehouseLocationsCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new warehouse
        /// </summary>
        /// <remarks>
        /// Creates a new warehouse
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateWarehouseResponse> CreateWarehouseEndpointAsync(string version, CreateWarehouseCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new warehouse
        /// </summary>
        /// <remarks>
        /// Creates a new warehouse
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateWarehouseResponse> CreateWarehouseEndpointAsync(string version, CreateWarehouseCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouse with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateWarehouseResponse> UpdateWarehouseEndpointAsync(string version, System.Guid id, UpdateWarehouseCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouse with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdateWarehouseResponse> UpdateWarehouseEndpointAsync(string version, System.Guid id, UpdateWarehouseCommand body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete warehouse
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWarehouseEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete warehouse
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWarehouseEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get warehouse by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a warehouse by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarehouseResponse> GetWarehouseEndpointAsync(string version, System.Guid id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a warehouse by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarehouseResponse> GetWarehouseEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search warehouses
        /// </summary>
        /// <remarks>
        /// Search and filter warehouses with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarehouseResponsePagedList> SearchWarehousesEndpointAsync(string version, SearchWarehousesCommand body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search warehouses
        /// </summary>
        /// <remarks>
        /// Search and filter warehouses with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WarehouseResponsePagedList> SearchWarehousesEndpointAsync(string version, SearchWarehousesCommand body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client : IClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// create accounting period
        /// </summary>
        /// <remarks>
        /// create accounting period
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> AccountingPeriodCreateEndpointAsync(string version, CreateAccountingPeriodCommand body)
        {
            return AccountingPeriodCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create accounting period
        /// </summary>
        /// <remarks>
        /// create accounting period
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> AccountingPeriodCreateEndpointAsync(string version, CreateAccountingPeriodCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accounting-periods"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accounting-periods");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update accounting period
        /// </summary>
        /// <remarks>
        /// update accounting period
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> AccountingPeriodUpdateEndpointAsync(string version, System.Guid id, UpdateAccountingPeriodCommand body)
        {
            return AccountingPeriodUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update accounting period
        /// </summary>
        /// <remarks>
        /// update accounting period
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> AccountingPeriodUpdateEndpointAsync(string version, System.Guid id, UpdateAccountingPeriodCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accounting-periods/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accounting-periods/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// delete accounting period by id
        /// </summary>
        /// <remarks>
        /// delete accounting period by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AccountingPeriodDeleteEndpointAsync(string version, System.Guid id)
        {
            return AccountingPeriodDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete accounting period by id
        /// </summary>
        /// <remarks>
        /// delete accounting period by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AccountingPeriodDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accounting-periods/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accounting-periods/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get accounting period by id
        /// </summary>
        /// <remarks>
        /// get accounting period by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingPeriodResponse> AccountingPeriodGetEndpointAsync(string version, System.Guid id)
        {
            return AccountingPeriodGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get accounting period by id
        /// </summary>
        /// <remarks>
        /// get accounting period by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingPeriodResponse> AccountingPeriodGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accounting-periods/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accounting-periods/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingPeriodResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// search accounting periods
        /// </summary>
        /// <remarks>
        /// search accounting periods
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountingPeriodResponsePagedList> AccountingPeriodSearchEndpointAsync(string version, SearchAccountingPeriodsQuery body)
        {
            return AccountingPeriodSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// search accounting periods
        /// </summary>
        /// <remarks>
        /// search accounting periods
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountingPeriodResponsePagedList> AccountingPeriodSearchEndpointAsync(string version, SearchAccountingPeriodsQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accounting-periods/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accounting-periods/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountingPeriodResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an accrual
        /// </summary>
        /// <remarks>
        /// Creates a new accrual entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateAccrualResponse> AccrualCreateEndpointAsync(string version, CreateAccrualCommand body)
        {
            return AccrualCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an accrual
        /// </summary>
        /// <remarks>
        /// Creates a new accrual entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateAccrualResponse> AccrualCreateEndpointAsync(string version, CreateAccrualCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accruals"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accruals");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateAccrualResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an accrual
        /// </summary>
        /// <remarks>
        /// Updates an accrual's mutable fields
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> AccrualUpdateEndpointAsync(string version, System.Guid id, UpdateAccrualCommand body)
        {
            return AccrualUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an accrual
        /// </summary>
        /// <remarks>
        /// Updates an accrual's mutable fields
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> AccrualUpdateEndpointAsync(string version, System.Guid id, UpdateAccrualCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accruals/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accruals/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete accrual by id
        /// </summary>
        /// <remarks>
        /// Deletes an accrual entry by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AccrualDeleteEndpointAsync(string version, System.Guid id)
        {
            return AccrualDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete accrual by id
        /// </summary>
        /// <remarks>
        /// Deletes an accrual entry by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AccrualDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accruals/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accruals/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an accrual by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of an accrual by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccrualResponse> AccrualGetEndpointAsync(string version, System.Guid id)
        {
            return AccrualGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an accrual by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of an accrual by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccrualResponse> AccrualGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accruals/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accruals/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccrualResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reverse an accrual
        /// </summary>
        /// <remarks>
        /// Reverses an accrual entry by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AccrualReverseEndpointAsync(string version, System.Guid id, ReverseAccrualCommand body)
        {
            return AccrualReverseEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reverse an accrual
        /// </summary>
        /// <remarks>
        /// Reverses an accrual entry by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AccrualReverseEndpointAsync(string version, System.Guid id, ReverseAccrualCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accruals/{id}/reverse"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accruals/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reverse");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search accruals
        /// </summary>
        /// <remarks>
        /// Search accrual entries with filters and pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccrualResponsePagedList> AccrualSearchEndpointAsync(string version, SearchAccrualsQuery body)
        {
            return AccrualSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search accruals
        /// </summary>
        /// <remarks>
        /// Search accrual entries with filters and pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccrualResponsePagedList> AccrualSearchEndpointAsync(string version, SearchAccrualsQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/accruals/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/accruals/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccrualResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Create a new bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> BankReconciliationCreateEndpointAsync(string version, CreateBankReconciliationCommand body)
        {
            return BankReconciliationCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Create a new bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> BankReconciliationCreateEndpointAsync(string version, CreateBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Update reconciliation items for a bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> BankReconciliationUpdateEndpointAsync(string version, System.Guid id, UpdateBankReconciliationCommand body)
        {
            return BankReconciliationUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Update reconciliation items for a bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> BankReconciliationUpdateEndpointAsync(string version, System.Guid id, UpdateBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Get a bank reconciliation by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BankReconciliationResponse> BankReconciliationGetEndpointAsync(string version, System.Guid id)
        {
            return BankReconciliationGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Get a bank reconciliation by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BankReconciliationResponse> BankReconciliationGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BankReconciliationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Delete a bank reconciliation by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BankReconciliationDeleteEndpointAsync(string version, System.Guid id)
        {
            return BankReconciliationDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Delete a bank reconciliation by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BankReconciliationDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search bank reconciliations
        /// </summary>
        /// <remarks>
        /// Search and filter bank reconciliations with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BankReconciliationResponsePagedList> BankReconciliationSearchEndpointAsync(string version, SearchBankReconciliationsCommand body)
        {
            return BankReconciliationSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search bank reconciliations
        /// </summary>
        /// <remarks>
        /// Search and filter bank reconciliations with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BankReconciliationResponsePagedList> BankReconciliationSearchEndpointAsync(string version, SearchBankReconciliationsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BankReconciliationResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Mark a bank reconciliation as in progress
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BankReconciliationStartEndpointAsync(string version, System.Guid id)
        {
            return BankReconciliationStartEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Mark a bank reconciliation as in progress
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BankReconciliationStartEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations/{id}/start"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/start");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Complete a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Mark a bank reconciliation as completed
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BankReconciliationCompleteEndpointAsync(string version, System.Guid id, CompleteBankReconciliationCommand body)
        {
            return BankReconciliationCompleteEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Mark a bank reconciliation as completed
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BankReconciliationCompleteEndpointAsync(string version, System.Guid id, CompleteBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations/{id}/complete"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/complete");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Approve a completed bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BankReconciliationApproveEndpointAsync(string version, System.Guid id, ApproveBankReconciliationCommand body)
        {
            return BankReconciliationApproveEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Approve a completed bank reconciliation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BankReconciliationApproveEndpointAsync(string version, System.Guid id, ApproveBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations/{id}/approve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reject a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Reject a completed bank reconciliation for rework
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BankReconciliationRejectEndpointAsync(string version, System.Guid id, RejectBankReconciliationCommand body)
        {
            return BankReconciliationRejectEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reject a bank reconciliation
        /// </summary>
        /// <remarks>
        /// Reject a completed bank reconciliation for rework
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BankReconciliationRejectEndpointAsync(string version, System.Guid id, RejectBankReconciliationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/bank-reconciliations/{id}/reject"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/bank-reconciliations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reject");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new bank
        /// </summary>
        /// <remarks>
        /// Creates a new bank in the accounting system with comprehensive validation and returns the created bank ID.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BankCreateResponse> BankCreateEndpointAsync(string version, BankCreateCommand body)
        {
            return BankCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new bank
        /// </summary>
        /// <remarks>
        /// Creates a new bank in the accounting system with comprehensive validation and returns the created bank ID.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BankCreateResponse> BankCreateEndpointAsync(string version, BankCreateCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/banks"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/banks");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BankCreateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing bank
        /// </summary>
        /// <remarks>
        /// Updates an existing bank in the accounting system with comprehensive validation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BankUpdateResponse> BankUpdateEndpointAsync(string version, System.Guid id, BankUpdateCommand body)
        {
            return BankUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing bank
        /// </summary>
        /// <remarks>
        /// Updates an existing bank in the accounting system with comprehensive validation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BankUpdateResponse> BankUpdateEndpointAsync(string version, System.Guid id, BankUpdateCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/banks/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/banks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BankUpdateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a bank
        /// </summary>
        /// <remarks>
        /// Deletes a bank from the accounting system. Consider deactivating instead of deleting to preserve historical data.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BankDeleteResponse> BankDeleteEndpointAsync(string version, System.Guid id)
        {
            return BankDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a bank
        /// </summary>
        /// <remarks>
        /// Deletes a bank from the accounting system. Consider deactivating instead of deleting to preserve historical data.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BankDeleteResponse> BankDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/banks/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/banks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BankDeleteResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a bank by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a bank by its unique identifier with all details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BankResponse> BankGetEndpointAsync(string version, System.Guid id)
        {
            return BankGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a bank by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a bank by its unique identifier with all details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BankResponse> BankGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/banks/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/banks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BankResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search banks
        /// </summary>
        /// <remarks>
        /// Searches banks with filtering by bank code, name, routing number, SWIFT code, and active status. Supports pagination and sorting.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BankResponsePagedList> BankSearchEndpointAsync(string version, BankSearchCommand body)
        {
            return BankSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search banks
        /// </summary>
        /// <remarks>
        /// Searches banks with filtering by bank code, name, routing number, SWIFT code, and active status. Supports pagination and sorting.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BankResponsePagedList> BankSearchEndpointAsync(string version, BankSearchCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/banks/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/banks/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BankResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create invoice from consumption
        /// </summary>
        /// <remarks>
        /// Creates an invoice for a consumption record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> CreateInvoiceFromConsumptionEndpointAsync(string version, CreateInvoiceFromConsumptionCommand body)
        {
            return CreateInvoiceFromConsumptionEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create invoice from consumption
        /// </summary>
        /// <remarks>
        /// Creates an invoice for a consumption record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> CreateInvoiceFromConsumptionEndpointAsync(string version, CreateInvoiceFromConsumptionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/billing/invoices/from-consumption"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/billing/invoices/from-consumption");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new bin
        /// </summary>
        /// <remarks>
        /// Creates a new storage bin within a warehouse location
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateBinResponse> CreateBinEndpointAsync(string version, CreateBinCommand body)
        {
            return CreateBinEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new bin
        /// </summary>
        /// <remarks>
        /// Creates a new storage bin within a warehouse location
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateBinResponse> CreateBinEndpointAsync(string version, CreateBinCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/bins"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/bins");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateBinResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing bin
        /// </summary>
        /// <remarks>
        /// Updates an existing storage bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateBinResponse> UpdateBinEndpointAsync(string version, System.Guid id, UpdateBinCommand body)
        {
            return UpdateBinEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing bin
        /// </summary>
        /// <remarks>
        /// Updates an existing storage bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateBinResponse> UpdateBinEndpointAsync(string version, System.Guid id, UpdateBinCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/bins/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/bins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateBinResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a bin
        /// </summary>
        /// <remarks>
        /// Deletes a storage bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> DeleteBinEndpointAsync(string version, System.Guid id)
        {
            return DeleteBinEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a bin
        /// </summary>
        /// <remarks>
        /// Deletes a storage bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> DeleteBinEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/bins/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/bins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get bin by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific storage bin by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BinResponse> GetBinEndpointAsync(string version, System.Guid id)
        {
            return GetBinEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get bin by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific storage bin by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BinResponse> GetBinEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/bins/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/bins/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BinResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search bins
        /// </summary>
        /// <remarks>
        /// Searches for storage bins with pagination and filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BinResponsePagedList> SearchBinsEndpointAsync(string version, SearchBinsCommand body)
        {
            return SearchBinsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search bins
        /// </summary>
        /// <remarks>
        /// Searches for storage bins with pagination and filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BinResponsePagedList> SearchBinsEndpointAsync(string version, SearchBinsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/bins/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/bins/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BinResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// creates a brand
        /// </summary>
        /// <remarks>
        /// creates a brand
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateBrandResponse> CreateBrandEndpointAsync(string version, CreateBrandCommand body)
        {
            return CreateBrandEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// creates a brand
        /// </summary>
        /// <remarks>
        /// creates a brand
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateBrandResponse> CreateBrandEndpointAsync(string version, CreateBrandCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/brands"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/brands");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateBrandResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// gets brand by id
        /// </summary>
        /// <remarks>
        /// gets brand by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BrandResponse> GetBrandEndpointAsync(string version, System.Guid id)
        {
            return GetBrandEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// gets brand by id
        /// </summary>
        /// <remarks>
        /// gets brand by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BrandResponse> GetBrandEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/brands/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/brands/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BrandResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update a brand
        /// </summary>
        /// <remarks>
        /// update a brand
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateBrandResponse> UpdateBrandEndpointAsync(string version, System.Guid id, UpdateBrandCommand body)
        {
            return UpdateBrandEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a brand
        /// </summary>
        /// <remarks>
        /// update a brand
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateBrandResponse> UpdateBrandEndpointAsync(string version, System.Guid id, UpdateBrandCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/brands/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/brands/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateBrandResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// deletes brand by id
        /// </summary>
        /// <remarks>
        /// deletes brand by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteBrandEndpointAsync(string version, System.Guid id)
        {
            return DeleteBrandEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// deletes brand by id
        /// </summary>
        /// <remarks>
        /// deletes brand by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteBrandEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/brands/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/brands/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of brands
        /// </summary>
        /// <remarks>
        /// Gets a list of brands with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BrandResponsePagedList> SearchBrandsEndpointAsync(string version, SearchBrandsCommand body)
        {
            return SearchBrandsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of brands
        /// </summary>
        /// <remarks>
        /// Gets a list of brands with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BrandResponsePagedList> SearchBrandsEndpointAsync(string version, SearchBrandsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/brands/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/brands/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BrandResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// create budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> BudgetDetailCreateEndpointAsync(string version, CreateBudgetDetailCommand body)
        {
            return BudgetDetailCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> BudgetDetailCreateEndpointAsync(string version, CreateBudgetDetailCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budget-details"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budget-details");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> BudgetDetailUpdateEndpointAsync(string version, System.Guid id, UpdateBudgetDetailCommand body)
        {
            return BudgetDetailUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> BudgetDetailUpdateEndpointAsync(string version, System.Guid id, UpdateBudgetDetailCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budget-details/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budget-details/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// delete budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BudgetDetailDeleteEndpointAsync(string version, System.Guid id)
        {
            return BudgetDetailDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete budget detail
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BudgetDetailDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budget-details/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budget-details/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get budget detail by id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BudgetDetailResponse> BudgetDetailGetEndpointAsync(string version, System.Guid id)
        {
            return BudgetDetailGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get budget detail by id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BudgetDetailResponse> BudgetDetailGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budget-details/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budget-details/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BudgetDetailResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// list budget details by budget id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetDetailResponse>> BudgetDetailSearchEndpointAsync(string version, System.Guid budgetId)
        {
            return BudgetDetailSearchEndpointAsync(version, budgetId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// list budget details by budget id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing budget detail entries
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetDetailResponse>> BudgetDetailSearchEndpointAsync(string version, System.Guid budgetId, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (budgetId == null)
                throw new System.ArgumentNullException("budgetId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budget-details/by-budget/{budgetId}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budget-details/by-budget/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(budgetId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BudgetDetailResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// create a budget
        /// </summary>
        /// <remarks>
        /// create a budget
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateBudgetResponse> BudgetCreateEndpointAsync(string version, CreateBudgetCommand body)
        {
            return BudgetCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create a budget
        /// </summary>
        /// <remarks>
        /// create a budget
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateBudgetResponse> BudgetCreateEndpointAsync(string version, CreateBudgetCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budgets"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budgets");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateBudgetResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of budgets
        /// </summary>
        /// <remarks>
        /// Gets a list of budgets with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BudgetResponsePagedList> BudgetSearchEndpointAsync(string version, SearchBudgetsQuery body)
        {
            return BudgetSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of budgets
        /// </summary>
        /// <remarks>
        /// Gets a list of budgets with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BudgetResponsePagedList> BudgetSearchEndpointAsync(string version, SearchBudgetsQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budgets/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budgets/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BudgetResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get a budget by id
        /// </summary>
        /// <remarks>
        /// get a budget by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BudgetResponse> BudgetGetEndpointAsync(string version, System.Guid id)
        {
            return BudgetGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get a budget by id
        /// </summary>
        /// <remarks>
        /// get a budget by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BudgetResponse> BudgetGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budgets/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BudgetResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update a budget
        /// </summary>
        /// <remarks>
        /// update a budget
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateBudgetResponse> BudgetUpdateEndpointAsync(string version, System.Guid id, UpdateBudgetCommand body)
        {
            return BudgetUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a budget
        /// </summary>
        /// <remarks>
        /// update a budget
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateBudgetResponse> BudgetUpdateEndpointAsync(string version, System.Guid id, UpdateBudgetCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budgets/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateBudgetResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// delete budget by id
        /// </summary>
        /// <remarks>
        /// delete budget by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BudgetDeleteEndpointAsync(string version, System.Guid id)
        {
            return BudgetDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete budget by id
        /// </summary>
        /// <remarks>
        /// delete budget by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BudgetDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/budgets/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/budgets/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new category
        /// </summary>
        /// <remarks>
        /// Creates a new category
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateCategoryResponse> CreateCategoryEndpointAsync(string version, CreateCategoryCommand body)
        {
            return CreateCategoryEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new category
        /// </summary>
        /// <remarks>
        /// Creates a new category
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateCategoryResponse> CreateCategoryEndpointAsync(string version, CreateCategoryCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/categories"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/categories");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateCategoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// Updates an existing category
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateCategoryResponse> UpdateCategoryEndpointAsync(string version, System.Guid id, UpdateCategoryCommand body)
        {
            return UpdateCategoryEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update category
        /// </summary>
        /// <remarks>
        /// Updates an existing category
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateCategoryResponse> UpdateCategoryEndpointAsync(string version, System.Guid id, UpdateCategoryCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/categories/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateCategoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// Deletes a category by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteCategoryEndpointAsync(string version, System.Guid id)
        {
            return DeleteCategoryEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete category
        /// </summary>
        /// <remarks>
        /// Deletes a category by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteCategoryEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/categories/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get category by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a category by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CategoryResponse> GetCategoryEndpointAsync(string version, System.Guid id)
        {
            return GetCategoryEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get category by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a category by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CategoryResponse> GetCategoryEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/categories/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/categories/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search categories
        /// </summary>
        /// <remarks>
        /// Searches categories with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CategoryResponsePagedList> SearchCategoriesEndpointAsync(string version, SearchCategoriesCommand body)
        {
            return SearchCategoriesEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search categories
        /// </summary>
        /// <remarks>
        /// Searches categories with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CategoryResponsePagedList> SearchCategoriesEndpointAsync(string version, SearchCategoriesCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/categories/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/categories/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CategoryResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// create a chart of account
        /// </summary>
        /// <remarks>
        /// create a chart of account
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> ChartOfAccountCreateEndpointAsync(string version, CreateChartOfAccountCommand body)
        {
            return ChartOfAccountCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create a chart of account
        /// </summary>
        /// <remarks>
        /// create a chart of account
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> ChartOfAccountCreateEndpointAsync(string version, CreateChartOfAccountCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/chart-of-accounts"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/chart-of-accounts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update a chart of account
        /// </summary>
        /// <remarks>
        /// update a chart of account
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> ChartOfAccountUpdateEndpointAsync(string version, System.Guid id, UpdateChartOfAccountCommand body)
        {
            return ChartOfAccountUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a chart of account
        /// </summary>
        /// <remarks>
        /// update a chart of account
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> ChartOfAccountUpdateEndpointAsync(string version, System.Guid id, UpdateChartOfAccountCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/chart-of-accounts/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/chart-of-accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// delete chart of account by id
        /// </summary>
        /// <remarks>
        /// delete chart of account by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ChartOfAccountDeleteEndpointAsync(string version, System.Guid id)
        {
            return ChartOfAccountDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete chart of account by id
        /// </summary>
        /// <remarks>
        /// delete chart of account by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChartOfAccountDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/chart-of-accounts/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/chart-of-accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get a chart of account by id
        /// </summary>
        /// <remarks>
        /// get a chart of account by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ChartOfAccountResponse> ChartOfAccountGetEndpointAsync(string version, System.Guid id)
        {
            return ChartOfAccountGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get a chart of account by id
        /// </summary>
        /// <remarks>
        /// get a chart of account by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ChartOfAccountResponse> ChartOfAccountGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/chart-of-accounts/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/chart-of-accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChartOfAccountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of chart of accounts
        /// </summary>
        /// <remarks>
        /// Gets a list of chart of accounts with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ChartOfAccountResponsePagedList> ChartOfAccountSearchEndpointAsync(string version, SearchChartOfAccountQuery body)
        {
            return ChartOfAccountSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of chart of accounts
        /// </summary>
        /// <remarks>
        /// Gets a list of chart of accounts with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ChartOfAccountResponsePagedList> ChartOfAccountSearchEndpointAsync(string version, SearchChartOfAccountQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/chart-of-accounts/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/chart-of-accounts/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ChartOfAccountResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import chart of accounts from Excel file
        /// </summary>
        /// <remarks>
        /// Imports chart of accounts from an Excel (.xlsx) file with validation and duplicate checking
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> ChartOfAccountImportEndpointAsync(string version, ImportChartOfAccountsCommand body)
        {
            return ChartOfAccountImportEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import chart of accounts from Excel file
        /// </summary>
        /// <remarks>
        /// Imports chart of accounts from an Excel (.xlsx) file with validation and duplicate checking
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> ChartOfAccountImportEndpointAsync(string version, ImportChartOfAccountsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/chart-of-accounts/import"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/chart-of-accounts/import");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Export chart of accounts to Excel file
        /// </summary>
        /// <remarks>
        /// Exports chart of accounts to Excel (.xlsx) file with optional filtering by account type, USOA category, and search criteria
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ChartOfAccountExportEndpointAsync(string version, ExportChartOfAccountsQuery body)
        {
            return ChartOfAccountExportEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export chart of accounts to Excel file
        /// </summary>
        /// <remarks>
        /// Exports chart of accounts to Excel (.xlsx) file with optional filtering by account type, USOA category, and search criteria
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ChartOfAccountExportEndpointAsync(string version, ExportChartOfAccountsQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/chart-of-accounts/export"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/chart-of-accounts/export");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await ReadAsStreamAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get check by ID
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a specific check including current status, payment details, and complete audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckGetResponse> CheckGetEndpointAsync(string version, System.Guid id)
        {
            return CheckGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get check by ID
        /// </summary>
        /// <remarks>
        /// Retrieve detailed information about a specific check including current status, payment details, and complete audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckGetResponse> CheckGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckGetResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing check
        /// </summary>
        /// <remarks>
        /// Updates an existing check in the accounting system. BankAccountName and BankName are automatically populated from their respective entities based on the provided BankAccountCode and BankId.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckUpdateResponse> CheckUpdateEndpointAsync(string version, System.Guid id, CheckUpdateCommand body)
        {
            return CheckUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing check
        /// </summary>
        /// <remarks>
        /// Updates an existing check in the accounting system. BankAccountName and BankName are automatically populated from their respective entities based on the provided BankAccountCode and BankId.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckUpdateResponse> CheckUpdateEndpointAsync(string version, System.Guid id, CheckUpdateCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckUpdateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search checks
        /// </summary>
        /// <remarks>
        /// Search and filter checks with pagination, status filtering, date ranges, and amount ranges. Supports advanced filtering by check number, bank account, payee name, and print/stop payment status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckSearchResponsePagedList> CheckSearchEndpointAsync(string version, CheckSearchQuery body)
        {
            return CheckSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search checks
        /// </summary>
        /// <remarks>
        /// Search and filter checks with pagination, status filtering, date ranges, and amount ranges. Supports advanced filtering by check number, bank account, payee name, and print/stop payment status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckSearchResponsePagedList> CheckSearchEndpointAsync(string version, CheckSearchQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckSearchResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Register a new check
        /// </summary>
        /// <remarks>
        /// Register a new check in the system for later use in payments. Creates a check in 'Available' status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckCreateResponse> CheckCreateEndpointAsync(string version, CheckCreateCommand body)
        {
            return CheckCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register a new check
        /// </summary>
        /// <remarks>
        /// Register a new check in the system for later use in payments. Creates a check in 'Available' status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckCreateResponse> CheckCreateEndpointAsync(string version, CheckCreateCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckCreateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Issue a check for payment
        /// </summary>
        /// <remarks>
        /// Issue a check to a payee/vendor for payment of expenses, invoices, or other obligations. Transitions check to Issued status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckIssueResponse> CheckIssueEndpointAsync(string version, CheckIssueCommand body)
        {
            return CheckIssueEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Issue a check for payment
        /// </summary>
        /// <remarks>
        /// Issue a check to a payee/vendor for payment of expenses, invoices, or other obligations. Transitions check to Issued status.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckIssueResponse> CheckIssueEndpointAsync(string version, CheckIssueCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks/issue"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks/issue");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckIssueResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Void a check
        /// </summary>
        /// <remarks>
        /// Void a check that was issued in error or needs to be cancelled. Records the void reason in audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckVoidResponse> CheckVoidEndpointAsync(string version, CheckVoidCommand body)
        {
            return CheckVoidEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Void a check
        /// </summary>
        /// <remarks>
        /// Void a check that was issued in error or needs to be cancelled. Records the void reason in audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckVoidResponse> CheckVoidEndpointAsync(string version, CheckVoidCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks/void"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks/void");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckVoidResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark check as cleared
        /// </summary>
        /// <remarks>
        /// Mark a check as cleared during bank reconciliation when it appears on the bank statement.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckClearResponse> CheckClearEndpointAsync(string version, CheckClearCommand body)
        {
            return CheckClearEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark check as cleared
        /// </summary>
        /// <remarks>
        /// Mark a check as cleared during bank reconciliation when it appears on the bank statement.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckClearResponse> CheckClearEndpointAsync(string version, CheckClearCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks/clear"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks/clear");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckClearResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Request stop payment on check
        /// </summary>
        /// <remarks>
        /// Request stop payment on a check that is lost, stolen, or needs to be cancelled before presentation to the bank.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckStopPaymentResponse> CheckStopPaymentEndpointAsync(string version, CheckStopPaymentCommand body)
        {
            return CheckStopPaymentEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request stop payment on check
        /// </summary>
        /// <remarks>
        /// Request stop payment on a check that is lost, stolen, or needs to be cancelled before presentation to the bank.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckStopPaymentResponse> CheckStopPaymentEndpointAsync(string version, CheckStopPaymentCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks/stop-payment"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks/stop-payment");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckStopPaymentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark check as printed
        /// </summary>
        /// <remarks>
        /// Mark a check as printed and record who performed the printing. Maintains audit trail for compliance.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CheckPrintResponse> CheckPrintEndpointAsync(string version, CheckPrintCommand body)
        {
            return CheckPrintEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark check as printed
        /// </summary>
        /// <remarks>
        /// Mark a check as printed and record who performed the printing. Maintains audit trail for compliance.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CheckPrintResponse> CheckPrintEndpointAsync(string version, CheckPrintCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/checks/print"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/checks/print");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CheckPrintResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a credit memo
        /// </summary>
        /// <remarks>
        /// Create a new credit memo for receivable/payable adjustments
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> CreditMemoCreateEndpointAsync(string version, CreateCreditMemoCommand body)
        {
            return CreditMemoCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a credit memo
        /// </summary>
        /// <remarks>
        /// Create a new credit memo for receivable/payable adjustments
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> CreditMemoCreateEndpointAsync(string version, CreateCreditMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a credit memo
        /// </summary>
        /// <remarks>
        /// Update an existing credit memo (draft only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreditMemoUpdateEndpointAsync(string version, System.Guid id, UpdateCreditMemoCommand body)
        {
            return CreditMemoUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a credit memo
        /// </summary>
        /// <remarks>
        /// Update an existing credit memo (draft only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreditMemoUpdateEndpointAsync(string version, System.Guid id, UpdateCreditMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get credit memo by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a specific credit memo by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreditMemoResponse> CreditMemoGetEndpointAsync(string version, System.Guid id)
        {
            return CreditMemoGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get credit memo by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a specific credit memo by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreditMemoResponse> CreditMemoGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreditMemoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a credit memo
        /// </summary>
        /// <remarks>
        /// Delete a credit memo (draft status only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreditMemoDeleteEndpointAsync(string version, System.Guid id)
        {
            return CreditMemoDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a credit memo
        /// </summary>
        /// <remarks>
        /// Delete a credit memo (draft status only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreditMemoDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search credit memos
        /// </summary>
        /// <remarks>
        /// Search and filter credit memos with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreditMemoResponsePagedList> CreditMemoSearchEndpointAsync(string version, SearchCreditMemosQuery body)
        {
            return CreditMemoSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search credit memos
        /// </summary>
        /// <remarks>
        /// Search and filter credit memos with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreditMemoResponsePagedList> CreditMemoSearchEndpointAsync(string version, SearchCreditMemosQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreditMemoResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve a credit memo
        /// </summary>
        /// <remarks>
        /// Approve a draft credit memo for application or refund
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreditMemoApproveEndpointAsync(string version, System.Guid id, ApproveCreditMemoCommand body)
        {
            return CreditMemoApproveEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a credit memo
        /// </summary>
        /// <remarks>
        /// Approve a draft credit memo for application or refund
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreditMemoApproveEndpointAsync(string version, System.Guid id, ApproveCreditMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos/{id}/approve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Apply a credit memo
        /// </summary>
        /// <remarks>
        /// Apply an approved credit memo to an invoice or bill
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreditMemoApplyEndpointAsync(string version, System.Guid id, ApplyCreditMemoCommand body)
        {
            return CreditMemoApplyEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Apply a credit memo
        /// </summary>
        /// <remarks>
        /// Apply an approved credit memo to an invoice or bill
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreditMemoApplyEndpointAsync(string version, System.Guid id, ApplyCreditMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos/{id}/apply"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/apply");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Issue refund for credit memo
        /// </summary>
        /// <remarks>
        /// Issue a direct refund for an approved credit memo
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreditMemoRefundEndpointAsync(string version, System.Guid id, RefundCreditMemoCommand body)
        {
            return CreditMemoRefundEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Issue refund for credit memo
        /// </summary>
        /// <remarks>
        /// Issue a direct refund for an approved credit memo
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreditMemoRefundEndpointAsync(string version, System.Guid id, RefundCreditMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos/{id}/refund"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/refund");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Void a credit memo
        /// </summary>
        /// <remarks>
        /// Void a credit memo and reverse any applications or refunds
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreditMemoVoidEndpointAsync(string version, System.Guid id, VoidCreditMemoCommand body)
        {
            return CreditMemoVoidEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Void a credit memo
        /// </summary>
        /// <remarks>
        /// Void a credit memo and reverse any applications or refunds
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreditMemoVoidEndpointAsync(string version, System.Guid id, VoidCreditMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/credit-memos/{id}/void"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/credit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/void");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new cycle count
        /// </summary>
        /// <remarks>
        /// Schedules a new cycle count for a warehouse or location
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateCycleCountResponse> CreateCycleCountEndpointAsync(string version, CreateCycleCountCommand body)
        {
            return CreateCycleCountEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new cycle count
        /// </summary>
        /// <remarks>
        /// Schedules a new cycle count for a warehouse or location
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateCycleCountResponse> CreateCycleCountEndpointAsync(string version, CreateCycleCountCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateCycleCountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search cycle counts
        /// </summary>
        /// <remarks>
        /// Searches cycle counts with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CycleCountResponsePagedList> SearchCycleCountsEndpointAsync(string version)
        {
            return SearchCycleCountsEndpointAsync(version, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search cycle counts
        /// </summary>
        /// <remarks>
        /// Searches cycle counts with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CycleCountResponsePagedList> SearchCycleCountsEndpointAsync(string version, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CycleCountResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a cycle count
        /// </summary>
        /// <remarks>
        /// Updates cycle count details. Only cycle counts in 'Scheduled' status can be updated.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateCycleCountResponse> UpdateCycleCountEndpointAsync(string version, System.Guid id, UpdateCycleCountCommand body)
        {
            return UpdateCycleCountEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a cycle count
        /// </summary>
        /// <remarks>
        /// Updates cycle count details. Only cycle counts in 'Scheduled' status can be updated.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateCycleCountResponse> UpdateCycleCountEndpointAsync(string version, System.Guid id, UpdateCycleCountCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateCycleCountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get cycle count by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a cycle count by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CycleCountResponse> GetCycleCountEndpointAsync(string version, System.Guid id)
        {
            return GetCycleCountEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get cycle count by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a cycle count by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CycleCountResponse> GetCycleCountEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CycleCountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start a cycle count
        /// </summary>
        /// <remarks>
        /// Marks a scheduled cycle count as in-progress
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StartCycleCountResponse> StartCycleCountEndpointAsync(string version, System.Guid id, StartCycleCountCommand body)
        {
            return StartCycleCountEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a cycle count
        /// </summary>
        /// <remarks>
        /// Marks a scheduled cycle count as in-progress
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StartCycleCountResponse> StartCycleCountEndpointAsync(string version, System.Guid id, StartCycleCountCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts/{id}/start"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/start");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StartCycleCountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Complete a cycle count
        /// </summary>
        /// <remarks>
        /// Marks an in-progress cycle count as completed and computes metrics
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompleteCycleCountResponse> CompleteCycleCountEndpointAsync(string version, System.Guid id, CompleteCycleCountCommand body)
        {
            return CompleteCycleCountEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete a cycle count
        /// </summary>
        /// <remarks>
        /// Marks an in-progress cycle count as completed and computes metrics
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompleteCycleCountResponse> CompleteCycleCountEndpointAsync(string version, System.Guid id, CompleteCycleCountCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts/{id}/complete"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/complete");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompleteCycleCountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel a cycle count
        /// </summary>
        /// <remarks>
        /// Cancels a cycle count that is in 'Scheduled' or 'InProgress' status
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CancelCycleCountResponse> CancelCycleCountEndpointAsync(string version, System.Guid id, CancelCycleCountCommand body)
        {
            return CancelCycleCountEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a cycle count
        /// </summary>
        /// <remarks>
        /// Cancels a cycle count that is in 'Scheduled' or 'InProgress' status
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CancelCycleCountResponse> CancelCycleCountEndpointAsync(string version, System.Guid id, CancelCycleCountCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts/{id}/cancel"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cancel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelCycleCountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reconcile a cycle count
        /// </summary>
        /// <remarks>
        /// Runs reconciliation for a completed cycle count and returns any discrepancies
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReconcileCycleCountResponse> ReconcileCycleCountEndpointAsync(string version, System.Guid id, ReconcileCycleCountCommand body)
        {
            return ReconcileCycleCountEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reconcile a cycle count
        /// </summary>
        /// <remarks>
        /// Runs reconciliation for a completed cycle count and returns any discrepancies
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReconcileCycleCountResponse> ReconcileCycleCountEndpointAsync(string version, System.Guid id, ReconcileCycleCountCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts/{id}/reconcile"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reconcile");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReconcileCycleCountResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add an item count to a cycle count
        /// </summary>
        /// <remarks>
        /// Adds counted quantity for a grocery item to the cycle count
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddCycleCountItemResponse> AddCycleCountItemEndpointAsync(string version, System.Guid id, AddCycleCountItemCommand body)
        {
            return AddCycleCountItemEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an item count to a cycle count
        /// </summary>
        /// <remarks>
        /// Adds counted quantity for a grocery item to the cycle count
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddCycleCountItemResponse> AddCycleCountItemEndpointAsync(string version, System.Guid id, AddCycleCountItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts/{id}/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddCycleCountItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Record counted quantity for a cycle count item
        /// </summary>
        /// <remarks>
        /// Records the physically counted quantity for a specific item during the counting phase. This is the core operation of cycle counting.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RecordCycleCountItemResponse> RecordCycleCountItemEndpointAsync(string version, System.Guid cycleCountId, System.Guid itemId, RecordCycleCountItemCommand body)
        {
            return RecordCycleCountItemEndpointAsync(version, cycleCountId, itemId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Record counted quantity for a cycle count item
        /// </summary>
        /// <remarks>
        /// Records the physically counted quantity for a specific item during the counting phase. This is the core operation of cycle counting.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RecordCycleCountItemResponse> RecordCycleCountItemEndpointAsync(string version, System.Guid cycleCountId, System.Guid itemId, RecordCycleCountItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (cycleCountId == null)
                throw new System.ArgumentNullException("cycleCountId");

            if (itemId == null)
                throw new System.ArgumentNullException("itemId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/cycle-counts/{cycleCountId}/items/{itemId}/record"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/cycle-counts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(cycleCountId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/record");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecordCycleCountItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a debit memo
        /// </summary>
        /// <remarks>
        /// Create a new debit memo for receivable/payable adjustments
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> DebitMemoCreateEndpointAsync(string version, CreateDebitMemoCommand body)
        {
            return DebitMemoCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a debit memo
        /// </summary>
        /// <remarks>
        /// Create a new debit memo for receivable/payable adjustments
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> DebitMemoCreateEndpointAsync(string version, CreateDebitMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/debit-memos"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/debit-memos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a debit memo
        /// </summary>
        /// <remarks>
        /// Update an existing debit memo (draft only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DebitMemoUpdateEndpointAsync(string version, System.Guid id, UpdateDebitMemoCommand body)
        {
            return DebitMemoUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a debit memo
        /// </summary>
        /// <remarks>
        /// Update an existing debit memo (draft only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DebitMemoUpdateEndpointAsync(string version, System.Guid id, UpdateDebitMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/debit-memos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/debit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get debit memo by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a specific debit memo by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DebitMemoResponse> DebitMemoGetEndpointAsync(string version, System.Guid id)
        {
            return DebitMemoGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get debit memo by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a specific debit memo by its identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DebitMemoResponse> DebitMemoGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/debit-memos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/debit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DebitMemoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a debit memo
        /// </summary>
        /// <remarks>
        /// Delete a debit memo (draft status only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DebitMemoDeleteEndpointAsync(string version, System.Guid id)
        {
            return DebitMemoDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a debit memo
        /// </summary>
        /// <remarks>
        /// Delete a debit memo (draft status only)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DebitMemoDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/debit-memos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/debit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search debit memos
        /// </summary>
        /// <remarks>
        /// Search and filter debit memos with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DebitMemoResponsePagedList> DebitMemoSearchEndpointAsync(string version, SearchDebitMemosQuery body)
        {
            return DebitMemoSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search debit memos
        /// </summary>
        /// <remarks>
        /// Search and filter debit memos with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DebitMemoResponsePagedList> DebitMemoSearchEndpointAsync(string version, SearchDebitMemosQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/debit-memos/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/debit-memos/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DebitMemoResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve a debit memo
        /// </summary>
        /// <remarks>
        /// Approve a draft debit memo for application
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DebitMemoApproveEndpointAsync(string version, System.Guid id, ApproveDebitMemoCommand body)
        {
            return DebitMemoApproveEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a debit memo
        /// </summary>
        /// <remarks>
        /// Approve a draft debit memo for application
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DebitMemoApproveEndpointAsync(string version, System.Guid id, ApproveDebitMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/debit-memos/{id}/approve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/debit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Apply a debit memo
        /// </summary>
        /// <remarks>
        /// Apply an approved debit memo to an invoice or bill
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DebitMemoApplyEndpointAsync(string version, System.Guid id, ApplyDebitMemoCommand body)
        {
            return DebitMemoApplyEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Apply a debit memo
        /// </summary>
        /// <remarks>
        /// Apply an approved debit memo to an invoice or bill
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DebitMemoApplyEndpointAsync(string version, System.Guid id, ApplyDebitMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/debit-memos/{id}/apply"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/debit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/apply");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Void a debit memo
        /// </summary>
        /// <remarks>
        /// Void a debit memo and reverse any applications
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DebitMemoVoidEndpointAsync(string version, System.Guid id, VoidDebitMemoCommand body)
        {
            return DebitMemoVoidEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Void a debit memo
        /// </summary>
        /// <remarks>
        /// Void a debit memo and reverse any applications
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DebitMemoVoidEndpointAsync(string version, System.Guid id, VoidDebitMemoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/debit-memos/{id}/void"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/debit-memos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/void");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create deferred revenue
        /// </summary>
        /// <remarks>
        /// Creates a new deferred revenue entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> DeferredRevenueCreateEndpointAsync(string version, CreateDeferredRevenueCommand body)
        {
            return DeferredRevenueCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create deferred revenue
        /// </summary>
        /// <remarks>
        /// Creates a new deferred revenue entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> DeferredRevenueCreateEndpointAsync(string version, CreateDeferredRevenueCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/deferred-revenue"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/deferred-revenue");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Recognize deferred revenue
        /// </summary>
        /// <remarks>
        /// Recognizes deferred revenue for a given entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeferredRevenueUpdateEndpointAsync(string version, System.Guid id, RecognizeDeferredRevenueCommand body)
        {
            return DeferredRevenueUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recognize deferred revenue
        /// </summary>
        /// <remarks>
        /// Recognizes deferred revenue for a given entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeferredRevenueUpdateEndpointAsync(string version, System.Guid id, RecognizeDeferredRevenueCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/deferred-revenue/{id}/recognize"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/deferred-revenue/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/recognize");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get deferred revenue by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of a deferred revenue entry by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeferredRevenueGetEndpointAsync(string version, System.Guid id)
        {
            return DeferredRevenueGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get deferred revenue by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of a deferred revenue entry by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeferredRevenueGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/deferred-revenue/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/deferred-revenue/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search deferred revenues
        /// </summary>
        /// <remarks>
        /// Searches deferred revenue entries with filters and pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeferredRevenueSearchEndpointAsync(string version, SearchDeferredRevenuesQuery body)
        {
            return DeferredRevenueSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search deferred revenues
        /// </summary>
        /// <remarks>
        /// Searches deferred revenue entries with filters and pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeferredRevenueSearchEndpointAsync(string version, SearchDeferredRevenuesQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/deferred-revenue/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/deferred-revenue/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a depreciation method
        /// </summary>
        /// <remarks>
        /// Creates a new depreciation method
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> DepreciationMethodCreateEndpointAsync(string version, CreateDepreciationMethodRequest body)
        {
            return DepreciationMethodCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a depreciation method
        /// </summary>
        /// <remarks>
        /// Creates a new depreciation method
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> DepreciationMethodCreateEndpointAsync(string version, CreateDepreciationMethodRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/depreciation-methods"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/depreciation-methods");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a depreciation method
        /// </summary>
        /// <remarks>
        /// Updates an existing depreciation method
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> DepreciationMethodUpdateEndpointAsync(string version, System.Guid id, UpdateDepreciationMethodRequest body)
        {
            return DepreciationMethodUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a depreciation method
        /// </summary>
        /// <remarks>
        /// Updates an existing depreciation method
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> DepreciationMethodUpdateEndpointAsync(string version, System.Guid id, UpdateDepreciationMethodRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/depreciation-methods/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/depreciation-methods/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a depreciation method
        /// </summary>
        /// <remarks>
        /// Deletes a depreciation method by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DepreciationMethodDeleteEndpointAsync(string version, System.Guid id)
        {
            return DepreciationMethodDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a depreciation method
        /// </summary>
        /// <remarks>
        /// Deletes a depreciation method by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DepreciationMethodDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/depreciation-methods/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/depreciation-methods/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a depreciation method by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of a depreciation method by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DepreciationMethodGetEndpointAsync(string version, System.Guid id)
        {
            return DepreciationMethodGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a depreciation method by ID
        /// </summary>
        /// <remarks>
        /// Gets the details of a depreciation method by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DepreciationMethodGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/depreciation-methods/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/depreciation-methods/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new goods receipt
        /// </summary>
        /// <remarks>
        /// Creates a new goods receipt for tracking inbound deliveries from suppliers.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateGoodsReceiptResponse> CreateGoodsReceiptEndpointAsync(string version, CreateGoodsReceiptCommand body)
        {
            return CreateGoodsReceiptEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new goods receipt
        /// </summary>
        /// <remarks>
        /// Creates a new goods receipt for tracking inbound deliveries from suppliers.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateGoodsReceiptResponse> CreateGoodsReceiptEndpointAsync(string version, CreateGoodsReceiptCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/goodsreceipts"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/goodsreceipts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateGoodsReceiptResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add item to goods receipt
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing goods receipt.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddGoodsReceiptItemResponse> AddGoodsReceiptItemEndpointAsync(string version, System.Guid id, AddGoodsReceiptItemCommand body)
        {
            return AddGoodsReceiptItemEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add item to goods receipt
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing goods receipt.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddGoodsReceiptItemResponse> AddGoodsReceiptItemEndpointAsync(string version, System.Guid id, AddGoodsReceiptItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/goodsreceipts/{id}/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/goodsreceipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddGoodsReceiptItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark goods receipt as received
        /// </summary>
        /// <remarks>
        /// Marks a goods receipt as received/completed.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarkReceivedResponse> MarkReceivedEndpointAsync(string version, System.Guid id, MarkReceivedCommand body)
        {
            return MarkReceivedEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark goods receipt as received
        /// </summary>
        /// <remarks>
        /// Marks a goods receipt as received/completed.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarkReceivedResponse> MarkReceivedEndpointAsync(string version, System.Guid id, MarkReceivedCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/goodsreceipts/{id}/mark-received"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/goodsreceipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/mark-received");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarkReceivedResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a goods receipt
        /// </summary>
        /// <remarks>
        /// Deletes an existing goods receipt.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeleteGoodsReceiptResponse> DeleteGoodsReceiptEndpointAsync(string version, System.Guid id)
        {
            return DeleteGoodsReceiptEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a goods receipt
        /// </summary>
        /// <remarks>
        /// Deletes an existing goods receipt.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeleteGoodsReceiptResponse> DeleteGoodsReceiptEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/goodsreceipts/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/goodsreceipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeleteGoodsReceiptResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get goods receipt by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific goods receipt with all items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetGoodsReceiptResponse> GetGoodsReceiptEndpointAsync(string version, System.Guid id)
        {
            return GetGoodsReceiptEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get goods receipt by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific goods receipt with all items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetGoodsReceiptResponse> GetGoodsReceiptEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/goodsreceipts/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/goodsreceipts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetGoodsReceiptResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search goods receipts
        /// </summary>
        /// <remarks>
        /// Searches goods receipts with pagination and filtering options.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GoodsReceiptResponsePagedList> SearchGoodsReceiptsEndpointAsync(string version, SearchGoodsReceiptsCommand body)
        {
            return SearchGoodsReceiptsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search goods receipts
        /// </summary>
        /// <remarks>
        /// Searches goods receipts with pagination and filtering options.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GoodsReceiptResponsePagedList> SearchGoodsReceiptsEndpointAsync(string version, SearchGoodsReceiptsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/goodsreceipts/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/goodsreceipts/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GoodsReceiptResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get PO items available for receiving
        /// </summary>
        /// <remarks>
        /// Returns purchase order items with their ordered, received, and remaining quantities for partial receiving support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPurchaseOrderItemsForReceivingResponse> GetPurchaseOrderItemsForReceivingEndpointAsync(string version, System.Guid purchaseOrderId)
        {
            return GetPurchaseOrderItemsForReceivingEndpointAsync(version, purchaseOrderId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get PO items available for receiving
        /// </summary>
        /// <remarks>
        /// Returns purchase order items with their ordered, received, and remaining quantities for partial receiving support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPurchaseOrderItemsForReceivingResponse> GetPurchaseOrderItemsForReceivingEndpointAsync(string version, System.Guid purchaseOrderId, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (purchaseOrderId == null)
                throw new System.ArgumentNullException("purchaseOrderId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/goodsreceipts/purchase-order/{purchaseOrderId}/items-for-receiving"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/goodsreceipts/purchase-order/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(purchaseOrderId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items-for-receiving");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPurchaseOrderItemsForReceivingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create inventory item
        /// </summary>
        /// <remarks>
        /// Creates a new inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> CreateInventoryItemEndpointAsync(string version, CreateInventoryItemCommand body)
        {
            return CreateInventoryItemEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create inventory item
        /// </summary>
        /// <remarks>
        /// Creates a new inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> CreateInventoryItemEndpointAsync(string version, CreateInventoryItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/inventory/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/inventory/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new inventory transfer
        /// </summary>
        /// <remarks>
        /// Creates a new transfer between warehouses
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateInventoryTransferResponse> CreateInventoryTransferEndpointAsync(string version, CreateInventoryTransferCommand body)
        {
            return CreateInventoryTransferEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new inventory transfer
        /// </summary>
        /// <remarks>
        /// Creates a new transfer between warehouses
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateInventoryTransferResponse> CreateInventoryTransferEndpointAsync(string version, CreateInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInventoryTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update inventory transfer
        /// </summary>
        /// <remarks>
        /// Updates an existing inventory transfer with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateInventoryTransferResponse> UpdateInventoryTransferEndpointAsync(string version, System.Guid id, UpdateInventoryTransferCommand body)
        {
            return UpdateInventoryTransferEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update inventory transfer
        /// </summary>
        /// <remarks>
        /// Updates an existing inventory transfer with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateInventoryTransferResponse> UpdateInventoryTransferEndpointAsync(string version, System.Guid id, UpdateInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateInventoryTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an inventory transfer
        /// </summary>
        /// <remarks>
        /// Deletes an inventory transfer by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteInventoryTransferEndpointAsync(string version, System.Guid id)
        {
            return DeleteInventoryTransferEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an inventory transfer
        /// </summary>
        /// <remarks>
        /// Deletes an inventory transfer by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteInventoryTransferEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get inventory transfer by ID
        /// </summary>
        /// <remarks>
        /// Retrieves an inventory transfer by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetInventoryTransferResponse> GetInventoryTransferEndpointAsync(string version, System.Guid id)
        {
            return GetInventoryTransferEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get inventory transfer by ID
        /// </summary>
        /// <remarks>
        /// Retrieves an inventory transfer by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetInventoryTransferResponse> GetInventoryTransferEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventoryTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of inventory transfers
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of inventory transfers with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetInventoryTransferListResponsePagedList> SearchInventoryTransfersEndpointAsync(string version, SearchInventoryTransfersCommand body)
        {
            return SearchInventoryTransfersEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of inventory transfers
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of inventory transfers with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetInventoryTransferListResponsePagedList> SearchInventoryTransfersEndpointAsync(string version, SearchInventoryTransfersCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetInventoryTransferListResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add item to inventory transfer
        /// </summary>
        /// <remarks>
        /// Adds a grocery item line to an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddInventoryTransferItemResponse> AddInventoryTransferItemEndpointAsync(string version, System.Guid id, AddInventoryTransferItemCommand body)
        {
            return AddInventoryTransferItemEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add item to inventory transfer
        /// </summary>
        /// <remarks>
        /// Adds a grocery item line to an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddInventoryTransferItemResponse> AddInventoryTransferItemEndpointAsync(string version, System.Guid id, AddInventoryTransferItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddInventoryTransferItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove item from inventory transfer
        /// </summary>
        /// <remarks>
        /// Removes a grocery item line from an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RemoveInventoryTransferItemEndpointAsync(string version, System.Guid id, System.Guid itemId)
        {
            return RemoveInventoryTransferItemEndpointAsync(version, id, itemId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove item from inventory transfer
        /// </summary>
        /// <remarks>
        /// Removes a grocery item line from an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RemoveInventoryTransferItemEndpointAsync(string version, System.Guid id, System.Guid itemId, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (itemId == null)
                throw new System.ArgumentNullException("itemId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}/items/{itemId}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update inventory transfer item
        /// </summary>
        /// <remarks>
        /// Updates quantity and unit price of an item within an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateInventoryTransferItemResponse> UpdateInventoryTransferItemEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdateInventoryTransferItemCommand body)
        {
            return UpdateInventoryTransferItemEndpointAsync(version, id, itemId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update inventory transfer item
        /// </summary>
        /// <remarks>
        /// Updates quantity and unit price of an item within an existing inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateInventoryTransferItemResponse> UpdateInventoryTransferItemEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdateInventoryTransferItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (itemId == null)
                throw new System.ArgumentNullException("itemId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}/items/{itemId}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateInventoryTransferItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve inventory transfer
        /// </summary>
        /// <remarks>
        /// Approves an inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApproveInventoryTransferResponse> ApproveInventoryTransferEndpointAsync(string version, System.Guid id, ApproveInventoryTransferCommand body)
        {
            return ApproveInventoryTransferEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve inventory transfer
        /// </summary>
        /// <remarks>
        /// Approves an inventory transfer
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApproveInventoryTransferResponse> ApproveInventoryTransferEndpointAsync(string version, System.Guid id, ApproveInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}/approve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApproveInventoryTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Mark inventory transfer as in-transit
        /// </summary>
        /// <remarks>
        /// Marks an approved inventory transfer as InTransit
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<MarkInTransitInventoryTransferResponse> MarkInTransitInventoryTransferEndpointAsync(string version, System.Guid id, MarkInTransitInventoryTransferCommand body)
        {
            return MarkInTransitInventoryTransferEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Mark inventory transfer as in-transit
        /// </summary>
        /// <remarks>
        /// Marks an approved inventory transfer as InTransit
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MarkInTransitInventoryTransferResponse> MarkInTransitInventoryTransferEndpointAsync(string version, System.Guid id, MarkInTransitInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}/in-transit"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/in-transit");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MarkInTransitInventoryTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Complete inventory transfer
        /// </summary>
        /// <remarks>
        /// Marks an in-transit inventory transfer as completed and records actual arrival
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompleteInventoryTransferResponse> CompleteInventoryTransferEndpointAsync(string version, System.Guid id, CompleteInventoryTransferCommand body)
        {
            return CompleteInventoryTransferEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete inventory transfer
        /// </summary>
        /// <remarks>
        /// Marks an in-transit inventory transfer as completed and records actual arrival
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompleteInventoryTransferResponse> CompleteInventoryTransferEndpointAsync(string version, System.Guid id, CompleteInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}/complete"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/complete");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompleteInventoryTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel inventory transfer
        /// </summary>
        /// <remarks>
        /// Cancels a pending or approved inventory transfer with optional reason
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CancelInventoryTransferResponse> CancelInventoryTransferEndpointAsync(string version, System.Guid id, CancelInventoryTransferCommand body)
        {
            return CancelInventoryTransferEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel inventory transfer
        /// </summary>
        /// <remarks>
        /// Cancels a pending or approved inventory transfer with optional reason
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CancelInventoryTransferResponse> CancelInventoryTransferEndpointAsync(string version, System.Guid id, CancelInventoryTransferCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventory-transfers/{id}/cancel"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventory-transfers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cancel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelInventoryTransferResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new inventory reservation
        /// </summary>
        /// <remarks>
        /// Creates a new inventory reservation to prevent overselling and support order fulfillment.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateInventoryReservationResponse> CreateInventoryReservationEndpointAsync(string version, CreateInventoryReservationCommand body)
        {
            return CreateInventoryReservationEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new inventory reservation
        /// </summary>
        /// <remarks>
        /// Creates a new inventory reservation to prevent overselling and support order fulfillment.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateInventoryReservationResponse> CreateInventoryReservationEndpointAsync(string version, CreateInventoryReservationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventoryreservations"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventoryreservations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInventoryReservationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Release an inventory reservation
        /// </summary>
        /// <remarks>
        /// Releases an active inventory reservation, returning the quantity to available stock.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReleaseInventoryReservationResponse> ReleaseInventoryReservationEndpointAsync(string version, System.Guid id, ReleaseInventoryReservationCommand body)
        {
            return ReleaseInventoryReservationEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Release an inventory reservation
        /// </summary>
        /// <remarks>
        /// Releases an active inventory reservation, returning the quantity to available stock.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReleaseInventoryReservationResponse> ReleaseInventoryReservationEndpointAsync(string version, System.Guid id, ReleaseInventoryReservationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventoryreservations/{id}/release"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventoryreservations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/release");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReleaseInventoryReservationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an inventory reservation
        /// </summary>
        /// <remarks>
        /// Deletes an existing inventory reservation from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeleteInventoryReservationResponse> DeleteInventoryReservationEndpointAsync(string version, System.Guid id)
        {
            return DeleteInventoryReservationEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an inventory reservation
        /// </summary>
        /// <remarks>
        /// Deletes an existing inventory reservation from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeleteInventoryReservationResponse> DeleteInventoryReservationEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventoryreservations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventoryreservations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeleteInventoryReservationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an inventory reservation by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory reservation by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InventoryReservationResponse> GetInventoryReservationEndpointAsync(string version, System.Guid id)
        {
            return GetInventoryReservationEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an inventory reservation by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory reservation by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InventoryReservationResponse> GetInventoryReservationEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventoryreservations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventoryreservations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InventoryReservationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search inventory reservations
        /// </summary>
        /// <remarks>
        /// Searches for inventory reservations with pagination and filtering by reservation number, item, warehouse, type, status, dates, and more.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InventoryReservationDtoPagedList> SearchInventoryReservationsEndpointAsync(string version, SearchInventoryReservationsCommand body)
        {
            return SearchInventoryReservationsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search inventory reservations
        /// </summary>
        /// <remarks>
        /// Searches for inventory reservations with pagination and filtering by reservation number, item, warehouse, type, status, dates, and more.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InventoryReservationDtoPagedList> SearchInventoryReservationsEndpointAsync(string version, SearchInventoryReservationsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventoryreservations/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventoryreservations/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InventoryReservationDtoPagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new inventory transaction
        /// </summary>
        /// <remarks>
        /// Creates a new inventory transaction for stock movement tracking and audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateInventoryTransactionResponse> CreateInventoryTransactionEndpointAsync(string version, CreateInventoryTransactionCommand body)
        {
            return CreateInventoryTransactionEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new inventory transaction
        /// </summary>
        /// <remarks>
        /// Creates a new inventory transaction for stock movement tracking and audit trail.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateInventoryTransactionResponse> CreateInventoryTransactionEndpointAsync(string version, CreateInventoryTransactionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventorytransactions"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventorytransactions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateInventoryTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve an inventory transaction
        /// </summary>
        /// <remarks>
        /// Approves a pending inventory transaction for authorization and compliance.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApproveInventoryTransactionResponse> ApproveInventoryTransactionEndpointAsync(string version, System.Guid id, ApproveInventoryTransactionCommand body)
        {
            return ApproveInventoryTransactionEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve an inventory transaction
        /// </summary>
        /// <remarks>
        /// Approves a pending inventory transaction for authorization and compliance.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApproveInventoryTransactionResponse> ApproveInventoryTransactionEndpointAsync(string version, System.Guid id, ApproveInventoryTransactionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventorytransactions/{id}/approve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventorytransactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApproveInventoryTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reject an inventory transaction
        /// </summary>
        /// <remarks>
        /// Rejects a previously approved inventory transaction, optionally recording the reason for rejection.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RejectInventoryTransactionResponse> RejectInventoryTransactionEndpointAsync(string version, System.Guid id, RejectInventoryTransactionCommand body)
        {
            return RejectInventoryTransactionEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reject an inventory transaction
        /// </summary>
        /// <remarks>
        /// Rejects a previously approved inventory transaction, optionally recording the reason for rejection.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RejectInventoryTransactionResponse> RejectInventoryTransactionEndpointAsync(string version, System.Guid id, RejectInventoryTransactionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventorytransactions/{id}/reject"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventorytransactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reject");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RejectInventoryTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update inventory transaction notes
        /// </summary>
        /// <remarks>
        /// Updates the notes field on an existing inventory transaction for additional documentation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateInventoryTransactionNotesResponse> UpdateInventoryTransactionNotesEndpointAsync(string version, System.Guid id, UpdateInventoryTransactionNotesCommand body)
        {
            return UpdateInventoryTransactionNotesEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update inventory transaction notes
        /// </summary>
        /// <remarks>
        /// Updates the notes field on an existing inventory transaction for additional documentation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateInventoryTransactionNotesResponse> UpdateInventoryTransactionNotesEndpointAsync(string version, System.Guid id, UpdateInventoryTransactionNotesCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventorytransactions/{id}/notes"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventorytransactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/notes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateInventoryTransactionNotesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an inventory transaction
        /// </summary>
        /// <remarks>
        /// Deletes an existing inventory transaction from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeleteInventoryTransactionResponse> DeleteInventoryTransactionEndpointAsync(string version, System.Guid id)
        {
            return DeleteInventoryTransactionEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an inventory transaction
        /// </summary>
        /// <remarks>
        /// Deletes an existing inventory transaction from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeleteInventoryTransactionResponse> DeleteInventoryTransactionEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventorytransactions/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventorytransactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeleteInventoryTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an inventory transaction by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory transaction by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InventoryTransactionResponse> GetInventoryTransactionEndpointAsync(string version, System.Guid id)
        {
            return GetInventoryTransactionEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an inventory transaction by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory transaction by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InventoryTransactionResponse> GetInventoryTransactionEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventorytransactions/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventorytransactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InventoryTransactionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search inventory transactions
        /// </summary>
        /// <remarks>
        /// Searches for inventory transactions with pagination and filtering by transaction number, item, warehouse, type, date range, approval status, and cost range.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InventoryTransactionDtoPagedList> SearchInventoryTransactionsEndpointAsync(string version, SearchInventoryTransactionsCommand body)
        {
            return SearchInventoryTransactionsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search inventory transactions
        /// </summary>
        /// <remarks>
        /// Searches for inventory transactions with pagination and filtering by transaction number, item, warehouse, type, date range, approval status, and cost range.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InventoryTransactionDtoPagedList> SearchInventoryTransactionsEndpointAsync(string version, SearchInventoryTransactionsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/inventorytransactions/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/inventorytransactions/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InventoryTransactionDtoPagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new item
        /// </summary>
        /// <remarks>
        /// Creates a new inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateItemResponse> CreateItemEndpointAsync(string version, CreateItemCommand body)
        {
            return CreateItemEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new item
        /// </summary>
        /// <remarks>
        /// Creates a new inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateItemResponse> CreateItemEndpointAsync(string version, CreateItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing item
        /// </summary>
        /// <remarks>
        /// Updates an existing inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateItemResponse> UpdateItemEndpointAsync(string version, System.Guid id, UpdateItemCommand body)
        {
            return UpdateItemEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing item
        /// </summary>
        /// <remarks>
        /// Updates an existing inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateItemResponse> UpdateItemEndpointAsync(string version, System.Guid id, UpdateItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/items/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an item
        /// </summary>
        /// <remarks>
        /// Deletes an inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> DeleteItemEndpointAsync(string version, System.Guid id)
        {
            return DeleteItemEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an item
        /// </summary>
        /// <remarks>
        /// Deletes an inventory item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> DeleteItemEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/items/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get item by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory item by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ItemResponse> GetItemEndpointAsync(string version, System.Guid id)
        {
            return GetItemEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get item by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific inventory item by its ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemResponse> GetItemEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/items/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search items
        /// </summary>
        /// <remarks>
        /// Searches for inventory items with pagination and filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ItemResponsePagedList> SearchItemsEndpointAsync(string version, SearchItemsCommand body)
        {
            return SearchItemsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search items
        /// </summary>
        /// <remarks>
        /// Searches for inventory items with pagination and filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemResponsePagedList> SearchItemsEndpointAsync(string version, SearchItemsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/items/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/items/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import items from Excel file
        /// </summary>
        /// <remarks>
        /// Imports items from an Excel file with validation. Returns ImportResponse with successful/failed counts and detailed error messages.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ImportResponse> ImportItemsEndpointAsync(string version, ImportItemsCommand body)
        {
            return ImportItemsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import items from Excel file
        /// </summary>
        /// <remarks>
        /// Imports items from an Excel file with validation. Returns ImportResponse with successful/failed counts and detailed error messages.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ImportResponse> ImportItemsEndpointAsync(string version, ImportItemsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/items/import"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/items/import");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ImportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Export items to Excel file
        /// </summary>
        /// <remarks>
        /// Exports items to Excel format with optional filtering by category, supplier, price range, and other criteria. Returns an ExportResponse with file data.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ExportResponse> ExportItemsEndpointAsync(string version, ExportItemsQuery body)
        {
            return ExportItemsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export items to Excel file
        /// </summary>
        /// <remarks>
        /// Exports items to Excel format with optional filtering by category, supplier, price range, and other criteria. Returns an ExportResponse with file data.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ExportResponse> ExportItemsEndpointAsync(string version, ExportItemsQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/items/export"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/items/export");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExportResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ExportResponse>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Creates a new relationship between an item and a supplier with pricing and lead time details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateItemSupplierResponse> CreateItemSupplierEndpointAsync(string version, CreateItemSupplierCommand body)
        {
            return CreateItemSupplierEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Creates a new relationship between an item and a supplier with pricing and lead time details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateItemSupplierResponse> CreateItemSupplierEndpointAsync(string version, CreateItemSupplierCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/itemsuppliers"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/itemsuppliers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateItemSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Updates pricing, lead time, and other details for an existing item-supplier relationship
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateItemSupplierResponse> UpdateItemSupplierEndpointAsync(string version, System.Guid id, UpdateItemSupplierCommand body)
        {
            return UpdateItemSupplierEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Updates pricing, lead time, and other details for an existing item-supplier relationship
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateItemSupplierResponse> UpdateItemSupplierEndpointAsync(string version, System.Guid id, UpdateItemSupplierCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/itemsuppliers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/itemsuppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateItemSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Removes an item-supplier relationship from the system
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteItemSupplierEndpointAsync(string version, System.Guid id)
        {
            return DeleteItemSupplierEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an item-supplier relationship
        /// </summary>
        /// <remarks>
        /// Removes an item-supplier relationship from the system
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteItemSupplierEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/itemsuppliers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/itemsuppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an item-supplier relationship by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific item-supplier relationship
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ItemSupplierResponse> GetItemSupplierEndpointAsync(string version, System.Guid id)
        {
            return GetItemSupplierEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an item-supplier relationship by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific item-supplier relationship
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemSupplierResponse> GetItemSupplierEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/itemsuppliers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/itemsuppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search item-supplier relationships
        /// </summary>
        /// <remarks>
        /// Search and filter item-supplier relationships with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ItemSupplierResponsePagedList> SearchItemSuppliersEndpointAsync(string version, SearchItemSuppliersCommand body)
        {
            return SearchItemSuppliersEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search item-supplier relationships
        /// </summary>
        /// <remarks>
        /// Search and filter item-supplier relationships with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ItemSupplierResponsePagedList> SearchItemSuppliersEndpointAsync(string version, SearchItemSuppliersCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/itemsuppliers/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/itemsuppliers/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ItemSupplierResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new lot number
        /// </summary>
        /// <remarks>
        /// Creates a new lot/batch number for inventory traceability and expiration management
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateLotNumberResponse> CreateLotNumberEndpointAsync(string version, CreateLotNumberCommand body)
        {
            return CreateLotNumberEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new lot number
        /// </summary>
        /// <remarks>
        /// Creates a new lot/batch number for inventory traceability and expiration management
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateLotNumberResponse> CreateLotNumberEndpointAsync(string version, CreateLotNumberCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/lotnumbers"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/lotnumbers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateLotNumberResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a lot number
        /// </summary>
        /// <remarks>
        /// Updates lot status and quality notes
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateLotNumberResponse> UpdateLotNumberEndpointAsync(string version, System.Guid id, UpdateLotNumberCommand body)
        {
            return UpdateLotNumberEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a lot number
        /// </summary>
        /// <remarks>
        /// Updates lot status and quality notes
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateLotNumberResponse> UpdateLotNumberEndpointAsync(string version, System.Guid id, UpdateLotNumberCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/lotnumbers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/lotnumbers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateLotNumberResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a lot number
        /// </summary>
        /// <remarks>
        /// Removes a lot number from the system
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteLotNumberEndpointAsync(string version, System.Guid id)
        {
            return DeleteLotNumberEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a lot number
        /// </summary>
        /// <remarks>
        /// Removes a lot number from the system
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteLotNumberEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/lotnumbers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/lotnumbers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a lot number by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific lot/batch number
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LotNumberResponse> GetLotNumberEndpointAsync(string version, System.Guid id)
        {
            return GetLotNumberEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a lot number by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific lot/batch number
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LotNumberResponse> GetLotNumberEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/lotnumbers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/lotnumbers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LotNumberResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search lot numbers
        /// </summary>
        /// <remarks>
        /// Search and filter lot numbers with expiration tracking and pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LotNumberResponsePagedList> SearchLotNumbersEndpointAsync(string version, SearchLotNumbersCommand body)
        {
            return SearchLotNumbersEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search lot numbers
        /// </summary>
        /// <remarks>
        /// Search and filter lot numbers with expiration tracking and pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LotNumberResponsePagedList> SearchLotNumbersEndpointAsync(string version, SearchLotNumbersCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/lotnumbers/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/lotnumbers/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LotNumberResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new payee
        /// </summary>
        /// <remarks>
        /// Creates a new payee in the accounting system with comprehensive validation and returns the created payee ID.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeeCreateResponse> PayeeCreateEndpointAsync(string version, PayeeCreateCommand body)
        {
            return PayeeCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new payee
        /// </summary>
        /// <remarks>
        /// Creates a new payee in the accounting system with comprehensive validation and returns the created payee ID.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeeCreateResponse> PayeeCreateEndpointAsync(string version, PayeeCreateCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payees"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payees");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeeCreateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an existing payee
        /// </summary>
        /// <remarks>
        /// Updates an existing payee in the accounting system with comprehensive validation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeeUpdateResponse> PayeeUpdateEndpointAsync(string version, System.Guid id, PayeeUpdateCommand body)
        {
            return PayeeUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing payee
        /// </summary>
        /// <remarks>
        /// Updates an existing payee in the accounting system with comprehensive validation.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeeUpdateResponse> PayeeUpdateEndpointAsync(string version, System.Guid id, PayeeUpdateCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payees/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeeUpdateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a payee
        /// </summary>
        /// <remarks>
        /// Deletes a payee from the accounting system. Returns 204 No Content on successful deletion.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PayeeDeleteEndpointAsync(string version, System.Guid id)
        {
            return PayeeDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a payee
        /// </summary>
        /// <remarks>
        /// Deletes a payee from the accounting system. Returns 204 No Content on successful deletion.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PayeeDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payees/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Conflict", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a payee by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific payee from the accounting system using its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeeResponse> PayeeGetEndpointAsync(string version, System.Guid id)
        {
            return PayeeGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a payee by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific payee from the accounting system using its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeeResponse> PayeeGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payees/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payees/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search payees with pagination
        /// </summary>
        /// <remarks>
        /// Searches payees with comprehensive filtering capabilities including keyword search, payee code, name, expense account code, and TIN filters with pagination support.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PayeeResponsePagedList> PayeeSearchEndpointAsync(string version, PayeeSearchCommand body)
        {
            return PayeeSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search payees with pagination
        /// </summary>
        /// <remarks>
        /// Searches payees with comprehensive filtering capabilities including keyword search, payee code, name, expense account code, and TIN filters with pagination support.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PayeeResponsePagedList> PayeeSearchEndpointAsync(string version, PayeeSearchCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payees/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payees/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PayeeResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Import payees from Excel file
        /// </summary>
        /// <remarks>
        /// Imports payees from an Excel (.xlsx) file with validation, duplicate checking, and TIN validation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<object> PayeeImportEndpointAsync(string version, ImportPayeesCommand body)
        {
            return PayeeImportEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import payees from Excel file
        /// </summary>
        /// <remarks>
        /// Imports payees from an Excel (.xlsx) file with validation, duplicate checking, and TIN validation
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<object> PayeeImportEndpointAsync(string version, ImportPayeesCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payees/import"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payees/import");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Export payees to Excel file
        /// </summary>
        /// <remarks>
        /// Exports payees to Excel (.xlsx) file with optional filtering by expense account, search criteria, TIN presence, and active status
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> PayeeExportEndpointAsync(string version, ExportPayeesQuery body)
        {
            return PayeeExportEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export payees to Excel file
        /// </summary>
        /// <remarks>
        /// Exports payees to Excel (.xlsx) file with optional filtering by expense account, search criteria, TIN presence, and active status
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> PayeeExportEndpointAsync(string version, ExportPayeesQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payees/export"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payees/export");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await ReadAsStreamAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a payment allocation by id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PaymentAllocationResponse> PaymentAllocationGetEndpointAsync(string version, System.Guid id)
        {
            return PaymentAllocationGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a payment allocation by id
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaymentAllocationResponse> PaymentAllocationGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payment-allocations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payment-allocations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaymentAllocationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a payment allocation
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task PaymentAllocationDeleteEndpointAsync(string version, System.Guid id)
        {
            return PaymentAllocationDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a payment allocation
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task PaymentAllocationDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payment-allocations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payment-allocations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Searches payment allocations
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentAllocationResponse>> PaymentAllocationSearchEndpointAsync(string version, SearchPaymentAllocationsQuery body)
        {
            return PaymentAllocationSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Searches payment allocations
        /// </summary>
        /// <remarks>
        /// Endpoints for managing payment allocations
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PaymentAllocationResponse>> PaymentAllocationSearchEndpointAsync(string version, SearchPaymentAllocationsQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payment-allocations/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payment-allocations/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PaymentAllocationResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Allocate a payment
        /// </summary>
        /// <remarks>
        /// Allocate a payment to invoices
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AllocatePaymentEndpointAsync(string version, AllocatePaymentCommand body)
        {
            return AllocatePaymentEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allocate a payment
        /// </summary>
        /// <remarks>
        /// Allocate a payment to invoices
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AllocatePaymentEndpointAsync(string version, AllocatePaymentCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/payments/allocate"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/payments/allocate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new pick list
        /// </summary>
        /// <remarks>
        /// Creates a new pick list for warehouse order fulfillment.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreatePickListResponse> CreatePickListEndpointAsync(string version, CreatePickListCommand body)
        {
            return CreatePickListEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new pick list
        /// </summary>
        /// <remarks>
        /// Creates a new pick list for warehouse order fulfillment.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreatePickListResponse> CreatePickListEndpointAsync(string version, CreatePickListCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/picklists"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/picklists");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatePickListResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add item to pick list
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing pick list. The pick list must be in 'Created' status. Creates PickListItem as a separate aggregate.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddPickListItemResponse> AddPickListItemEndpointAsync(string version, System.Guid id, AddPickListItemCommand body)
        {
            return AddPickListItemEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add item to pick list
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing pick list. The pick list must be in 'Created' status. Creates PickListItem as a separate aggregate.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddPickListItemResponse> AddPickListItemEndpointAsync(string version, System.Guid id, AddPickListItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/picklists/{id}/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/picklists/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddPickListItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign pick list to picker
        /// </summary>
        /// <remarks>
        /// Assigns a pick list to a warehouse picker.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AssignPickListResponse> AssignPickListEndpointAsync(string version, System.Guid id, AssignPickListCommand body)
        {
            return AssignPickListEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign pick list to picker
        /// </summary>
        /// <remarks>
        /// Assigns a pick list to a warehouse picker.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AssignPickListResponse> AssignPickListEndpointAsync(string version, System.Guid id, AssignPickListCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/picklists/{id}/assign"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/picklists/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AssignPickListResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start picking
        /// </summary>
        /// <remarks>
        /// Marks a pick list as started and records the start time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StartPickingResponse> StartPickingEndpointAsync(string version, System.Guid id, StartPickingCommand body)
        {
            return StartPickingEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start picking
        /// </summary>
        /// <remarks>
        /// Marks a pick list as started and records the start time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StartPickingResponse> StartPickingEndpointAsync(string version, System.Guid id, StartPickingCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/picklists/{id}/start"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/picklists/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/start");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StartPickingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Complete picking
        /// </summary>
        /// <remarks>
        /// Marks a pick list as completed and records the completion time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompletePickingResponse> CompletePickingEndpointAsync(string version, System.Guid id, CompletePickingCommand body)
        {
            return CompletePickingEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete picking
        /// </summary>
        /// <remarks>
        /// Marks a pick list as completed and records the completion time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompletePickingResponse> CompletePickingEndpointAsync(string version, System.Guid id, CompletePickingCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/picklists/{id}/complete"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/picklists/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/complete");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompletePickingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a pick list
        /// </summary>
        /// <remarks>
        /// Deletes an existing pick list.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeletePickListResponse> DeletePickListEndpointAsync(string version, System.Guid id)
        {
            return DeletePickListEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a pick list
        /// </summary>
        /// <remarks>
        /// Deletes an existing pick list.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeletePickListResponse> DeletePickListEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/picklists/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/picklists/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeletePickListResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get pick list by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific pick list with all items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPickListResponse> GetPickListEndpointAsync(string version, System.Guid id)
        {
            return GetPickListEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get pick list by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific pick list with all items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPickListResponse> GetPickListEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/picklists/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/picklists/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPickListResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search pick lists
        /// </summary>
        /// <remarks>
        /// Searches pick lists with pagination and filtering options.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PickListResponsePagedList> SearchPickListsEndpointAsync(string version, SearchPickListsCommand body)
        {
            return SearchPickListsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search pick lists
        /// </summary>
        /// <remarks>
        /// Searches pick lists with pagination and filtering options.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PickListResponsePagedList> SearchPickListsEndpointAsync(string version, SearchPickListsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/picklists/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/picklists/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PickListResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// creates a product
        /// </summary>
        /// <remarks>
        /// creates a product
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateProductResponse> CreateProductEndpointAsync(string version, CreateProductCommand body)
        {
            return CreateProductEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// creates a product
        /// </summary>
        /// <remarks>
        /// creates a product
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateProductResponse> CreateProductEndpointAsync(string version, CreateProductCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/products"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/products");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// gets product by id
        /// </summary>
        /// <remarks>
        /// gets prodct by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductResponse> GetProductEndpointAsync(string version, System.Guid id)
        {
            return GetProductEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// gets product by id
        /// </summary>
        /// <remarks>
        /// gets prodct by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductResponse> GetProductEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/products/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update a product
        /// </summary>
        /// <remarks>
        /// update a product
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateProductResponse> UpdateProductEndpointAsync(string version, System.Guid id, UpdateProductCommand body)
        {
            return UpdateProductEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a product
        /// </summary>
        /// <remarks>
        /// update a product
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateProductResponse> UpdateProductEndpointAsync(string version, System.Guid id, UpdateProductCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/products/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateProductResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// deletes product by id
        /// </summary>
        /// <remarks>
        /// deletes product by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteProductEndpointAsync(string version, System.Guid id)
        {
            return DeleteProductEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// deletes product by id
        /// </summary>
        /// <remarks>
        /// deletes product by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProductEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/products/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of products
        /// </summary>
        /// <remarks>
        /// Gets a list of products with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProductResponsePagedList> SearchProductsEndpointAsync(string version, SearchProductsCommand body)
        {
            return SearchProductsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of products
        /// </summary>
        /// <remarks>
        /// Gets a list of products with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProductResponsePagedList> SearchProductsEndpointAsync(string version, SearchProductsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/catalog/products/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/catalog/products/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProductResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// create a project
        /// </summary>
        /// <remarks>
        /// create a project
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> ProjectCreateEndpointAsync(string version, CreateProjectCommand body)
        {
            return ProjectCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create a project
        /// </summary>
        /// <remarks>
        /// create a project
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> ProjectCreateEndpointAsync(string version, CreateProjectCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update a project
        /// </summary>
        /// <remarks>
        /// update a project
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> ProjectUpdateEndpointAsync(string version, System.Guid id, UpdateProjectCommand body)
        {
            return ProjectUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update a project
        /// </summary>
        /// <remarks>
        /// update a project
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> ProjectUpdateEndpointAsync(string version, System.Guid id, UpdateProjectCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a project by id
        /// </summary>
        /// <remarks>
        /// Deletes a project by its unique identifier and returns the result.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeleteProjectResponse> ProjectDeleteEndpointAsync(string version, System.Guid id)
        {
            return ProjectDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a project by id
        /// </summary>
        /// <remarks>
        /// Deletes a project by its unique identifier and returns the result.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeleteProjectResponse> ProjectDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeleteProjectResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get a project by id
        /// </summary>
        /// <remarks>
        /// get a project by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectResponse> ProjectGetEndpointAsync(string version, System.Guid id)
        {
            return ProjectGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get a project by id
        /// </summary>
        /// <remarks>
        /// get a project by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectResponse> ProjectGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of projects
        /// </summary>
        /// <remarks>
        /// Gets a list of projects with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectResponsePagedList> ProjectSearchEndpointAsync(string version, SearchProjectsCommand body)
        {
            return ProjectSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of projects
        /// </summary>
        /// <remarks>
        /// Gets a list of projects with pagination and filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectResponsePagedList> ProjectSearchEndpointAsync(string version, SearchProjectsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// create project costing entry
        /// </summary>
        /// <remarks>
        /// Creates a new project costing entry for tracking project expenses
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> ProjectCostingCreateEndpointAsync(string version, CreateProjectCostingCommand body)
        {
            return ProjectCostingCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create project costing entry
        /// </summary>
        /// <remarks>
        /// Creates a new project costing entry for tracking project expenses
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> ProjectCostingCreateEndpointAsync(string version, CreateProjectCostingCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/costing"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/costing");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update project costing entry
        /// </summary>
        /// <remarks>
        /// Updates an existing project costing entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ProjectCostingUpdateEndpointAsync(string version, System.Guid id, UpdateProjectCostingCommand body)
        {
            return ProjectCostingUpdateEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update project costing entry
        /// </summary>
        /// <remarks>
        /// Updates an existing project costing entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ProjectCostingUpdateEndpointAsync(string version, System.Guid id, UpdateProjectCostingCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/costing/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/costing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Bad Request", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// delete project costing entry
        /// </summary>
        /// <remarks>
        /// Deletes a project costing entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ProjectCostingDeleteEndpointAsync(string version, System.Guid id)
        {
            return ProjectCostingDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete project costing entry
        /// </summary>
        /// <remarks>
        /// Deletes a project costing entry
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ProjectCostingDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/costing/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/costing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get project costing entry
        /// </summary>
        /// <remarks>
        /// Gets a single project costing entry by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectCostingResponse> ProjectCostingGetEndpointAsync(string version, System.Guid id)
        {
            return ProjectCostingGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get project costing entry
        /// </summary>
        /// <remarks>
        /// Gets a single project costing entry by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectCostingResponse> ProjectCostingGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/costing/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/costing/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectCostingResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("Not Found", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// search project costing entries
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of project costing entries with filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectCostingResponsePagedList> ProjectCostingSearchEndpointAsync(string version, SearchProjectCostingsQuery body)
        {
            return ProjectCostingSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// search project costing entries
        /// </summary>
        /// <remarks>
        /// Gets a paginated list of project costing entries with filtering support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectCostingResponsePagedList> ProjectCostingSearchEndpointAsync(string version, SearchProjectCostingsQuery body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/projects/costing/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/projects/costing/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectCostingResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new purchase order
        /// </summary>
        /// <remarks>
        /// Creates a new purchase order
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreatePurchaseOrderResponse> CreatePurchaseOrderEndpointAsync(string version, CreatePurchaseOrderCommand body)
        {
            return CreatePurchaseOrderEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new purchase order
        /// </summary>
        /// <remarks>
        /// Creates a new purchase order
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreatePurchaseOrderResponse> CreatePurchaseOrderEndpointAsync(string version, CreatePurchaseOrderCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatePurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a purchase order
        /// </summary>
        /// <remarks>
        /// Updates an existing purchase order
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdatePurchaseOrderResponse> UpdatePurchaseOrderEndpointAsync(string version, System.Guid id, UpdatePurchaseOrderCommand body)
        {
            return UpdatePurchaseOrderEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a purchase order
        /// </summary>
        /// <remarks>
        /// Updates an existing purchase order
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdatePurchaseOrderResponse> UpdatePurchaseOrderEndpointAsync(string version, System.Guid id, UpdatePurchaseOrderCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdatePurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a purchase order
        /// </summary>
        /// <remarks>
        /// Deletes a purchase order by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeletePurchaseOrderEndpointAsync(string version, System.Guid id)
        {
            return DeletePurchaseOrderEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a purchase order
        /// </summary>
        /// <remarks>
        /// Deletes a purchase order by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePurchaseOrderEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a purchase order
        /// </summary>
        /// <remarks>
        /// Retrieves a purchase order by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PurchaseOrderResponse> GetPurchaseOrderEndpointAsync(string version, System.Guid id)
        {
            return GetPurchaseOrderEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a purchase order
        /// </summary>
        /// <remarks>
        /// Retrieves a purchase order by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrderResponse> GetPurchaseOrderEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search purchase orders
        /// </summary>
        /// <remarks>
        /// Search and filter purchase orders with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PurchaseOrderResponsePagedList> SearchPurchaseOrdersEndpointAsync(string version, SearchPurchaseOrdersCommand body)
        {
            return SearchPurchaseOrdersEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search purchase orders
        /// </summary>
        /// <remarks>
        /// Search and filter purchase orders with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseOrderResponsePagedList> SearchPurchaseOrdersEndpointAsync(string version, SearchPurchaseOrdersCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseOrderResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add an item to a purchase order
        /// </summary>
        /// <remarks>
        /// Adds a grocery item line to an existing purchase order. If the item already exists the aggregate will increase the quantity.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddPurchaseOrderItemResponse> AddPurchaseOrderItemEndpointAsync(string version, System.Guid id, AddPurchaseOrderItemCommand body)
        {
            return AddPurchaseOrderItemEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an item to a purchase order
        /// </summary>
        /// <remarks>
        /// Adds a grocery item line to an existing purchase order. If the item already exists the aggregate will increase the quantity.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddPurchaseOrderItemResponse> AddPurchaseOrderItemEndpointAsync(string version, System.Guid id, AddPurchaseOrderItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddPurchaseOrderItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all items for a purchase order
        /// </summary>
        /// <remarks>
        /// Retrieves all line items associated with a purchase order, including grocery item details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PurchaseOrderItemResponse>> GetPurchaseOrderItemsEndpointAsync(string version, System.Guid id)
        {
            return GetPurchaseOrderItemsEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all items for a purchase order
        /// </summary>
        /// <remarks>
        /// Retrieves all line items associated with a purchase order, including grocery item details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PurchaseOrderItemResponse>> GetPurchaseOrderItemsEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PurchaseOrderItemResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove an item from a purchase order
        /// </summary>
        /// <remarks>
        /// Removes an item line from a purchase order. Only allowed for modifiable orders.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RemovePurchaseOrderItemEndpointAsync(string version, System.Guid id, System.Guid itemId)
        {
            return RemovePurchaseOrderItemEndpointAsync(version, id, itemId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an item from a purchase order
        /// </summary>
        /// <remarks>
        /// Removes an item line from a purchase order. Only allowed for modifiable orders.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RemovePurchaseOrderItemEndpointAsync(string version, System.Guid id, System.Guid itemId, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (itemId == null)
                throw new System.ArgumentNullException("itemId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/items/{itemId}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update item quantity
        /// </summary>
        /// <remarks>
        /// Updates the ordered quantity for a specific purchase order line item. Quantity cannot be less than already received quantity.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdatePurchaseOrderItemQuantityEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdatePurchaseOrderItemQuantityCommand body)
        {
            return UpdatePurchaseOrderItemQuantityEndpointAsync(version, id, itemId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update item quantity
        /// </summary>
        /// <remarks>
        /// Updates the ordered quantity for a specific purchase order line item. Quantity cannot be less than already received quantity.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdatePurchaseOrderItemQuantityEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdatePurchaseOrderItemQuantityCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (itemId == null)
                throw new System.ArgumentNullException("itemId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/items/{itemId}/quantity"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/quantity");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update item price and discount
        /// </summary>
        /// <remarks>
        /// Updates the unit price and optional discount on a specific purchase order line item.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdatePurchaseOrderItemPriceEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdatePurchaseOrderItemPriceCommand body)
        {
            return UpdatePurchaseOrderItemPriceEndpointAsync(version, id, itemId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update item price and discount
        /// </summary>
        /// <remarks>
        /// Updates the unit price and optional discount on a specific purchase order line item.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdatePurchaseOrderItemPriceEndpointAsync(string version, System.Guid id, System.Guid itemId, UpdatePurchaseOrderItemPriceCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (itemId == null)
                throw new System.ArgumentNullException("itemId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/items/{itemId}/price"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/price");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Submit a purchase order for approval
        /// </summary>
        /// <remarks>
        /// Submits a draft purchase order for approval, changing status from Draft to Submitted
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SubmitPurchaseOrderResponse> SubmitPurchaseOrderEndpointAsync(string version, System.Guid id, SubmitPurchaseOrderCommand body)
        {
            return SubmitPurchaseOrderEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Submit a purchase order for approval
        /// </summary>
        /// <remarks>
        /// Submits a draft purchase order for approval, changing status from Draft to Submitted
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SubmitPurchaseOrderResponse> SubmitPurchaseOrderEndpointAsync(string version, System.Guid id, SubmitPurchaseOrderCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/submit"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/submit");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SubmitPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve a submitted purchase order
        /// </summary>
        /// <remarks>
        /// Approves a submitted purchase order, changing status from Submitted to Approved
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApprovePurchaseOrderResponse> ApprovePurchaseOrderEndpointAsync(string version, System.Guid id, ApprovePurchaseOrderRequest body)
        {
            return ApprovePurchaseOrderEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a submitted purchase order
        /// </summary>
        /// <remarks>
        /// Approves a submitted purchase order, changing status from Submitted to Approved
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApprovePurchaseOrderResponse> ApprovePurchaseOrderEndpointAsync(string version, System.Guid id, ApprovePurchaseOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/approve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApprovePurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Send an approved purchase order to supplier
        /// </summary>
        /// <remarks>
        /// Sends an approved purchase order to the supplier, changing status from Approved to Sent
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SendPurchaseOrderResponse> SendPurchaseOrderEndpointAsync(string version, System.Guid id, SendPurchaseOrderRequest body)
        {
            return SendPurchaseOrderEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an approved purchase order to supplier
        /// </summary>
        /// <remarks>
        /// Sends an approved purchase order to the supplier, changing status from Approved to Sent
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SendPurchaseOrderResponse> SendPurchaseOrderEndpointAsync(string version, System.Guid id, SendPurchaseOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/send"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/send");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SendPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Receive a purchase order delivery
        /// </summary>
        /// <remarks>
        /// Marks a sent purchase order as received and records the actual delivery date
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReceivePurchaseOrderResponse> ReceivePurchaseOrderEndpointAsync(string version, System.Guid id, ReceivePurchaseOrderRequest body)
        {
            return ReceivePurchaseOrderEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Receive a purchase order delivery
        /// </summary>
        /// <remarks>
        /// Marks a sent purchase order as received and records the actual delivery date
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReceivePurchaseOrderResponse> ReceivePurchaseOrderEndpointAsync(string version, System.Guid id, ReceivePurchaseOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/receive"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/receive");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReceivePurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Record received quantity for an item
        /// </summary>
        /// <remarks>
        /// Sets the received quantity for a purchase order line item (can be partial or complete).
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ReceivePurchaseOrderItemQuantityEndpointAsync(string version, System.Guid id, System.Guid itemId, ReceivePurchaseOrderItemQuantityCommand body)
        {
            return ReceivePurchaseOrderItemQuantityEndpointAsync(version, id, itemId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Record received quantity for an item
        /// </summary>
        /// <remarks>
        /// Sets the received quantity for a purchase order line item (can be partial or complete).
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ReceivePurchaseOrderItemQuantityEndpointAsync(string version, System.Guid id, System.Guid itemId, ReceivePurchaseOrderItemQuantityCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (itemId == null)
                throw new System.ArgumentNullException("itemId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/items/{itemId}/receive"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(itemId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/receive");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Cancel a purchase order
        /// </summary>
        /// <remarks>
        /// Cancels a purchase order that hasn't been received yet
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CancelPurchaseOrderResponse> CancelPurchaseOrderEndpointAsync(string version, System.Guid id, CancelPurchaseOrderRequest body)
        {
            return CancelPurchaseOrderEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel a purchase order
        /// </summary>
        /// <remarks>
        /// Cancels a purchase order that hasn't been received yet
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CancelPurchaseOrderResponse> CancelPurchaseOrderEndpointAsync(string version, System.Guid id, CancelPurchaseOrderRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/cancel"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/cancel");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CancelPurchaseOrderResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate PDF report for a purchase order
        /// </summary>
        /// <remarks>
        /// Generates a professional PDF report for the specified purchase order including all items and approval information.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GeneratePurchaseOrderPdfEndpointAsync(string version, System.Guid id)
        {
            return GeneratePurchaseOrderPdfEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate PDF report for a purchase order
        /// </summary>
        /// <remarks>
        /// Generates a professional PDF report for the specified purchase order including all items and approval information.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GeneratePurchaseOrderPdfEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/purchase-orders/{id}/pdf"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/purchase-orders/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/pdf");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await ReadAsStreamAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new put-away task
        /// </summary>
        /// <remarks>
        /// Creates a new put-away task for warehouse operations.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreatePutAwayTaskResponse> CreatePutAwayTaskEndpointAsync(string version, CreatePutAwayTaskCommand body)
        {
            return CreatePutAwayTaskEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new put-away task
        /// </summary>
        /// <remarks>
        /// Creates a new put-away task for warehouse operations.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreatePutAwayTaskResponse> CreatePutAwayTaskEndpointAsync(string version, CreatePutAwayTaskCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/put-away-tasks"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/put-away-tasks");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreatePutAwayTaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add an item to a put-away task
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing put-away task for warehouse operations.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddPutAwayTaskItemResponse> AddPutAwayTaskItemEndpointAsync(string version, System.Guid id, AddPutAwayTaskItemCommand body)
        {
            return AddPutAwayTaskItemEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add an item to a put-away task
        /// </summary>
        /// <remarks>
        /// Adds an item to an existing put-away task for warehouse operations.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddPutAwayTaskItemResponse> AddPutAwayTaskItemEndpointAsync(string version, System.Guid id, AddPutAwayTaskItemCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/put-away-tasks/{id}/items"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/put-away-tasks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/items");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddPutAwayTaskItemResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Assign a put-away task to a worker
        /// </summary>
        /// <remarks>
        /// Assigns a put-away task to a warehouse worker for execution.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AssignPutAwayTaskResponse> AssignPutAwayTaskEndpointAsync(string version, System.Guid id, AssignPutAwayTaskCommand body)
        {
            return AssignPutAwayTaskEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign a put-away task to a worker
        /// </summary>
        /// <remarks>
        /// Assigns a put-away task to a warehouse worker for execution.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AssignPutAwayTaskResponse> AssignPutAwayTaskEndpointAsync(string version, System.Guid id, AssignPutAwayTaskCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/put-away-tasks/{id}/assign"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/put-away-tasks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/assign");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AssignPutAwayTaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Start a put-away task
        /// </summary>
        /// <remarks>
        /// Marks a put-away task as started and records the start time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StartPutAwayResponse> StartPutAwayEndpointAsync(string version, System.Guid id, StartPutAwayCommand body)
        {
            return StartPutAwayEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Start a put-away task
        /// </summary>
        /// <remarks>
        /// Marks a put-away task as started and records the start time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StartPutAwayResponse> StartPutAwayEndpointAsync(string version, System.Guid id, StartPutAwayCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/put-away-tasks/{id}/start"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/put-away-tasks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/start");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StartPutAwayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Complete a put-away task
        /// </summary>
        /// <remarks>
        /// Marks a put-away task as completed and records the completion time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CompletePutAwayResponse> CompletePutAwayEndpointAsync(string version, System.Guid id, CompletePutAwayCommand body)
        {
            return CompletePutAwayEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Complete a put-away task
        /// </summary>
        /// <remarks>
        /// Marks a put-away task as completed and records the completion time.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CompletePutAwayResponse> CompletePutAwayEndpointAsync(string version, System.Guid id, CompletePutAwayCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/put-away-tasks/{id}/complete"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/put-away-tasks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/complete");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CompletePutAwayResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a put-away task
        /// </summary>
        /// <remarks>
        /// Deletes a put-away task and all associated items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeletePutAwayTaskResponse> DeletePutAwayTaskEndpointAsync(string version, System.Guid id)
        {
            return DeletePutAwayTaskEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a put-away task
        /// </summary>
        /// <remarks>
        /// Deletes a put-away task and all associated items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeletePutAwayTaskResponse> DeletePutAwayTaskEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/put-away-tasks/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/put-away-tasks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeletePutAwayTaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a put-away task by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific put-away task with all items and details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetPutAwayTaskResponse> GetPutAwayTaskEndpointAsync(string version, System.Guid id)
        {
            return GetPutAwayTaskEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a put-away task by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific put-away task with all items and details.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetPutAwayTaskResponse> GetPutAwayTaskEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/put-away-tasks/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/put-away-tasks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetPutAwayTaskResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search put-away tasks
        /// </summary>
        /// <remarks>
        /// Searches put-away tasks with filtering, sorting, and pagination.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PutAwayTaskResponsePagedList> SearchPutAwayTasksEndpointAsync(string version, SearchPutAwayTasksCommand body)
        {
            return SearchPutAwayTasksEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search put-away tasks
        /// </summary>
        /// <remarks>
        /// Searches put-away tasks with filtering, sorting, and pagination.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PutAwayTaskResponsePagedList> SearchPutAwayTasksEndpointAsync(string version, SearchPutAwayTasksCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/put-away-tasks/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/put-away-tasks/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PutAwayTaskResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Create a new recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> RecurringJournalEntryCreateEndpointAsync(string version, CreateRecurringJournalEntryCommand body)
        {
            return RecurringJournalEntryCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Create a new recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> RecurringJournalEntryCreateEndpointAsync(string version, CreateRecurringJournalEntryCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/recurring-journal-entries"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/recurring-journal-entries");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Get a recurring journal entry template by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RecurringJournalEntryResponse> RecurringJournalEntryGetEndpointAsync(string version, System.Guid id)
        {
            return RecurringJournalEntryGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Get a recurring journal entry template by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RecurringJournalEntryResponse> RecurringJournalEntryGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/recurring-journal-entries/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/recurring-journal-entries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecurringJournalEntryResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Delete a recurring journal entry template by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RecurringJournalEntryDeleteEndpointAsync(string version, System.Guid id)
        {
            return RecurringJournalEntryDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Delete a recurring journal entry template by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RecurringJournalEntryDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/recurring-journal-entries/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/recurring-journal-entries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search recurring journal entry templates
        /// </summary>
        /// <remarks>
        /// Search and filter recurring journal entry templates with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RecurringJournalEntryResponsePagedList> RecurringJournalEntrySearchEndpointAsync(string version, SearchRecurringJournalEntriesCommand body)
        {
            return RecurringJournalEntrySearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search recurring journal entry templates
        /// </summary>
        /// <remarks>
        /// Search and filter recurring journal entry templates with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RecurringJournalEntryResponsePagedList> RecurringJournalEntrySearchEndpointAsync(string version, SearchRecurringJournalEntriesCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/recurring-journal-entries/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/recurring-journal-entries/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecurringJournalEntryResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Approve a recurring journal entry template for use
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RecurringJournalEntryApproveEndpointAsync(string version, System.Guid id, ApproveRecurringJournalEntryCommand body)
        {
            return RecurringJournalEntryApproveEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Approve a recurring journal entry template for use
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RecurringJournalEntryApproveEndpointAsync(string version, System.Guid id, ApproveRecurringJournalEntryCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/recurring-journal-entries/{id}/approve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/recurring-journal-entries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Suspend a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Temporarily suspend a recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RecurringJournalEntrySuspendEndpointAsync(string version, System.Guid id, SuspendRecurringJournalEntryCommand body)
        {
            return RecurringJournalEntrySuspendEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Suspend a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Temporarily suspend a recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RecurringJournalEntrySuspendEndpointAsync(string version, System.Guid id, SuspendRecurringJournalEntryCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/recurring-journal-entries/{id}/suspend"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/recurring-journal-entries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/suspend");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reactivate a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Reactivate a suspended recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task RecurringJournalEntryReactivateEndpointAsync(string version, System.Guid id)
        {
            return RecurringJournalEntryReactivateEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reactivate a recurring journal entry template
        /// </summary>
        /// <remarks>
        /// Reactivate a suspended recurring journal entry template
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task RecurringJournalEntryReactivateEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/recurring-journal-entries/{id}/reactivate"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/recurring-journal-entries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reactivate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get role details by ID
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a role by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RoleDto> GetRoleByIdEndpointAsync(string id)
        {
            return GetRoleByIdEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get role details by ID
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a role by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleDto> GetRoleByIdEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/roles/{id}"
                    urlBuilder_.Append("api/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a role by ID
        /// </summary>
        /// <remarks>
        /// Remove a role from the system by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteRoleEndpointAsync(string id)
        {
            return DeleteRoleEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a role by ID
        /// </summary>
        /// <remarks>
        /// Remove a role from the system by its ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteRoleEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/roles/{id}"
                    urlBuilder_.Append("api/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of all roles
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all roles available in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleDto>> GetRolesEndpointAsync()
        {
            return GetRolesEndpointAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of all roles
        /// </summary>
        /// <remarks>
        /// Retrieve a list of all roles available in the system.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleDto>> GetRolesEndpointAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/roles"
                    urlBuilder_.Append("api/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleDto>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create or update a role
        /// </summary>
        /// <remarks>
        /// Create a new role or update an existing role.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RoleDto> CreateOrUpdateRoleEndpointAsync(CreateOrUpdateRoleCommand body)
        {
            return CreateOrUpdateRoleEndpointAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update a role
        /// </summary>
        /// <remarks>
        /// Create a new role or update an existing role.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleDto> CreateOrUpdateRoleEndpointAsync(CreateOrUpdateRoleCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/roles"
                    urlBuilder_.Append("api/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get role permissions
        /// </summary>
        /// <remarks>
        /// get role permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RoleDto> GetRolePermissionsEndpointAsync(string id)
        {
            return GetRolePermissionsEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get role permissions
        /// </summary>
        /// <remarks>
        /// get role permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleDto> GetRolePermissionsEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/roles/{id}/permissions"
                    urlBuilder_.Append("api/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleDto>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update role permissions
        /// </summary>
        /// <remarks>
        /// update role permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateRolePermissionsEndpointAsync(string id, UpdatePermissionsCommand body)
        {
            return UpdateRolePermissionsEndpointAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update role permissions
        /// </summary>
        /// <remarks>
        /// update role permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateRolePermissionsEndpointAsync(string id, UpdatePermissionsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/roles/{id}/permissions"
                    urlBuilder_.Append("api/roles/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new serial number
        /// </summary>
        /// <remarks>
        /// Creates a new serial number for unit-level tracking of inventory items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateSerialNumberResponse> CreateSerialNumberEndpointAsync(string version, CreateSerialNumberCommand body)
        {
            return CreateSerialNumberEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new serial number
        /// </summary>
        /// <remarks>
        /// Creates a new serial number for unit-level tracking of inventory items.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateSerialNumberResponse> CreateSerialNumberEndpointAsync(string version, CreateSerialNumberCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/serialnumbers"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/serialnumbers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateSerialNumberResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a serial number
        /// </summary>
        /// <remarks>
        /// Updates an existing serial number's status, location, or other properties.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateSerialNumberResponse> UpdateSerialNumberEndpointAsync(string version, System.Guid id, UpdateSerialNumberCommand body)
        {
            return UpdateSerialNumberEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a serial number
        /// </summary>
        /// <remarks>
        /// Updates an existing serial number's status, location, or other properties.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateSerialNumberResponse> UpdateSerialNumberEndpointAsync(string version, System.Guid id, UpdateSerialNumberCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/serialnumbers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/serialnumbers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateSerialNumberResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a serial number
        /// </summary>
        /// <remarks>
        /// Deletes an existing serial number from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeleteSerialNumberResponse> DeleteSerialNumberEndpointAsync(string version, System.Guid id)
        {
            return DeleteSerialNumberEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a serial number
        /// </summary>
        /// <remarks>
        /// Deletes an existing serial number from the system.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeleteSerialNumberResponse> DeleteSerialNumberEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/serialnumbers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/serialnumbers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeleteSerialNumberResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a serial number by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific serial number by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SerialNumberResponse> GetSerialNumberEndpointAsync(string version, System.Guid id)
        {
            return GetSerialNumberEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a serial number by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a specific serial number by its unique identifier.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SerialNumberResponse> GetSerialNumberEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/serialnumbers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/serialnumbers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SerialNumberResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search serial numbers
        /// </summary>
        /// <remarks>
        /// Searches for serial numbers with pagination and filtering by serial value, item, warehouse, status, receipt date, warranty status, and external reference.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SerialNumberResponsePagedList> SearchSerialNumbersEndpointAsync(string version, SearchSerialNumbersCommand body)
        {
            return SearchSerialNumbersEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search serial numbers
        /// </summary>
        /// <remarks>
        /// Searches for serial numbers with pagination and filtering by serial value, item, warehouse, status, receipt date, warranty status, and external reference.
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SerialNumberResponsePagedList> SearchSerialNumbersEndpointAsync(string version, SearchSerialNumbersCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/serialnumbers/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/serialnumbers/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SerialNumberResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new stock adjustment
        /// </summary>
        /// <remarks>
        /// Creates a stock adjustment for inventory
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateStockAdjustmentResponse> CreateStockAdjustmentEndpointAsync(string version, CreateStockAdjustmentCommand body)
        {
            return CreateStockAdjustmentEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new stock adjustment
        /// </summary>
        /// <remarks>
        /// Creates a stock adjustment for inventory
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateStockAdjustmentResponse> CreateStockAdjustmentEndpointAsync(string version, CreateStockAdjustmentCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stock-adjustments"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stock-adjustments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateStockAdjustmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a stock adjustment
        /// </summary>
        /// <remarks>
        /// Updates an existing stock adjustment
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateStockAdjustmentResponse> UpdateStockAdjustmentEndpointAsync(string version, System.Guid id, UpdateStockAdjustmentCommand body)
        {
            return UpdateStockAdjustmentEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a stock adjustment
        /// </summary>
        /// <remarks>
        /// Updates an existing stock adjustment
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateStockAdjustmentResponse> UpdateStockAdjustmentEndpointAsync(string version, System.Guid id, UpdateStockAdjustmentCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stock-adjustments/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stock-adjustments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateStockAdjustmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a stock adjustment
        /// </summary>
        /// <remarks>
        /// Deletes a stock adjustment by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteStockAdjustmentEndpointAsync(string version, System.Guid id)
        {
            return DeleteStockAdjustmentEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a stock adjustment
        /// </summary>
        /// <remarks>
        /// Deletes a stock adjustment by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteStockAdjustmentEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stock-adjustments/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stock-adjustments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get stock adjustment by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a stock adjustment by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StockAdjustmentResponse> GetStockAdjustmentEndpointAsync(string version, System.Guid id)
        {
            return GetStockAdjustmentEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get stock adjustment by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a stock adjustment by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StockAdjustmentResponse> GetStockAdjustmentEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stock-adjustments/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stock-adjustments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StockAdjustmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search stock adjustments
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of stock adjustments with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StockAdjustmentResponsePagedList> SearchStockAdjustmentsEndpointAsync(string version, SearchStockAdjustmentsCommand body)
        {
            return SearchStockAdjustmentsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search stock adjustments
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of stock adjustments with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StockAdjustmentResponsePagedList> SearchStockAdjustmentsEndpointAsync(string version, SearchStockAdjustmentsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stock-adjustments/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stock-adjustments/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StockAdjustmentResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Approve stock adjustment
        /// </summary>
        /// <remarks>
        /// Approves a stock adjustment and applies changes to inventory
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ApproveStockAdjustmentResponse> ApproveStockAdjustmentEndpointAsync(string version, System.Guid id, ApproveStockAdjustmentCommand body)
        {
            return ApproveStockAdjustmentEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Approve stock adjustment
        /// </summary>
        /// <remarks>
        /// Approves a stock adjustment and applies changes to inventory
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApproveStockAdjustmentResponse> ApproveStockAdjustmentEndpointAsync(string version, System.Guid id, ApproveStockAdjustmentCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stock-adjustments/{id}/approve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stock-adjustments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/approve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApproveStockAdjustmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new stock level record
        /// </summary>
        /// <remarks>
        /// Creates a new stock level tracking record for an item at a specific warehouse/location/bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateStockLevelResponse> CreateStockLevelEndpointAsync(string version, CreateStockLevelCommand body)
        {
            return CreateStockLevelEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new stock level record
        /// </summary>
        /// <remarks>
        /// Creates a new stock level tracking record for an item at a specific warehouse/location/bin
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateStockLevelResponse> CreateStockLevelEndpointAsync(string version, CreateStockLevelCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stocklevels"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stocklevels");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateStockLevelResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a stock level record
        /// </summary>
        /// <remarks>
        /// Updates location/bin/lot/serial assignments for a stock level record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateStockLevelResponse> UpdateStockLevelEndpointAsync(string version, System.Guid id, UpdateStockLevelCommand body)
        {
            return UpdateStockLevelEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a stock level record
        /// </summary>
        /// <remarks>
        /// Updates location/bin/lot/serial assignments for a stock level record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateStockLevelResponse> UpdateStockLevelEndpointAsync(string version, System.Guid id, UpdateStockLevelCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stocklevels/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stocklevels/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateStockLevelResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a stock level record
        /// </summary>
        /// <remarks>
        /// Removes a stock level record (only allowed when quantity is zero)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteStockLevelEndpointAsync(string version, System.Guid id)
        {
            return DeleteStockLevelEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a stock level record
        /// </summary>
        /// <remarks>
        /// Removes a stock level record (only allowed when quantity is zero)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteStockLevelEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stocklevels/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stocklevels/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a stock level by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific stock level record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StockLevelResponse> GetStockLevelEndpointAsync(string version, System.Guid id)
        {
            return GetStockLevelEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a stock level by ID
        /// </summary>
        /// <remarks>
        /// Retrieves detailed information about a specific stock level record
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StockLevelResponse> GetStockLevelEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stocklevels/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stocklevels/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StockLevelResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search stock levels
        /// </summary>
        /// <remarks>
        /// Search and filter stock levels with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StockLevelResponsePagedList> SearchStockLevelsEndpointAsync(string version, SearchStockLevelsCommand body)
        {
            return SearchStockLevelsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search stock levels
        /// </summary>
        /// <remarks>
        /// Search and filter stock levels with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StockLevelResponsePagedList> SearchStockLevelsEndpointAsync(string version, SearchStockLevelsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stocklevels/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stocklevels/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StockLevelResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reserve stock quantity
        /// </summary>
        /// <remarks>
        /// Reserves quantity from available stock for orders or transfers (soft allocation)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReserveStockResponse> ReserveStockEndpointAsync(string version, System.Guid id, ReserveStockCommand body)
        {
            return ReserveStockEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reserve stock quantity
        /// </summary>
        /// <remarks>
        /// Reserves quantity from available stock for orders or transfers (soft allocation)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReserveStockResponse> ReserveStockEndpointAsync(string version, System.Guid id, ReserveStockCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stocklevels/{id}/reserve"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stocklevels/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/reserve");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReserveStockResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Allocate reserved stock
        /// </summary>
        /// <remarks>
        /// Allocates reserved quantity to pick lists (hard allocation)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AllocateStockResponse> AllocateStockEndpointAsync(string version, System.Guid id, AllocateStockCommand body)
        {
            return AllocateStockEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Allocate reserved stock
        /// </summary>
        /// <remarks>
        /// Allocates reserved quantity to pick lists (hard allocation)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AllocateStockResponse> AllocateStockEndpointAsync(string version, System.Guid id, AllocateStockCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stocklevels/{id}/allocate"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stocklevels/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/allocate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AllocateStockResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Release reserved stock
        /// </summary>
        /// <remarks>
        /// Releases reserved quantity back to available (e.g., when order is cancelled)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ReleaseStockResponse> ReleaseStockEndpointAsync(string version, System.Guid id, ReleaseStockCommand body)
        {
            return ReleaseStockEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Release reserved stock
        /// </summary>
        /// <remarks>
        /// Releases reserved quantity back to available (e.g., when order is cancelled)
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ReleaseStockResponse> ReleaseStockEndpointAsync(string version, System.Guid id, ReleaseStockCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/stocklevels/{id}/release"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/stocklevels/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/release");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ReleaseStockResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new supplier
        /// </summary>
        /// <remarks>
        /// Creates a new supplier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateSupplierResponse> CreateSupplierEndpointAsync(string version, CreateSupplierCommand body)
        {
            return CreateSupplierEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new supplier
        /// </summary>
        /// <remarks>
        /// Creates a new supplier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateSupplierResponse> CreateSupplierEndpointAsync(string version, CreateSupplierCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/suppliers"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/suppliers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a supplier
        /// </summary>
        /// <remarks>
        /// Updates an existing supplier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateSupplierResponse> UpdateSupplierEndpointAsync(string version, System.Guid id, UpdateSupplierCommand body)
        {
            return UpdateSupplierEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a supplier
        /// </summary>
        /// <remarks>
        /// Updates an existing supplier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateSupplierResponse> UpdateSupplierEndpointAsync(string version, System.Guid id, UpdateSupplierCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/suppliers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a supplier
        /// </summary>
        /// <remarks>
        /// Deletes a supplier by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteSupplierEndpointAsync(string version, System.Guid id)
        {
            return DeleteSupplierEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a supplier
        /// </summary>
        /// <remarks>
        /// Deletes a supplier by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSupplierEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/suppliers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a supplier
        /// </summary>
        /// <remarks>
        /// Retrieves a supplier by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SupplierResponse> GetSupplierEndpointAsync(string version, System.Guid id)
        {
            return GetSupplierEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a supplier
        /// </summary>
        /// <remarks>
        /// Retrieves a supplier by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SupplierResponse> GetSupplierEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/suppliers/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search Suppliers
        /// </summary>
        /// <remarks>
        /// Searches Suppliers with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SupplierResponsePagedList> SearchSuppliersEndpointAsync(string version, SearchSuppliersCommand body)
        {
            return SearchSuppliersEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search Suppliers
        /// </summary>
        /// <remarks>
        /// Searches Suppliers with pagination and filters
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SupplierResponsePagedList> SearchSuppliersEndpointAsync(string version, SearchSuppliersCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/suppliers/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/suppliers/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SupplierResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Activate a supplier
        /// </summary>
        /// <remarks>
        /// Activates a supplier to allow transactions
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActivateSupplierResponse> ActivateSupplierEndpointAsync(string version, System.Guid id, ActivateSupplierCommand body)
        {
            return ActivateSupplierEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Activate a supplier
        /// </summary>
        /// <remarks>
        /// Activates a supplier to allow transactions
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivateSupplierResponse> ActivateSupplierEndpointAsync(string version, System.Guid id, ActivateSupplierCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/suppliers/{id}/activate"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/activate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivateSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deactivate a supplier
        /// </summary>
        /// <remarks>
        /// Deactivates a supplier to block transactions
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DeactivateSupplierResponse> DeactivateSupplierEndpointAsync(string version, System.Guid id, DeactivateSupplierCommand body)
        {
            return DeactivateSupplierEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deactivate a supplier
        /// </summary>
        /// <remarks>
        /// Deactivates a supplier to block transactions
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DeactivateSupplierResponse> DeactivateSupplierEndpointAsync(string version, System.Guid id, DeactivateSupplierCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/suppliers/{id}/deactivate"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/suppliers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deactivate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeactivateSupplierResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a tax code
        /// </summary>
        /// <remarks>
        /// Create a new tax code with rate and jurisdiction
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Guid> TaxCodeCreateEndpointAsync(string version, CreateTaxCodeCommand body)
        {
            return TaxCodeCreateEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a tax code
        /// </summary>
        /// <remarks>
        /// Create a new tax code with rate and jurisdiction
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Guid> TaxCodeCreateEndpointAsync(string version, CreateTaxCodeCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/tax-codes"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/tax-codes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Guid>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a tax code
        /// </summary>
        /// <remarks>
        /// Get a tax code by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TaxCodeResponse> TaxCodeGetEndpointAsync(string version, System.Guid id)
        {
            return TaxCodeGetEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a tax code
        /// </summary>
        /// <remarks>
        /// Get a tax code by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TaxCodeResponse> TaxCodeGetEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/tax-codes/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/tax-codes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaxCodeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a tax code
        /// </summary>
        /// <remarks>
        /// Delete a tax code by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task TaxCodeDeleteEndpointAsync(string version, System.Guid id)
        {
            return TaxCodeDeleteEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a tax code
        /// </summary>
        /// <remarks>
        /// Delete a tax code by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task TaxCodeDeleteEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/tax-codes/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/tax-codes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search tax codes
        /// </summary>
        /// <remarks>
        /// Search and filter tax codes with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TaxCodeResponsePagedList> TaxCodeSearchEndpointAsync(string version, SearchTaxCodesCommand body)
        {
            return TaxCodeSearchEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search tax codes
        /// </summary>
        /// <remarks>
        /// Search and filter tax codes with pagination
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TaxCodeResponsePagedList> TaxCodeSearchEndpointAsync(string version, SearchTaxCodesCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/accounting/tax-codes/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounting/tax-codes/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaxCodeResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// creates a tenant
        /// </summary>
        /// <remarks>
        /// creates a tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateTenantResponse> CreateTenantEndpointAsync(CreateTenantCommand body)
        {
            return CreateTenantEndpointAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// creates a tenant
        /// </summary>
        /// <remarks>
        /// creates a tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateTenantResponse> CreateTenantEndpointAsync(CreateTenantCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/tenants"
                    urlBuilder_.Append("api/tenants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateTenantResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get tenants
        /// </summary>
        /// <remarks>
        /// get tenants
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TenantDetail>> GetTenantsEndpointAsync()
        {
            return GetTenantsEndpointAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get tenants
        /// </summary>
        /// <remarks>
        /// get tenants
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TenantDetail>> GetTenantsEndpointAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/tenants"
                    urlBuilder_.Append("api/tenants");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TenantDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get tenant by id
        /// </summary>
        /// <remarks>
        /// get tenant by id
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TenantDetail> GetTenantByIdEndpointAsync(string id)
        {
            return GetTenantByIdEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get tenant by id
        /// </summary>
        /// <remarks>
        /// get tenant by id
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TenantDetail> GetTenantByIdEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/tenants/{id}"
                    urlBuilder_.Append("api/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TenantDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// upgrade tenant subscription
        /// </summary>
        /// <remarks>
        /// upgrade tenant subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpgradeSubscriptionResponse> UpgradeSubscriptionEndpointAsync(UpgradeSubscriptionCommand body)
        {
            return UpgradeSubscriptionEndpointAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// upgrade tenant subscription
        /// </summary>
        /// <remarks>
        /// upgrade tenant subscription
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpgradeSubscriptionResponse> UpgradeSubscriptionEndpointAsync(UpgradeSubscriptionCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/tenants/upgrade"
                    urlBuilder_.Append("api/tenants/upgrade");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpgradeSubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// activate tenant
        /// </summary>
        /// <remarks>
        /// activate tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ActivateTenantResponse> ActivateTenantEndpointAsync(string id)
        {
            return ActivateTenantEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// activate tenant
        /// </summary>
        /// <remarks>
        /// activate tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ActivateTenantResponse> ActivateTenantEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/tenants/{id}/activate"
                    urlBuilder_.Append("api/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/activate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ActivateTenantResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// activate tenant
        /// </summary>
        /// <remarks>
        /// activate tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DisableTenantResponse> DisableTenantEndpointAsync(string id)
        {
            return DisableTenantEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// activate tenant
        /// </summary>
        /// <remarks>
        /// activate tenant
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DisableTenantResponse> DisableTenantEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/tenants/{id}/deactivate"
                    urlBuilder_.Append("api/tenants/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deactivate");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DisableTenantResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Creates a todo item
        /// </summary>
        /// <remarks>
        /// Creates a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateTodoResponse> CreateTodoEndpointAsync(string version, CreateTodoCommand body)
        {
            return CreateTodoEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a todo item
        /// </summary>
        /// <remarks>
        /// Creates a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateTodoResponse> CreateTodoEndpointAsync(string version, CreateTodoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/todos"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/todos");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateTodoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// gets todo item by id
        /// </summary>
        /// <remarks>
        /// gets todo item by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetTodoResponse> GetTodoEndpointAsync(string version, System.Guid id)
        {
            return GetTodoEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// gets todo item by id
        /// </summary>
        /// <remarks>
        /// gets todo item by id
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetTodoResponse> GetTodoEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/todos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/todos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetTodoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updates a todo item
        /// </summary>
        /// <remarks>
        /// Updated a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateTodoResponse> UpdateTodoEndpointAsync(string version, System.Guid id, UpdateTodoCommand body)
        {
            return UpdateTodoEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates a todo item
        /// </summary>
        /// <remarks>
        /// Updated a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateTodoResponse> UpdateTodoEndpointAsync(string version, System.Guid id, UpdateTodoCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/todos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/todos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateTodoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Deletes a todo item
        /// </summary>
        /// <remarks>
        /// Deleted a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteTodoEndpointAsync(string version, System.Guid id)
        {
            return DeleteTodoEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes a todo item
        /// </summary>
        /// <remarks>
        /// Deleted a todo item
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTodoEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/todos/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/todos/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets a list of todo items with paging support
        /// </summary>
        /// <remarks>
        /// Gets a list of todo items with paging support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TodoDtoPagedList> GetTodoListEndpointAsync(string version, PaginationFilter body)
        {
            return GetTodoListEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets a list of todo items with paging support
        /// </summary>
        /// <remarks>
        /// Gets a list of todo items with paging support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TodoDtoPagedList> GetTodoListEndpointAsync(string version, PaginationFilter body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/todos/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/todos/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TodoDtoPagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// refresh JWTs
        /// </summary>
        /// <remarks>
        /// refresh JWTs
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenResponse> RefreshTokenEndpointAsync(string tenant, string? deviceType, RefreshTokenCommand body)
        {
            return RefreshTokenEndpointAsync(tenant, deviceType, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// refresh JWTs
        /// </summary>
        /// <remarks>
        /// refresh JWTs
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenResponse> RefreshTokenEndpointAsync(string tenant, string? deviceType, RefreshTokenCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (tenant == null)
                        throw new System.ArgumentNullException("tenant");
                    request_.Headers.TryAddWithoutValidation("tenant", ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/token/refresh"
                    urlBuilder_.Append("api/token/refresh");
                    urlBuilder_.Append('?');
                    if (deviceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deviceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deviceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// generate JWTs
        /// </summary>
        /// <remarks>
        /// generate JWTs
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenResponse> TokenGenerationEndpointAsync(string tenant, string? deviceType, TokenGenerationCommand body)
        {
            return TokenGenerationEndpointAsync(tenant, deviceType, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// generate JWTs
        /// </summary>
        /// <remarks>
        /// generate JWTs
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenResponse> TokenGenerationEndpointAsync(string tenant, string? deviceType, TokenGenerationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (tenant == null)
                        throw new System.ArgumentNullException("tenant");
                    request_.Headers.TryAddWithoutValidation("tenant", ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/token"
                    urlBuilder_.Append("api/token");
                    urlBuilder_.Append('?');
                    if (deviceType != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("deviceType")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(deviceType, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// register user
        /// </summary>
        /// <remarks>
        /// register user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RegisterUserResponse> RegisterUserEndpointAsync(RegisterUserCommand body)
        {
            return RegisterUserEndpointAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// register user
        /// </summary>
        /// <remarks>
        /// register user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RegisterUserResponse> RegisterUserEndpointAsync(RegisterUserCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/register"
                    urlBuilder_.Append("api/users/register");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegisterUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// self register user
        /// </summary>
        /// <remarks>
        /// self register user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RegisterUserResponse> SelfRegisterUserEndpointAsync(string tenant, RegisterUserCommand body)
        {
            return SelfRegisterUserEndpointAsync(tenant, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// self register user
        /// </summary>
        /// <remarks>
        /// self register user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RegisterUserResponse> SelfRegisterUserEndpointAsync(string tenant, RegisterUserCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (tenant == null)
                        throw new System.ArgumentNullException("tenant");
                    request_.Headers.TryAddWithoutValidation("tenant", ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/self-register"
                    urlBuilder_.Append("api/users/self-register");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RegisterUserResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// update user profile
        /// </summary>
        /// <remarks>
        /// update user profile
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateUserEndpointAsync(UpdateUserCommand body)
        {
            return UpdateUserEndpointAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// update user profile
        /// </summary>
        /// <remarks>
        /// update user profile
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateUserEndpointAsync(UpdateUserCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/profile"
                    urlBuilder_.Append("api/users/profile");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get current user information based on token
        /// </summary>
        /// <remarks>
        /// Get current user information based on token
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserDetail> GetUserProfileEndpointAsync()
        {
            return GetUserProfileEndpointAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get current user information based on token
        /// </summary>
        /// <remarks>
        /// Get current user information based on token
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserDetail> GetUserProfileEndpointAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/profile"
                    urlBuilder_.Append("api/users/profile");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get users list
        /// </summary>
        /// <remarks>
        /// get users list
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDetail>> GetUsersListEndpointAsync()
        {
            return GetUsersListEndpointAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get users list
        /// </summary>
        /// <remarks>
        /// get users list
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserDetail>> GetUsersListEndpointAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users"
                    urlBuilder_.Append("api/users");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// delete user profile
        /// </summary>
        /// <remarks>
        /// delete user profile
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteUserEndpointAsync(string id)
        {
            return DeleteUserEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// delete user profile
        /// </summary>
        /// <remarks>
        /// delete user profile
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteUserEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/{id}"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get user profile by ID
        /// </summary>
        /// <remarks>
        /// Get another user's profile details by user ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserDetail> GetUserEndpointAsync(string id)
        {
            return GetUserEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user profile by ID
        /// </summary>
        /// <remarks>
        /// Get another user's profile details by user ID.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserDetail> GetUserEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/{id}"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserDetail>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Forgot password
        /// </summary>
        /// <remarks>
        /// Generates a password reset token and sends it via email.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ForgotPasswordEndpointAsync(string tenant, ForgotPasswordCommand body)
        {
            return ForgotPasswordEndpointAsync(tenant, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Forgot password
        /// </summary>
        /// <remarks>
        /// Generates a password reset token and sends it via email.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ForgotPasswordEndpointAsync(string tenant, ForgotPasswordCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (tenant == null)
                        throw new System.ArgumentNullException("tenant");
                    request_.Headers.TryAddWithoutValidation("tenant", ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/forgot-password"
                    urlBuilder_.Append("api/users/forgot-password");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Changes password
        /// </summary>
        /// <remarks>
        /// Change password
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ChangePasswordEndpointAsync(ChangePasswordCommand body)
        {
            return ChangePasswordEndpointAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Changes password
        /// </summary>
        /// <remarks>
        /// Change password
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ChangePasswordEndpointAsync(ChangePasswordCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/change-password"
                    urlBuilder_.Append("api/users/change-password");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Resets the password using the token and new password provided.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ResetPasswordEndpointAsync(string tenant, ResetPasswordCommand body)
        {
            return ResetPasswordEndpointAsync(tenant, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Resets the password using the token and new password provided.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ResetPasswordEndpointAsync(string tenant, ResetPasswordCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (tenant == null)
                        throw new System.ArgumentNullException("tenant");
                    request_.Headers.TryAddWithoutValidation("tenant", ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture));
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/reset-password"
                    urlBuilder_.Append("api/users/reset-password");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get current user permissions
        /// </summary>
        /// <remarks>
        /// Get current user permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetUserPermissionsEndpointAsync()
        {
            return GetUserPermissionsEndpointAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get current user permissions
        /// </summary>
        /// <remarks>
        /// Get current user permissions
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetUserPermissionsEndpointAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/permissions"
                    urlBuilder_.Append("api/users/permissions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Toggle a user's active status
        /// </summary>
        /// <remarks>
        /// Toggle a user's active status
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ToggleUserStatusEndpointAsync(string id, ToggleUserStatusCommand body)
        {
            return ToggleUserStatusEndpointAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Toggle a user's active status
        /// </summary>
        /// <remarks>
        /// Toggle a user's active status
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ToggleUserStatusEndpointAsync(string id, ToggleUserStatusCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/{id}/toggle-status"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/toggle-status");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// assign roles
        /// </summary>
        /// <remarks>
        /// assign roles
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AssignRolesToUserEndpointAsync(string id, AssignUserRoleCommand body)
        {
            return AssignRolesToUserEndpointAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// assign roles
        /// </summary>
        /// <remarks>
        /// assign roles
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AssignRolesToUserEndpointAsync(string id, AssignUserRoleCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/{id}/roles"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get user roles
        /// </summary>
        /// <remarks>
        /// get user roles
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRoleDetail>> GetUserRolesEndpointAsync(string id)
        {
            return GetUserRolesEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get user roles
        /// </summary>
        /// <remarks>
        /// get user roles
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRoleDetail>> GetUserRolesEndpointAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/{id}/roles"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/roles");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserRoleDetail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get user's audit trail details
        /// </summary>
        /// <remarks>
        /// Get user's audit trail details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuditTrail>> GetUserAuditTrailEndpointAsync(System.Guid id)
        {
            return GetUserAuditTrailEndpointAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user's audit trail details
        /// </summary>
        /// <remarks>
        /// Get user's audit trail details.
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuditTrail>> GetUserAuditTrailEndpointAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/{id}/audit-trails"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/audit-trails");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AuditTrail>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// confirm user email
        /// </summary>
        /// <remarks>
        /// confirm user email
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> ConfirmEmailEndpointAsync(string userId, string code, string tenant)
        {
            return ConfirmEmailEndpointAsync(userId, code, tenant, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// confirm user email
        /// </summary>
        /// <remarks>
        /// confirm user email
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ConfirmEmailEndpointAsync(string userId, string code, string tenant, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            if (code == null)
                throw new System.ArgumentNullException("code");

            if (tenant == null)
                throw new System.ArgumentNullException("tenant");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/users/confirm-email"
                    urlBuilder_.Append("api/users/confirm-email");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("userId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("code")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("tenant")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tenant, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            return result_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new warehouse location
        /// </summary>
        /// <remarks>
        /// Creates a new warehouse location for storing items
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateWarehouseLocationResponse> CreateWarehouseLocationEndpointAsync(string version, CreateWarehouseLocationCommand body)
        {
            return CreateWarehouseLocationEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new warehouse location
        /// </summary>
        /// <remarks>
        /// Creates a new warehouse location for storing items
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateWarehouseLocationResponse> CreateWarehouseLocationEndpointAsync(string version, CreateWarehouseLocationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouse-locations"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouse-locations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateWarehouseLocationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update warehouse location
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouse location with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateWarehouseLocationResponse> UpdateWarehouseLocationEndpointAsync(string version, System.Guid id, UpdateWarehouseLocationCommand body)
        {
            return UpdateWarehouseLocationEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update warehouse location
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouse location with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateWarehouseLocationResponse> UpdateWarehouseLocationEndpointAsync(string version, System.Guid id, UpdateWarehouseLocationCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouse-locations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouse-locations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateWarehouseLocationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a warehouse location
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse location by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteWarehouseLocationEndpointAsync(string version, System.Guid id)
        {
            return DeleteWarehouseLocationEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a warehouse location
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse location by ID
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteWarehouseLocationEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouse-locations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouse-locations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get warehouse location by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a warehouse location by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWarehouseLocationResponse> GetWarehouseLocationEndpointAsync(string version, System.Guid id)
        {
            return GetWarehouseLocationEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse location by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a warehouse location by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWarehouseLocationResponse> GetWarehouseLocationEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouse-locations/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouse-locations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWarehouseLocationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get list of warehouse locations
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of warehouse locations with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetWarehouseLocationListResponsePagedList> SearchWarehouseLocationsEndpointAsync(string version, SearchWarehouseLocationsCommand body)
        {
            return SearchWarehouseLocationsEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of warehouse locations
        /// </summary>
        /// <remarks>
        /// Retrieves a paginated list of warehouse locations with optional filtering
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetWarehouseLocationListResponsePagedList> SearchWarehouseLocationsEndpointAsync(string version, SearchWarehouseLocationsCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouse-locations/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouse-locations/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetWarehouseLocationListResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new warehouse
        /// </summary>
        /// <remarks>
        /// Creates a new warehouse
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateWarehouseResponse> CreateWarehouseEndpointAsync(string version, CreateWarehouseCommand body)
        {
            return CreateWarehouseEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new warehouse
        /// </summary>
        /// <remarks>
        /// Creates a new warehouse
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateWarehouseResponse> CreateWarehouseEndpointAsync(string version, CreateWarehouseCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouses"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouses");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateWarehouseResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouse with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UpdateWarehouseResponse> UpdateWarehouseEndpointAsync(string version, System.Guid id, UpdateWarehouseCommand body)
        {
            return UpdateWarehouseEndpointAsync(version, id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing warehouse with the provided details
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UpdateWarehouseResponse> UpdateWarehouseEndpointAsync(string version, System.Guid id, UpdateWarehouseCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouses/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UpdateWarehouseResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete warehouse
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteWarehouseEndpointAsync(string version, System.Guid id)
        {
            return DeleteWarehouseEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete warehouse
        /// </summary>
        /// <remarks>
        /// Deletes a warehouse by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteWarehouseEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouses/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get warehouse by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a warehouse by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WarehouseResponse> GetWarehouseEndpointAsync(string version, System.Guid id)
        {
            return GetWarehouseEndpointAsync(version, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get warehouse by ID
        /// </summary>
        /// <remarks>
        /// Retrieves a warehouse by its unique identifier
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WarehouseResponse> GetWarehouseEndpointAsync(string version, System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouses/{id}"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouses/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WarehouseResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Search warehouses
        /// </summary>
        /// <remarks>
        /// Search and filter warehouses with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WarehouseResponsePagedList> SearchWarehousesEndpointAsync(string version, SearchWarehousesCommand body)
        {
            return SearchWarehousesEndpointAsync(version, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search warehouses
        /// </summary>
        /// <remarks>
        /// Search and filter warehouses with pagination support
        /// </remarks>
        /// <param name="version">The requested API version</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WarehouseResponsePagedList> SearchWarehousesEndpointAsync(string version, SearchWarehousesCommand body, System.Threading.CancellationToken cancellationToken)
        {
            if (version == null)
                throw new System.ArgumentNullException("version");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                
                    // Operation Path: "api/v{version}/store/warehouses/search"
                    urlBuilder_.Append("api/v");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(version, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/store/warehouses/search");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WarehouseResponsePagedList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingPeriodResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isClosed")]
        public bool IsClosed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isAdjustmentPeriod")]
        public bool IsAdjustmentPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodType")]
        public string? PeriodType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountingPeriodResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<AccountingPeriodResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccrualResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accrualNumber")]
        public string? AccrualNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accrualDate")]
        public System.DateTime AccrualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isReversed")]
        public bool IsReversed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reversalDate")]
        public System.DateTime? ReversalDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccrualResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<AccrualResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivateSupplierCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivateSupplierResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActivateTenantResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddCycleCountItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("cycleCountId")]
        public System.Guid CycleCountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("systemQuantity")]
        public int SystemQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedQuantity")]
        public int? CountedQuantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddCycleCountItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cycleCountId")]
        public System.Guid CycleCountId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddGoodsReceiptItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("goodsReceiptId")]
        public System.Guid GoodsReceiptId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal UnitCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderItemId")]
        public System.Guid? PurchaseOrderItemId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddGoodsReceiptItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddInventoryTransferItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("inventoryTransferId")]
        public System.Guid InventoryTransferId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddInventoryTransferItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryTransferId")]
        public System.Guid InventoryTransferId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddPickListItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pickListId")]
        public System.Guid PickListId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberId")]
        public System.Guid? SerialNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityToPick")]
        public int QuantityToPick { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddPickListItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddPurchaseOrderItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public decimal? Discount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddPurchaseOrderItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid PurchaseOrderId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddPutAwayTaskItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("putAwayTaskId")]
        public System.Guid PutAwayTaskId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toBinId")]
        public System.Guid ToBinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberId")]
        public System.Guid? SerialNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityToPutAway")]
        public int QuantityToPutAway { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        public int SequenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddPutAwayTaskItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllocatePaymentCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        public System.Guid PaymentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allocations")]
        public System.Collections.Generic.ICollection<PaymentAllocationItem>? Allocations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllocateStockCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("stockLevelId")]
        public System.Guid StockLevelId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AllocateStockResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("stockLevelId")]
        public System.Guid StockLevelId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allocatedQuantity")]
        public int AllocatedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remainingReserved")]
        public int RemainingReserved { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplyCreditMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountToApply")]
        public decimal AmountToApply { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("targetDocumentId")]
        public System.Guid TargetDocumentId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplyDebitMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountToApply")]
        public decimal AmountToApply { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("targetDocumentId")]
        public System.Guid TargetDocumentId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveBankReconciliationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveCreditMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveDebitMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveInventoryTransactionCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveInventoryTransactionResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        public InventoryTransactionResponse Transaction { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveInventoryTransferCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveInventoryTransferResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApprovePurchaseOrderRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("approvalNotes")]
        public string? ApprovalNotes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApprovePurchaseOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveRecurringJournalEntryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveStockAdjustmentCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApproveStockAdjustmentResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentId")]
        public System.Guid AdjustmentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approved")]
        public bool Approved { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignPickListCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pickListId")]
        public System.Guid PickListId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string? AssignedTo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignPickListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignPutAwayTaskCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("putAwayTaskId")]
        public System.Guid PutAwayTaskId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string? AssignedTo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignPutAwayTaskResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssignUserRoleCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("userRoles")]
        public System.Collections.Generic.ICollection<UserRoleDetail>? UserRoles { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuditTrail
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string? UserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("primaryKey")]
        public string? PrimaryKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public string? Operation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entity")]
        public string? Entity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateTime")]
        public System.DateTime DateTime { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previousValues")]
        public string? PreviousValues { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newValues")]
        public string? NewValues { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modifiedProperties")]
        public string? ModifiedProperties { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankCreateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        public string? BankCode { get; set; } = "BNK001";

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Chase Bank";

        [System.Text.Json.Serialization.JsonPropertyName("routingNumber")]
        public string? RoutingNumber { get; set; } = "021000021";

        [System.Text.Json.Serialization.JsonPropertyName("swiftCode")]
        public string? SwiftCode { get; set; } = "CHASUS33";

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = "123 Bank St, New York, NY 10001";

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = "John Smith";

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = "+1-555-0100";

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = "accounts@bank.com";

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = "https://www.bank.com";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary banking institution";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = "Monthly service fee: $25";

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankCreateResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankDeleteResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankReconciliationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        public System.Guid BankAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationDate")]
        public System.DateTime ReconciliationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statementBalance")]
        public decimal StatementBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bookBalance")]
        public decimal BookBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustedBalance")]
        public decimal AdjustedBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("outstandingChecksTotal")]
        public decimal OutstandingChecksTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("depositsInTransitTotal")]
        public decimal DepositsInTransitTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankErrors")]
        public decimal BankErrors { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bookErrors")]
        public decimal BookErrors { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isReconciled")]
        public bool IsReconciled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconciledDate")]
        public System.DateTime? ReconciledDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconciledBy")]
        public string? ReconciledBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedDate")]
        public System.DateTime? ApprovedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statementNumber")]
        public string? StatementNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        public System.Guid? LastModifiedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankReconciliationResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<BankReconciliationResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        public string? BankCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("routingNumber")]
        public string? RoutingNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("swiftCode")]
        public string? SwiftCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<BankResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankSearchCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        public string? BankCode { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("routingNumber")]
        public string? RoutingNumber { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("swiftCode")]
        public string? SwiftCode { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankUpdateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankCode")]
        public string? BankCode { get; set; } = "BNK001";

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Chase Bank";

        [System.Text.Json.Serialization.JsonPropertyName("routingNumber")]
        public string? RoutingNumber { get; set; } = "021000021";

        [System.Text.Json.Serialization.JsonPropertyName("swiftCode")]
        public string? SwiftCode { get; set; } = "CHASUS33";

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = "123 Bank St, New York, NY 10001";

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = "John Smith";

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = "+1-555-0100";

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = "accounts@bank.com";

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = "https://www.bank.com";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary banking institution";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = "Monthly service fee: $25";

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankUpdateResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BinResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationName")]
        public string? WarehouseLocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public decimal? Capacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usedCapacity")]
        public decimal? UsedCapacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capacityUnit")]
        public string? CapacityUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("aisle")]
        public string? Aisle { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("section")]
        public string? Section { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shelf")]
        public string? Shelf { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationType")]
        public string? LocationType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BinResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<BinResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrandResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BrandResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<BrandResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetDetailResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetId")]
        public System.Guid BudgetId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public System.Guid AccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetedAmount")]
        public decimal BudgetedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualAmount")]
        public decimal ActualAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodId")]
        public System.Guid PeriodId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodName")]
        public string? PeriodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetType")]
        public string? BudgetType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalBudgetedAmount")]
        public decimal TotalBudgetedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalActualAmount")]
        public decimal TotalActualAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedDate")]
        public System.DateTime? ApprovedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<BudgetResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelCycleCountCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelCycleCountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelInventoryTransferCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelInventoryTransferResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelPurchaseOrderRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("cancellationReason")]
        public string? CancellationReason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CancelPurchaseOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentCategoryId")]
        public System.Guid? ParentCategoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sortOrder")]
        public int SortOrder { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<CategoryResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangePasswordCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newPassword")]
        public string? NewPassword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("confirmNewPassword")]
        public string? ConfirmNewPassword { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChartOfAccountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        public string? Remarks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filePath")]
        public string? FilePath { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdByUserName")]
        public string? CreatedByUserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime LastModifiedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        public System.Guid? LastModifiedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedByUserName")]
        public string? LastModifiedByUserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountCode")]
        public string? AccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentAccountId")]
        public System.Guid? ParentAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usoaCategory")]
        public string? UsoaCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentCode")]
        public string? ParentCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public decimal Balance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isControlAccount")]
        public bool IsControlAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("normalBalance")]
        public string? NormalBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountLevel")]
        public int AccountLevel { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChartOfAccountResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<ChartOfAccountResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckClearCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("checkId")]
        public System.Guid CheckId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clearedDate")]
        public System.DateTime? ClearedDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckClearResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckCreateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("startCheckNumber")]
        public string? StartCheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endCheckNumber")]
        public string? EndCheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountCode")]
        public string? BankAccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]
        public System.Guid? BankId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckCreateResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startCheckNumber")]
        public string? StartCheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endCheckNumber")]
        public string? EndCheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checksCreated")]
        public int ChecksCreated { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckGetResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountCode")]
        public string? BankAccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountName")]
        public string? BankAccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]
        public System.Guid? BankId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string? BankName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeName")]
        public string? PayeeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        public System.Guid? VendorId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeId")]
        public System.Guid? PayeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("issuedDate")]
        public System.DateTime? IssuedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clearedDate")]
        public System.DateTime? ClearedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidedDate")]
        public System.DateTime? VoidedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidReason")]
        public string? VoidReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        public System.Guid? PaymentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public System.Guid? ExpenseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPrinted")]
        public bool IsPrinted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("printedDate")]
        public System.DateTime? PrintedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("printedBy")]
        public string? PrintedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isStopPayment")]
        public bool IsStopPayment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stopPaymentDate")]
        public System.DateTime? StopPaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stopPaymentReason")]
        public string? StopPaymentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        public System.Guid? LastModifiedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckIssueCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("checkId")]
        public System.Guid CheckId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeName")]
        public string? PayeeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("issuedDate")]
        public System.DateTime? IssuedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeId")]
        public System.Guid? PayeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        public System.Guid? VendorId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        public System.Guid? PaymentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expenseId")]
        public System.Guid? ExpenseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckIssueResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckPrintCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("checkId")]
        public System.Guid CheckId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("printedBy")]
        public string? PrintedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("printedDate")]
        public System.DateTime? PrintedDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckPrintResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPrinted")]
        public bool IsPrinted { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckSearchQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountCode")]
        public string? BankAccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeName")]
        public string? PayeeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        public System.Guid? VendorId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeId")]
        public System.Guid? PayeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("issuedDateFrom")]
        public System.DateTime? IssuedDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("issuedDateTo")]
        public System.DateTime? IssuedDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clearedDateFrom")]
        public System.DateTime? ClearedDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clearedDateTo")]
        public System.DateTime? ClearedDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPrinted")]
        public bool? IsPrinted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isStopPayment")]
        public bool? IsStopPayment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountFrom")]
        public decimal? AmountFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountTo")]
        public decimal? AmountTo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckSearchResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountCode")]
        public string? BankAccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountName")]
        public string? BankAccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]
        public System.Guid? BankId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]
        public string? BankName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeName")]
        public string? PayeeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendorId")]
        public System.Guid? VendorId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeId")]
        public System.Guid? PayeeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("issuedDate")]
        public System.DateTime? IssuedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clearedDate")]
        public System.DateTime? ClearedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPrinted")]
        public bool IsPrinted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isStopPayment")]
        public bool IsStopPayment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckSearchResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<CheckSearchResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckStopPaymentCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("checkId")]
        public System.Guid CheckId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stopPaymentReason")]
        public string? StopPaymentReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stopPaymentDate")]
        public System.DateTime? StopPaymentDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckStopPaymentResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckUpdateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("checkId")]
        public System.Guid CheckId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountCode")]
        public string? BankAccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]
        public System.Guid? BankId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckUpdateResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckVoidCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("checkId")]
        public System.Guid CheckId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidReason")]
        public string? VoidReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidedDate")]
        public System.DateTime? VoidedDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckVoidResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("checkNumber")]
        public string? CheckNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompleteBankReconciliationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconciledBy")]
        public string? ReconciledBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompleteCycleCountCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompleteCycleCountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompleteInventoryTransferCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrival")]
        public System.DateTime ActualArrival { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompleteInventoryTransferResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletePickingCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pickListId")]
        public System.Guid PickListId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletePickingResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletePutAwayCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("putAwayTaskId")]
        public System.Guid PutAwayTaskId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompletePutAwayResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAccountingPeriodCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodType")]
        public string? PeriodType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isAdjustmentPeriod")]
        public bool IsAdjustmentPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAccrualCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("accrualNumber")]
        public string? AccrualNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accrualDate")]
        public System.DateTime AccrualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAccrualResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accrualNumber")]
        public string? AccrualNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBankReconciliationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        public string? Remarks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        public System.Guid BankAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconciliationDate")]
        public System.DateTime ReconciliationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statementBalance")]
        public decimal StatementBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bookBalance")]
        public decimal BookBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statementNumber")]
        public string? StatementNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBinCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Sample Bin";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary storage bin";

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = "A1-01-01";

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binType")]
        public string? BinType { get; set; } = "Shelf";

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public decimal? Capacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int Priority { get; set; } = 0;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBinResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBrandCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Sample Brand";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Descriptive Description";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = "Descriptive Notes";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBrandResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBudgetCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodId")]
        public System.Guid PeriodId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodName")]
        public string? PeriodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetType")]
        public string? BudgetType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBudgetDetailCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("budgetId")]
        public System.Guid BudgetId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public System.Guid AccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetedAmount")]
        public decimal BudgetedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateBudgetResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCategoryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Sample Category";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary category";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = "CAT001";

        [System.Text.Json.Serialization.JsonPropertyName("parentCategoryId")]
        public System.Guid? ParentCategoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("sortOrder")]
        public int SortOrder { get; set; } = 0;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCategoryResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateChartOfAccountCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        public string? Remarks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountCode")]
        public string? AccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        public string? AccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usoaCategory")]
        public string? UsoaCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentAccountId")]
        public System.Guid? ParentAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentCode")]
        public string? ParentCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public decimal Balance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isControlAccount")]
        public bool IsControlAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("normalBalance")]
        public string? NormalBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsoaCompliant")]
        public bool IsUsoaCompliant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("regulatoryClassification")]
        public string? RegulatoryClassification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCreditMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("memoNumber")]
        public string? MemoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDate")]
        public System.DateTime MemoDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public string? ReferenceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public System.Guid ReferenceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originalDocumentId")]
        public System.Guid? OriginalDocumentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCycleCountCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Cycle Count";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countNumber")]
        public string? CountNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scheduledDate")]
        public System.DateTime ScheduledDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countType")]
        public string? CountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("counterName")]
        public string? CounterName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supervisorName")]
        public string? SupervisorName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateCycleCountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDebitMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("memoNumber")]
        public string? MemoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDate")]
        public System.DateTime MemoDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public string? ReferenceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public System.Guid ReferenceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originalDocumentId")]
        public System.Guid? OriginalDocumentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDeferredRevenueCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("deferredRevenueNumber")]
        public string? DeferredRevenueNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recognitionDate")]
        public System.DateTime RecognitionDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateDepreciationMethodRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("methodCode")]
        public string? MethodCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("methodName")]
        public string? MethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("calculationFormula")]
        public string? CalculationFormula { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateGoodsReceiptCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("receiptNumber")]
        public string? ReceiptNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid? PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDate")]
        public System.DateTime ReceivedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateGoodsReceiptResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInventoryItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public string? Sku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public decimal Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInventoryReservationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("reservationNumber")]
        public string? ReservationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityReserved")]
        public int QuantityReserved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationType")]
        public string? ReservationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        public System.DateTime? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservedBy")]
        public string? ReservedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInventoryReservationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationNumber")]
        public string? ReservationNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInventoryTransactionCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("transactionNumber")]
        public string? TransactionNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid? PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityBefore")]
        public int QuantityBefore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal UnitCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionDate")]
        public System.DateTime? TransactionDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public string? Reference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("performedBy")]
        public string? PerformedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isApproved")]
        public bool IsApproved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInventoryTransactionResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionNumber")]
        public string? TransactionNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInventoryTransferCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Inventory Transfer";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferNumber")]
        public string? TransferNumber { get; set; } = "TRF001";

        [System.Text.Json.Serialization.JsonPropertyName("fromWarehouseId")]
        public System.Guid FromWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toWarehouseId")]
        public System.Guid ToWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromLocationId")]
        public System.Guid? FromLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toLocationId")]
        public System.Guid? ToLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        public System.DateTime TransferDate { get; set; } = System.DateTime.Parse("2024-01-01");

        [System.Text.Json.Serialization.JsonPropertyName("expectedArrivalDate")]
        public System.DateTime? ExpectedArrivalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferType")]
        public string? TransferType { get; set; } = "Standard";

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public string? Priority { get; set; } = "Normal";

        [System.Text.Json.Serialization.JsonPropertyName("transportMethod")]
        public string? TransportMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestedBy")]
        public string? RequestedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInventoryTransferResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInvoiceFromConsumptionCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("consumptionId")]
        public System.Guid ConsumptionId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceDate")]
        public System.DateTime InvoiceDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dueDays")]
        public int DueDays { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Sample Item";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Detailed description";

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public string? Sku { get; set; } = "ITEM-001";

        [System.Text.Json.Serialization.JsonPropertyName("barcode")]
        public string? Barcode { get; set; } = "0123456789012";

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = 24.99M;

        [System.Text.Json.Serialization.JsonPropertyName("cost")]
        public decimal Cost { get; set; } = 15M;

        [System.Text.Json.Serialization.JsonPropertyName("minimumStock")]
        public int MinimumStock { get; set; } = 10;

        [System.Text.Json.Serialization.JsonPropertyName("maximumStock")]
        public int MaximumStock { get; set; } = 500;

        [System.Text.Json.Serialization.JsonPropertyName("reorderPoint")]
        public int ReorderPoint { get; set; } = 25;

        [System.Text.Json.Serialization.JsonPropertyName("reorderQuantity")]
        public int ReorderQuantity { get; set; } = 100;

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeDays")]
        public int LeadTimeDays { get; set; } = 7;

        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        public System.Guid? CategoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = "EA";

        [System.Text.Json.Serialization.JsonPropertyName("isPerishable")]
        public bool IsPerishable { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("isSerialTracked")]
        public bool IsSerialTracked { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("isLotTracked")]
        public bool IsLotTracked { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("shelfLifeDays")]
        public int? ShelfLifeDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brand")]
        public string? Brand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufacturer")]
        public string? Manufacturer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufacturerPartNumber")]
        public string? ManufacturerPartNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public decimal Weight { get; set; } = 2.5M;

        [System.Text.Json.Serialization.JsonPropertyName("weightUnit")]
        public string? WeightUnit { get; set; } = "kg";

        [System.Text.Json.Serialization.JsonPropertyName("length")]
        public decimal? Length { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public decimal? Width { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public decimal? Height { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensionUnit")]
        public string? DimensionUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateItemSupplierCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Item Supplier Relationship";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal UnitCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeDays")]
        public int LeadTimeDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minimumOrderQuantity")]
        public int MinimumOrderQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierPartNumber")]
        public string? SupplierPartNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagingQuantity")]
        public int? PackagingQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPreferred")]
        public bool IsPreferred { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateItemSupplierResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLotNumberCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Lot Number";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotCode")]
        public string? LotCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityReceived")]
        public int QuantityReceived { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufactureDate")]
        public System.DateTime? ManufactureDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        public System.DateTime? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptDate")]
        public System.DateTime? ReceiptDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("qualityNotes")]
        public string? QualityNotes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateLotNumberResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateOrUpdateRoleCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePickListCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickListNumber")]
        public string? PickListNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickingType")]
        public string? PickingType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePickListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateProductCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Sample Product";

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public decimal Price { get; set; } = 10M;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Descriptive Description";

        [System.Text.Json.Serialization.JsonPropertyName("brandId")]
        public System.Guid? BrandId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateProductResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateProjectCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Infrastructure Upgrade Project";

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; } = System.DateTime.Parse("2025-09-23");

        [System.Text.Json.Serialization.JsonPropertyName("budgetedAmount")]
        public decimal BudgetedAmount { get; set; } = 100000M;

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]
        public string? ClientName { get; set; } = "Engineering Department";

        [System.Text.Json.Serialization.JsonPropertyName("projectManager")]
        public string? ProjectManager { get; set; } = "John Smith";

        [System.Text.Json.Serialization.JsonPropertyName("department")]
        public string? Department { get; set; } = "Operations";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Major infrastructure upgrade for facility improvements";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = "High priority project with strict timeline";

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateProjectCostingCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public System.Guid ProjectId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entryDate")]
        public System.DateTime EntryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public System.Guid AccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("journalEntryId")]
        public System.Guid? JournalEntryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("costCenter")]
        public string? CostCenter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("workOrderNumber")]
        public string? WorkOrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBillable")]
        public bool IsBillable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendor")]
        public string? Vendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePurchaseOrderCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Purchase Order";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        public string? OrderNumber { get; set; } = "PO-0001";

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        public System.DateTime OrderDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expectedDeliveryDate")]
        public System.DateTime? ExpectedDeliveryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = "Draft";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryAddress")]
        public string? DeliveryAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPhone")]
        public string? ContactPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUrgent")]
        public bool IsUrgent { get; set; } = false;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePurchaseOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePutAwayTaskCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taskNumber")]
        public string? TaskNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("goodsReceiptId")]
        public System.Guid? GoodsReceiptId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("putAwayStrategy")]
        public string? PutAwayStrategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePutAwayTaskResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateRecurringJournalEntryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        public string? Remarks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("templateCode")]
        public string? TemplateCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public string? Frequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customIntervalDays")]
        public int? CustomIntervalDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public System.Guid DebitAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        public System.Guid CreditAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSerialNumberCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberValue")]
        public string? SerialNumberValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptDate")]
        public System.DateTime? ReceiptDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufactureDate")]
        public System.DateTime? ManufactureDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warrantyExpirationDate")]
        public System.DateTime? WarrantyExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSerialNumberResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberValue")]
        public string? SerialNumberValue { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateStockAdjustmentCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Stock Count Adjustment";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Inventory count adjustment";

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentNumber")]
        public string? AdjustmentNumber { get; set; } = "ADJ001";

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        public System.DateTime AdjustmentDate { get; set; } = System.DateTime.Parse("2024-01-01");

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentType")]
        public string? AdjustmentType { get; set; } = "Physical Count";

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = "Pending";

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = "Monthly inventory count";

        [System.Text.Json.Serialization.JsonPropertyName("quantityBefore")]
        public int QuantityBefore { get; set; } = 0;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentQuantity")]
        public int AdjustmentQuantity { get; set; } = 0;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal UnitCost { get; set; } = 0M;

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public string? Reference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustedBy")]
        public string? AdjustedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batchNumber")]
        public string? BatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime? ExpiryDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateStockAdjustmentResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateStockLevelCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberId")]
        public System.Guid? SerialNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityOnHand")]
        public int QuantityOnHand { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateStockLevelResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSupplierCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public decimal? CreditLimit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentTermsDays")]
        public int PaymentTermsDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rating")]
        public decimal Rating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSupplierResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid SupplierId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTaxCodeCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        public string? Remarks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxType")]
        public string? TaxType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        public decimal Rate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCompound")]
        public bool IsCompound { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jurisdiction")]
        public string? Jurisdiction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        public System.DateTime EffectiveDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime? ExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxCollectedAccountId")]
        public System.Guid TaxCollectedAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxPaidAccountId")]
        public System.Guid? TaxPaidAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAuthority")]
        public string? TaxAuthority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxRegistrationNumber")]
        public string? TaxRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reportingCategory")]
        public string? ReportingCategory { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTenantCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("connectionString")]
        public string? ConnectionString { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminEmail")]
        public string? AdminEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("issuer")]
        public string? Issuer { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTenantResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTodoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Hello World!";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "This is desciption.";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = "Important Note.";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTodoResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateWarehouseCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = "WH001";

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Main Warehouse";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary storage facility";

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = "123 Storage Street, New York, NY 10001, USA";

        [System.Text.Json.Serialization.JsonPropertyName("managerName")]
        public string? ManagerName { get; set; } = "John Manager";

        [System.Text.Json.Serialization.JsonPropertyName("managerEmail")]
        public string? ManagerEmail { get; set; } = "john.manager@example.com";

        [System.Text.Json.Serialization.JsonPropertyName("managerPhone")]
        public string? ManagerPhone { get; set; } = "+1-555-123-4567";

        [System.Text.Json.Serialization.JsonPropertyName("totalCapacity")]
        public decimal TotalCapacity { get; set; } = 10000M;

        [System.Text.Json.Serialization.JsonPropertyName("capacityUnit")]
        public string? CapacityUnit { get; set; } = "sqft";

        [System.Text.Json.Serialization.JsonPropertyName("warehouseType")]
        public string? WarehouseType { get; set; } = "Standard";

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("isMainWarehouse")]
        public bool IsMainWarehouse { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateWarehouseLocationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Main Location";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary storage location";

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = "LOC001";

        [System.Text.Json.Serialization.JsonPropertyName("aisle")]
        public string? Aisle { get; set; } = "A";

        [System.Text.Json.Serialization.JsonPropertyName("section")]
        public string? Section { get; set; } = "01";

        [System.Text.Json.Serialization.JsonPropertyName("shelf")]
        public string? Shelf { get; set; } = "01";

        [System.Text.Json.Serialization.JsonPropertyName("bin")]
        public string? Bin { get; set; } = "A";

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationType")]
        public string? LocationType { get; set; } = "Floor";

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public decimal Capacity { get; set; } = 1000M;

        [System.Text.Json.Serialization.JsonPropertyName("capacityUnit")]
        public string? CapacityUnit { get; set; } = "sqft";

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("requiresTemperatureControl")]
        public bool RequiresTemperatureControl { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("minTemperature")]
        public decimal? MinTemperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxTemperature")]
        public decimal? MaxTemperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperatureUnit")]
        public string? TemperatureUnit { get; set; } = "C";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateWarehouseLocationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateWarehouseResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditMemoResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoNumber")]
        public string? MemoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDate")]
        public System.DateTime MemoDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("appliedAmount")]
        public decimal AppliedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refundedAmount")]
        public decimal RefundedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unappliedAmount")]
        public decimal UnappliedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public string? ReferenceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public System.Guid ReferenceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originalDocumentId")]
        public System.Guid? OriginalDocumentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isApplied")]
        public bool IsApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("appliedDate")]
        public System.DateTime? AppliedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedDate")]
        public System.DateTime? ApprovedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        public System.Guid? LastModifiedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditMemoResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<CreditMemoResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CycleCountDiscrepancy
    {

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("systemQuantity")]
        public int SystemQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedQuantity")]
        public int CountedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("difference")]
        public int Difference { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CycleCountItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("systemQuantity")]
        public int SystemQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedQuantity")]
        public int? CountedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("varianceQuantity")]
        public int? VarianceQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countDate")]
        public System.DateTime? CountDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedBy")]
        public string? CountedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresRecount")]
        public bool RequiresRecount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CycleCountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countNumber")]
        public string? CountNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationName")]
        public string? WarehouseLocationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countDate")]
        public System.DateTime CountDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countType")]
        public string? CountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedBy")]
        public string? CountedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime? StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDate")]
        public System.DateTime? CompletedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalItems")]
        public int TotalItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedItems")]
        public int CountedItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("varianceItems")]
        public int VarianceItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<CycleCountItemResponse>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CycleCountResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<CycleCountResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeactivateSupplierCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeactivateSupplierResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DebitMemoResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoNumber")]
        public string? MemoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDate")]
        public System.DateTime MemoDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("appliedAmount")]
        public decimal AppliedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unappliedAmount")]
        public decimal UnappliedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public string? ReferenceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public System.Guid ReferenceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originalDocumentId")]
        public System.Guid? OriginalDocumentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isApplied")]
        public bool IsApplied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("appliedDate")]
        public System.DateTime? AppliedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedDate")]
        public System.DateTime? ApprovedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        public System.Guid? LastModifiedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DebitMemoResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<DebitMemoResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteGoodsReceiptResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteInventoryReservationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationNumber")]
        public string? ReservationNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteInventoryTransactionResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionNumber")]
        public string? TransactionNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletePickListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteProjectResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public System.Guid ProjectId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDeleted")]
        public bool IsDeleted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeletePutAwayTaskResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteSerialNumberResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberValue")]
        public string? SerialNumberValue { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisableTenantResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportChartOfAccountsQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usoaCategory")]
        public string? UsoaCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("searchTerm")]
        public string? SearchTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("includeInactive")]
        public bool IncludeInactive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("onlyControlAccounts")]
        public bool OnlyControlAccounts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("onlyDetailAccounts")]
        public bool OnlyDetailAccounts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentAccountId")]
        public System.Guid? ParentAccountId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportItemsQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("filter")]
        public ItemExportFilter Filter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sheetName")]
        public string? SheetName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportPayeesQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("expenseAccountCode")]
        public string? ExpenseAccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("searchTerm")]
        public string? SearchTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("includeInactive")]
        public bool IncludeInactive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasTin")]
        public bool? HasTin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasExpenseAccount")]
        public bool? HasExpenseAccount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExportResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public byte[]? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stream")]
        public byte[]? Stream { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recordCount")]
        public int RecordCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        public string? FileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contentType")]
        public string? ContentType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileUploadCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]
        public string? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extension")]
        public string? Extension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public long? Size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contentType")]
        public string? ContentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public System.Collections.Generic.IDictionary<string, string>? Metadata { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Filter
    {

        [System.Text.Json.Serialization.JsonPropertyName("logic")]
        public string? Logic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filters")]
        public System.Collections.Generic.ICollection<Filter>? Filters { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public string? Field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operator")]
        public string? Operator { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object? Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForgotPasswordCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetGoodsReceiptResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptNumber")]
        public string? ReceiptNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid? PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDate")]
        public System.DateTime ReceivedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<GoodsReceiptItemDto>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInventoryTransferListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferNumber")]
        public string? TransferNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromWarehouseId")]
        public System.Guid FromWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromWarehouseName")]
        public string? FromWarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toWarehouseId")]
        public System.Guid ToWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toWarehouseName")]
        public string? ToWarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        public System.DateTime TransferDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferType")]
        public string? TransferType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public string? Priority { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInventoryTransferListResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<GetInventoryTransferListResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInventoryTransferResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferNumber")]
        public string? TransferNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromWarehouseId")]
        public System.Guid FromWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromWarehouseName")]
        public string? FromWarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toWarehouseId")]
        public System.Guid ToWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toWarehouseName")]
        public string? ToWarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        public System.DateTime TransferDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expectedArrivalDate")]
        public System.DateTime? ExpectedArrivalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualArrivalDate")]
        public System.DateTime? ActualArrivalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferType")]
        public string? TransferType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public string? Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalValue")]
        public decimal TotalValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transportMethod")]
        public string? TransportMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trackingNumber")]
        public string? TrackingNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestedBy")]
        public string? RequestedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalDate")]
        public System.DateTime? ApprovalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPickListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickListNumber")]
        public string? PickListNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickingType")]
        public string? PickingType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string? AssignedTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime? StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDate")]
        public System.DateTime? CompletedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expectedCompletionDate")]
        public System.DateTime? ExpectedCompletionDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalLines")]
        public int TotalLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickedLines")]
        public int PickedLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completionPercentage")]
        public decimal CompletionPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<PickListItemDto>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPurchaseOrderItemsForReceivingResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        public string? OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<PurchaseOrderItemForReceiving>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPutAwayTaskResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taskNumber")]
        public string? TaskNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("goodsReceiptId")]
        public System.Guid? GoodsReceiptId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string? AssignedTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime? StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDate")]
        public System.DateTime? CompletedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("putAwayStrategy")]
        public string? PutAwayStrategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalLines")]
        public int TotalLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedLines")]
        public int CompletedLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completionPercentage")]
        public decimal CompletionPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<PutAwayTaskItemDto>? Items { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTodoResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWarehouseLocationListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("aisle")]
        public string? Aisle { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("section")]
        public string? Section { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shelf")]
        public string? Shelf { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bin")]
        public string? Bin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationType")]
        public string? LocationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public decimal Capacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usedCapacity")]
        public decimal UsedCapacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capacityUnit")]
        public string? CapacityUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresTemperatureControl")]
        public bool RequiresTemperatureControl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWarehouseLocationListResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<GetWarehouseLocationListResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetWarehouseLocationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("aisle")]
        public string? Aisle { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("section")]
        public string? Section { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shelf")]
        public string? Shelf { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bin")]
        public string? Bin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationType")]
        public string? LocationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public decimal Capacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usedCapacity")]
        public decimal UsedCapacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capacityUnit")]
        public string? CapacityUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresTemperatureControl")]
        public bool RequiresTemperatureControl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minTemperature")]
        public decimal? MinTemperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxTemperature")]
        public decimal? MaxTemperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperatureUnit")]
        public string? TemperatureUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoodsReceiptItemDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoodsReceiptResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptNumber")]
        public string? ReceiptNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid? PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDate")]
        public System.DateTime ReceivedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemCount")]
        public int ItemCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalLines")]
        public int TotalLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedLines")]
        public int ReceivedLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GoodsReceiptResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<GoodsReceiptResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HttpValidationProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string? Detail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string? Instance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Errors { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportChartOfAccountsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        public FileUploadCommand File { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportItemsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        [System.ComponentModel.DataAnnotations.Required]
        public FileUploadCommand File { get; set; } = new FileUploadCommand();

        [System.Text.Json.Serialization.JsonPropertyName("sheetName")]
        public string? SheetName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validateStructure")]
        public bool ValidateStructure { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportPayeesCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        public FileUploadCommand File { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImportResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("importedCount")]
        public int ImportedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("failedCount")]
        public int FailedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public System.Collections.Generic.ICollection<string>? Errors { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSuccess")]
        public bool IsSuccess { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryReservationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationNumber")]
        public string? ReservationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityReserved")]
        public int QuantityReserved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationType")]
        public string? ReservationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationDate")]
        public System.DateTime ReservationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        public System.DateTime? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completionDate")]
        public System.DateTime? CompletionDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservedBy")]
        public string? ReservedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryReservationDtoPagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<InventoryReservationDto>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryReservationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationNumber")]
        public string? ReservationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSku")]
        public string? ItemSku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservedQuantity")]
        public decimal ReservedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationDate")]
        public System.DateTime ReservationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        public System.DateTime? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public string? ReferenceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public System.Guid? ReferenceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryTransactionDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionNumber")]
        public string? TransactionNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityBefore")]
        public int QuantityBefore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityAfter")]
        public int QuantityAfter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal UnitCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCost")]
        public decimal TotalCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionDate")]
        public System.DateTime TransactionDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public string? Reference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isApproved")]
        public bool IsApproved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryTransactionDtoPagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<InventoryTransactionDto>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InventoryTransactionResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionNumber")]
        public string? TransactionNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSku")]
        public string? ItemSku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public decimal Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionDate")]
        public System.DateTime TransactionDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public string? ReferenceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public System.Guid? ReferenceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal? UnitCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemExportFilter
    {

        [System.Text.Json.Serialization.JsonPropertyName("searchTerm")]
        public string? SearchTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        public System.Guid? CategoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPerishable")]
        public bool? IsPerishable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minPrice")]
        public decimal? MinPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxPrice")]
        public decimal? MaxPrice { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemResponse
    {
        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public string? Sku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode")]
        public string? Barcode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cost")]
        public decimal Cost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minimumStock")]
        public int MinimumStock { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maximumStock")]
        public int MaximumStock { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderPoint")]
        public int ReorderPoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reorderQuantity")]
        public int ReorderQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeDays")]
        public int LeadTimeDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPerishable")]
        public bool IsPerishable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSerialTracked")]
        public bool IsSerialTracked { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isLotTracked")]
        public bool IsLotTracked { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("shelfLifeDays")]
        public int? ShelfLifeDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brand")]
        public string? Brand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufacturer")]
        public string? Manufacturer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufacturerPartNumber")]
        public string? ManufacturerPartNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public decimal Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightUnit")]
        public string? WeightUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("length")]
        public decimal? Length { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public decimal? Width { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public decimal? Height { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensionUnit")]
        public string? DimensionUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        public System.Guid CategoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<ItemResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemSupplierResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierName")]
        public string? SupplierName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierPartNumber")]
        public string? SupplierPartNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal UnitCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeDays")]
        public int LeadTimeDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minimumOrderQuantity")]
        public int MinimumOrderQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packagingQuantity")]
        public int? PackagingQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPreferred")]
        public bool IsPreferred { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reliabilityRating")]
        public decimal? ReliabilityRating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastPriceUpdate")]
        public System.DateTime? LastPriceUpdate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemSupplierResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<ItemSupplierResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LotNumberResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotCode")]
        public string? LotCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufactureDate")]
        public System.DateTime? ManufactureDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        public System.DateTime? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptDate")]
        public System.DateTime ReceiptDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityReceived")]
        public int QuantityReceived { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityRemaining")]
        public int QuantityRemaining { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("qualityNotes")]
        public string? QualityNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LotNumberResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<LotNumberResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkInTransitInventoryTransferCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkInTransitInventoryTransferResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkReceivedCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("goodsReceiptId")]
        public System.Guid GoodsReceiptId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarkReceivedResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationFilter
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeCreateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("payeeCode")]
        public string? PayeeCode { get; set; } = "VEND001";

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "ABC Company";

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = "123 Business St, City, ST 12345";

        [System.Text.Json.Serialization.JsonPropertyName("expenseAccountCode")]
        public string? ExpenseAccountCode { get; set; } = "5100";

        [System.Text.Json.Serialization.JsonPropertyName("tin")]
        public string? Tin { get; set; } = "12-3456789";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary office supply vendor";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = "Preferred vendor for office supplies";

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeCreateResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeCode")]
        public string? PayeeCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expenseAccountCode")]
        public string? ExpenseAccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expenseAccountName")]
        public string? ExpenseAccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tin")]
        public string? Tin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<PayeeResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeSearchCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("payeeCode")]
        public string? PayeeCode { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("expenseAccountCode")]
        public string? ExpenseAccountCode { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("tin")]
        public string? Tin { get; set; } = "";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeUpdateCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeCode")]
        public string? PayeeCode { get; set; } = "VEND001";

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "ABC Company";

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = "123 Business St, City, ST 12345";

        [System.Text.Json.Serialization.JsonPropertyName("expenseAccountCode")]
        public string? ExpenseAccountCode { get; set; } = "5100";

        [System.Text.Json.Serialization.JsonPropertyName("tin")]
        public string? Tin { get; set; } = "12-3456789";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary office supply vendor";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = "Preferred vendor for office supplies";

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayeeUpdateResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentAllocationItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]
        public System.Guid InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentAllocationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        public System.Guid PaymentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]
        public System.Guid InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickListItemDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binName")]
        public string? BinName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberId")]
        public System.Guid? SerialNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityToPick")]
        public int QuantityToPick { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityPicked")]
        public int QuantityPicked { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        public int SequenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickedDate")]
        public System.DateTime? PickedDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickListNumber")]
        public string? PickListNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickingType")]
        public string? PickingType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string? AssignedTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime? StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDate")]
        public System.DateTime? CompletedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalLines")]
        public int TotalLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedLines")]
        public int CompletedLines { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PickListResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<PickListResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string? Detail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string? Instance { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public decimal Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brand")]
        public BrandResponse Brand { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<ProductResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectCostingResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public System.Guid ProjectId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entryDate")]
        public System.DateTime EntryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public System.Guid AccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("journalEntryId")]
        public System.Guid? JournalEntryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("costCenter")]
        public string? CostCenter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("workOrderNumber")]
        public string? WorkOrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBillable")]
        public bool IsBillable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isApproved")]
        public bool IsApproved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendor")]
        public string? Vendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectCostingResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<ProjectCostingResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetedAmount")]
        public decimal BudgetedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]
        public string? ClientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("projectManager")]
        public string? ProjectManager { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("department")]
        public string? Department { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualCost")]
        public decimal ActualCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualRevenue")]
        public decimal ActualRevenue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<ProjectResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseOrderItemForReceiving
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderItemId")]
        public System.Guid PurchaseOrderItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSku")]
        public string? ItemSku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderedQuantity")]
        public int OrderedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedQuantity")]
        public int ReceivedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remainingQuantity")]
        public int RemainingQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isFullyReceived")]
        public bool IsFullyReceived { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseOrderItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemSku")]
        public string? ItemSku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]
        public decimal DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrice")]
        public decimal TotalPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedQuantity")]
        public int ReceivedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        public string? OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        public System.DateTime OrderDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expectedDeliveryDate")]
        public System.DateTime? ExpectedDeliveryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDeliveryDate")]
        public System.DateTime? ActualDeliveryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public decimal TotalAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public decimal TaxAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]
        public decimal DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        public decimal NetAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryAddress")]
        public string? DeliveryAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPhone")]
        public string? ContactPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUrgent")]
        public bool IsUrgent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime LastModifiedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseOrderResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<PurchaseOrderResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutAwayTaskItemDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemName")]
        public string? ItemName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toBinId")]
        public System.Guid ToBinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binName")]
        public string? BinName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberId")]
        public System.Guid? SerialNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityToPutAway")]
        public int QuantityToPutAway { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityPutAway")]
        public int QuantityPutAway { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sequenceNumber")]
        public int SequenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("putAwayDate")]
        public System.DateTime? PutAwayDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutAwayTaskResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taskNumber")]
        public string? TaskNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseName")]
        public string? WarehouseName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("goodsReceiptId")]
        public System.Guid? GoodsReceiptId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string? AssignedTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime? StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDate")]
        public System.DateTime? CompletedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("putAwayStrategy")]
        public string? PutAwayStrategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalLines")]
        public int TotalLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedLines")]
        public int CompletedLines { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completionPercentage")]
        public decimal CompletionPercentage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PutAwayTaskResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<PutAwayTaskResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceivePurchaseOrderItemQuantityCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderItemId")]
        public System.Guid PurchaseOrderItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedQuantity")]
        public int ReceivedQuantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceivePurchaseOrderRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("actualDeliveryDate")]
        public System.DateTime? ActualDeliveryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptNotes")]
        public string? ReceiptNotes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReceivePurchaseOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDeliveryDate")]
        public System.DateTime ActualDeliveryDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecognizeDeferredRevenueCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recognizedDate")]
        public System.DateTime RecognizedDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReconcileCycleCountCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReconcileCycleCountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("cycleCountId")]
        public System.Guid CycleCountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discrepancies")]
        public System.Collections.Generic.ICollection<CycleCountDiscrepancy>? Discrepancies { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecordCycleCountItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("cycleCountId")]
        public System.Guid CycleCountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cycleCountItemId")]
        public System.Guid CycleCountItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedQuantity")]
        public int CountedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedBy")]
        public string? CountedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecordCycleCountItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("cycleCountItemId")]
        public System.Guid CycleCountItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cycleCountId")]
        public System.Guid CycleCountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("systemQuantity")]
        public int SystemQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countedQuantity")]
        public int CountedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("varianceQuantity")]
        public int VarianceQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isAccurate")]
        public bool IsAccurate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresRecount")]
        public bool RequiresRecount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurringJournalEntryResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("templateCode")]
        public string? TemplateCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public string? Frequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customIntervalDays")]
        public int? CustomIntervalDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("debitAccountId")]
        public System.Guid DebitAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditAccountId")]
        public System.Guid CreditAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nextRunDate")]
        public System.DateTime NextRunDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastGeneratedDate")]
        public System.DateTime? LastGeneratedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("generatedCount")]
        public int GeneratedCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedDate")]
        public System.DateTime? ApprovedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memo")]
        public string? Memo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        public System.Guid? LastModifiedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurringJournalEntryResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<RecurringJournalEntryResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefreshTokenCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
        public string? RefreshToken { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundCreditMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refundAmount")]
        public decimal RefundAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refundMethod")]
        public string? RefundMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refundReference")]
        public string? RefundReference { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterUserCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string? UserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("confirmPassword")]
        public string? ConfirmPassword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegisterUserResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RejectBankReconciliationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rejectedBy")]
        public string? RejectedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RejectInventoryTransactionCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rejectedBy")]
        public string? RejectedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rejectionReason")]
        public string? RejectionReason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RejectInventoryTransactionResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        public InventoryTransactionResponse Transaction { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReleaseInventoryReservationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReleaseInventoryReservationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("reservation")]
        public InventoryReservationResponse Reservation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReleaseStockCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("stockLevelId")]
        public System.Guid StockLevelId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReleaseStockResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("stockLevelId")]
        public System.Guid StockLevelId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("releasedQuantity")]
        public int ReleasedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newAvailable")]
        public int NewAvailable { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReserveStockCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("stockLevelId")]
        public System.Guid StockLevelId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReserveStockResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("stockLevelId")]
        public System.Guid StockLevelId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservedQuantity")]
        public int ReservedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remainingAvailable")]
        public int RemainingAvailable { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResetPasswordCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReverseAccrualCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reversalDate")]
        public System.DateTime ReversalDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Search
    {

        [System.Text.Json.Serialization.JsonPropertyName("fields")]
        public System.Collections.Generic.ICollection<string>? Fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchAccountingPeriodsQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fiscalYear")]
        public int? FiscalYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isClosed")]
        public bool IsClosed { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchAccrualsQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("numberLike")]
        public string? NumberLike { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateFrom")]
        public System.DateTime? DateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateTo")]
        public System.DateTime? DateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isReversed")]
        public bool? IsReversed { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBankReconciliationsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        public System.Guid? BankAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromDate")]
        public System.DateTime? FromDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toDate")]
        public System.DateTime? ToDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isReconciled")]
        public bool? IsReconciled { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBinsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("searchTerm")]
        public string? SearchTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBrandsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchBudgetsQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fiscalYear")]
        public int? FiscalYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchCategoriesCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchChartOfAccountQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountCode")]
        public string? AccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchCreditMemosQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoNumber")]
        public string? MemoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public string? ReferenceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public System.Guid? ReferenceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountFrom")]
        public decimal? AmountFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountTo")]
        public decimal? AmountTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDateFrom")]
        public System.DateTime? MemoDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDateTo")]
        public System.DateTime? MemoDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasUnappliedAmount")]
        public bool? HasUnappliedAmount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDebitMemosQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoNumber")]
        public string? MemoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceType")]
        public string? ReferenceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceId")]
        public System.Guid? ReferenceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalStatus")]
        public string? ApprovalStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountFrom")]
        public decimal? AmountFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountTo")]
        public decimal? AmountTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDateFrom")]
        public System.DateTime? MemoDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDateTo")]
        public System.DateTime? MemoDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasUnappliedAmount")]
        public bool? HasUnappliedAmount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchDeferredRevenuesQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("deferredRevenueNumber")]
        public string? DeferredRevenueNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("skip")]
        public int? Skip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("take")]
        public int? Take { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchGoodsReceiptsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptNumber")]
        public string? ReceiptNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid? PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateFrom")]
        public System.DateTime? ReceivedDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receivedDateTo")]
        public System.DateTime? ReceivedDateTo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchInventoryReservationsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationNumber")]
        public string? ReservationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationType")]
        public string? ReservationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationDateFrom")]
        public System.DateTime? ReservationDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservationDateTo")]
        public System.DateTime? ReservationDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateFrom")]
        public System.DateTime? ExpirationDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateTo")]
        public System.DateTime? ExpirationDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isExpired")]
        public bool? IsExpired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reservedBy")]
        public string? ReservedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchInventoryTransactionsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionNumber")]
        public string? TransactionNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderId")]
        public System.Guid? PurchaseOrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionType")]
        public string? TransactionType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionDateFrom")]
        public System.DateTime? TransactionDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionDateTo")]
        public System.DateTime? TransactionDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isApproved")]
        public bool? IsApproved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("performedBy")]
        public string? PerformedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvedBy")]
        public string? ApprovedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minTotalCost")]
        public decimal? MinTotalCost { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxTotalCost")]
        public decimal? MaxTotalCost { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchInventoryTransfersCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("searchTerm")]
        public string? SearchTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromWarehouseId")]
        public System.Guid? FromWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toWarehouseId")]
        public System.Guid? ToWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromDate")]
        public System.DateTime? FromDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toDate")]
        public System.DateTime? ToDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchItemSuppliersCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPreferred")]
        public bool? IsPreferred { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minReliabilityRating")]
        public decimal? MinReliabilityRating { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchItemsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("searchTerm")]
        public string? SearchTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public string? Sku { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode")]
        public string? Barcode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        public System.Guid? CategoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPerishable")]
        public bool? IsPerishable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSerialTracked")]
        public bool? IsSerialTracked { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isLotTracked")]
        public bool? IsLotTracked { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brand")]
        public string? Brand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufacturer")]
        public string? Manufacturer { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchLotNumbersCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotCode")]
        public string? LotCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateFrom")]
        public System.DateTime? ExpirationDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDateTo")]
        public System.DateTime? ExpirationDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expiringWithinDays")]
        public int? ExpiringWithinDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isExpired")]
        public bool? IsExpired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minQuantityRemaining")]
        public int? MinQuantityRemaining { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchPaymentAllocationsQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        public System.Guid? PaymentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]
        public System.Guid? InvoiceId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchPickListsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickListNumber")]
        public string? PickListNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pickingType")]
        public string? PickingType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string? AssignedTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDateFrom")]
        public System.DateTime? StartDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDateTo")]
        public System.DateTime? StartDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDateFrom")]
        public System.DateTime? CompletedDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDateTo")]
        public System.DateTime? CompletedDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minPriority")]
        public int? MinPriority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxPriority")]
        public int? MaxPriority { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchProductsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brandId")]
        public System.Guid? BrandId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minimumRate")]
        public decimal? MinimumRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maximumRate")]
        public decimal? MaximumRate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchProjectCostingsQuery
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public System.Guid? ProjectId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public System.Guid? AccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromDate")]
        public System.DateTime? FromDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toDate")]
        public System.DateTime? ToDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBillable")]
        public bool? IsBillable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isApproved")]
        public bool? IsApproved { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchProjectsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("department")]
        public string? Department { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("projectManager")]
        public string? ProjectManager { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDateFrom")]
        public System.DateTime? StartDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDateTo")]
        public System.DateTime? StartDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetAmountFrom")]
        public decimal? BudgetAmountFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetAmountTo")]
        public decimal? BudgetAmountTo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchPurchaseOrdersCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("searchTerm")]
        public string? SearchTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fromDate")]
        public System.DateTime? FromDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toDate")]
        public System.DateTime? ToDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchPutAwayTasksCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minPriority")]
        public int? MinPriority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxPriority")]
        public int? MaxPriority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string? AssignedTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taskNumber")]
        public string? TaskNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdFrom")]
        public System.DateTime? CreatedFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdTo")]
        public System.DateTime? CreatedTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dueDateFrom")]
        public System.DateTime? DueDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dueDateTo")]
        public System.DateTime? DueDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("goodsReceiptId")]
        public System.Guid? GoodsReceiptId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("putAwayStrategy")]
        public string? PutAwayStrategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDateFrom")]
        public System.DateTime? StartDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDateTo")]
        public System.DateTime? StartDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDateFrom")]
        public System.DateTime? CompletedDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completedDateTo")]
        public System.DateTime? CompletedDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("includeCompleted")]
        public bool IncludeCompleted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("includeCancelled")]
        public bool IncludeCancelled { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchRecurringJournalEntriesCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("templateCode")]
        public string? TemplateCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frequency")]
        public string? Frequency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchSerialNumbersCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberValue")]
        public string? SerialNumberValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptDateFrom")]
        public System.DateTime? ReceiptDateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptDateTo")]
        public System.DateTime? ReceiptDateTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasWarranty")]
        public bool? HasWarranty { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isWarrantyExpired")]
        public bool? IsWarrantyExpired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchStockAdjustmentsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentType")]
        public string? AdjustmentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateFrom")]
        public System.DateTime? DateFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateTo")]
        public System.DateTime? DateTo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchStockLevelsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid? ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberId")]
        public System.Guid? SerialNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minQuantityOnHand")]
        public int? MinQuantityOnHand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxQuantityOnHand")]
        public int? MaxQuantityOnHand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minQuantityAvailable")]
        public int? MinQuantityAvailable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasReservedQuantity")]
        public bool? HasReservedQuantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasAllocatedQuantity")]
        public bool? HasAllocatedQuantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchSuppliersCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchTaxCodesCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxType")]
        public string? TaxType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jurisdiction")]
        public string? Jurisdiction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchWarehouseLocationsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("searchTerm")]
        public string? SearchTerm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationType")]
        public string? LocationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("aisle")]
        public string? Aisle { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiresTemperatureControl")]
        public bool? RequiresTemperatureControl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchWarehousesCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("advancedSearch")]
        public Search AdvancedSearch { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyword")]
        public string? Keyword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("advancedFilter")]
        public Filter AdvancedFilter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderBy")]
        public System.Collections.Generic.ICollection<string>? OrderBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isMainWarehouse")]
        public bool? IsMainWarehouse { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendPurchaseOrderRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("deliveryInstructions")]
        public string? DeliveryInstructions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendPurchaseOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sentDate")]
        public System.DateTime SentDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SerialNumberResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberValue")]
        public string? SerialNumberValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptDate")]
        public System.DateTime ReceiptDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufactureDate")]
        public System.DateTime? ManufactureDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warrantyExpirationDate")]
        public System.DateTime? WarrantyExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SerialNumberResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<SerialNumberResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartCycleCountCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartCycleCountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartPickingCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("pickListId")]
        public System.Guid PickListId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartPickingResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartPutAwayCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("putAwayTaskId")]
        public System.Guid PutAwayTaskId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartPutAwayResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockAdjustmentResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentType")]
        public string? AdjustmentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityAdjusted")]
        public int QuantityAdjusted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        public System.DateTime AdjustmentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid? CreatedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockAdjustmentResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<StockAdjustmentResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockLevelResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberId")]
        public System.Guid? SerialNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityOnHand")]
        public int QuantityOnHand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityAvailable")]
        public int QuantityAvailable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityReserved")]
        public int QuantityReserved { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantityAllocated")]
        public int QuantityAllocated { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastCountDate")]
        public System.DateTime? LastCountDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastMovementDate")]
        public System.DateTime? LastMovementDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StockLevelResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<StockLevelResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitPurchaseOrderCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = new System.Guid("00000000-0000-0000-0000-000000000000");

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmitPurchaseOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupplierResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;
        
        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public decimal? CreditLimit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentTermsDays")]
        public int PaymentTermsDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rating")]
        public decimal Rating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupplierResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<SupplierResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SuspendRecurringJournalEntryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxCodeResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxType")]
        public string? TaxType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rate")]
        public decimal Rate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCompound")]
        public bool IsCompound { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jurisdiction")]
        public string? Jurisdiction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("effectiveDate")]
        public System.DateTime EffectiveDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime? ExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxCollectedAccountId")]
        public System.Guid TaxCollectedAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxPaidAccountId")]
        public System.Guid? TaxPaidAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAuthority")]
        public string? TaxAuthority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxRegistrationNumber")]
        public string? TaxRegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reportingCategory")]
        public string? ReportingCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]
        public System.DateTime CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid? CreatedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedOn")]
        public System.DateTime? LastModifiedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedBy")]
        public System.Guid? LastModifiedBy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxCodeResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<TaxCodeResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TenantDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("connectionString")]
        public string? ConnectionString { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminEmail")]
        public string? AdminEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validUpto")]
        public System.DateTime ValidUpto { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("issuer")]
        public string? Issuer { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TodoDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TodoDtoPagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<TodoDto>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ToggleUserStatusCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("activateUser")]
        public bool ActivateUser { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenGenerationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = "admin@root.com";

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string? Password { get; set; } = "123Pa$$word!";

        [System.Text.Json.Serialization.JsonPropertyName("deviceType")]
        public string? DeviceType { get; set; } = "admin@root.com";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refreshToken")]
        public string? RefreshToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refreshTokenExpiryTime")]
        public System.DateTime RefreshTokenExpiryTime { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateAccountingPeriodCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime? StartDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isAdjustmentPeriod")]
        public bool IsAdjustmentPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fiscalYear")]
        public int? FiscalYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodType")]
        public string? PeriodType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateAccrualCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accrualNumber")]
        public string? AccrualNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accrualDate")]
        public System.DateTime? AccrualDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBankReconciliationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        public string? Remarks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("outstandingChecksTotal")]
        public decimal OutstandingChecksTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("depositsInTransitTotal")]
        public decimal DepositsInTransitTotal { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankErrors")]
        public decimal BankErrors { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bookErrors")]
        public decimal BookErrors { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBinCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Bin A1-01";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Storage bin for small items";

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = "A1-01-01";

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binType")]
        public string? BinType { get; set; } = "Shelf";

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public decimal? Capacity { get; set; } = 100M;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int? Priority { get; set; } = 0;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("isPickable")]
        public bool? IsPickable { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("isPutable")]
        public bool? IsPutable { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBinResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBrandCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBrandResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBudgetCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("periodId")]
        public System.Guid PeriodId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fiscalYear")]
        public int FiscalYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetType")]
        public string? BudgetType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBudgetDetailCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public System.Guid AccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetedAmount")]
        public decimal? BudgetedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateBudgetResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCategoryCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentCategoryId")]
        public System.Guid? ParentCategoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sortOrder")]
        public int? SortOrder { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCategoryResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateChartOfAccountCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remarks")]
        public string? Remarks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountCode")]
        public string? AccountCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]
        public string? AccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public string? AccountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("usoaCategory")]
        public string? UsoaCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentAccountId")]
        public System.Guid? ParentAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentCode")]
        public string? ParentCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isControlAccount")]
        public bool IsControlAccount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public decimal Balance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("normalBalance")]
        public string? NormalBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUsoaCompliant")]
        public bool IsUsoaCompliant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("regulatoryClassification")]
        public string? RegulatoryClassification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCreditMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCycleCountCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scheduledDate")]
        public System.DateTime ScheduledDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countType")]
        public string? CountType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("counterName")]
        public string? CounterName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supervisorName")]
        public string? SupervisorName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCycleCountResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDebitMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("memoDate")]
        public System.DateTime? MemoDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDepreciationMethodRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("methodCode")]
        public string? MethodCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("methodName")]
        public string? MethodName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("calculationFormula")]
        public string? CalculationFormula { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInventoryTransactionNotesCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInventoryTransactionNotesResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("transaction")]
        public InventoryTransactionResponse Transaction { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInventoryTransferCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Transfer to Main Warehouse";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Transfer items between warehouses";

        [System.Text.Json.Serialization.JsonPropertyName("transferNumber")]
        public string? TransferNumber { get; set; } = "TRF001";

        [System.Text.Json.Serialization.JsonPropertyName("transferType")]
        public string? TransferType { get; set; } = "Standard";

        [System.Text.Json.Serialization.JsonPropertyName("fromWarehouseId")]
        public System.Guid FromWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toWarehouseId")]
        public System.Guid ToWarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transferDate")]
        public System.DateTime? TransferDate { get; set; } = System.DateTime.Parse("2024-01-01");

        [System.Text.Json.Serialization.JsonPropertyName("expectedArrivalDate")]
        public System.DateTime? ExpectedArrivalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = "Pending";

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public string? Priority { get; set; } = "Normal";

        [System.Text.Json.Serialization.JsonPropertyName("transportMethod")]
        public string? TransportMethod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trackingNumber")]
        public string? TrackingNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = "Inventory Rebalancing";

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInventoryTransferItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("inventoryTransferId")]
        public System.Guid InventoryTransferId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInventoryTransferItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inventoryTransferId")]
        public System.Guid InventoryTransferId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInventoryTransferResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateItemCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Sample Item";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Item description";

        [System.Text.Json.Serialization.JsonPropertyName("sku")]
        public string? Sku { get; set; } = "SKU-001";

        [System.Text.Json.Serialization.JsonPropertyName("barcode")]
        public string? Barcode { get; set; } = "0123456789012";

        [System.Text.Json.Serialization.JsonPropertyName("categoryId")]
        public System.Guid? CategoryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal? UnitPrice { get; set; } = 24.99M;

        [System.Text.Json.Serialization.JsonPropertyName("cost")]
        public decimal? Cost { get; set; } = 15M;

        [System.Text.Json.Serialization.JsonPropertyName("minimumStock")]
        public int? MinimumStock { get; set; } = 10;

        [System.Text.Json.Serialization.JsonPropertyName("maximumStock")]
        public int? MaximumStock { get; set; } = 500;

        [System.Text.Json.Serialization.JsonPropertyName("reorderPoint")]
        public int? ReorderPoint { get; set; } = 25;

        [System.Text.Json.Serialization.JsonPropertyName("reorderQuantity")]
        public int? ReorderQuantity { get; set; } = 100;

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeDays")]
        public int? LeadTimeDays { get; set; } = 7;

        [System.Text.Json.Serialization.JsonPropertyName("isPerishable")]
        public bool? IsPerishable { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("isSerialTracked")]
        public bool? IsSerialTracked { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("isLotTracked")]
        public bool? IsLotTracked { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("shelfLifeDays")]
        public int? ShelfLifeDays { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brand")]
        public string? Brand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufacturer")]
        public string? Manufacturer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufacturerPartNumber")]
        public string? ManufacturerPartNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weight")]
        public decimal? Weight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("weightUnit")]
        public string? WeightUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("length")]
        public decimal? Length { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public decimal? Width { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public decimal? Height { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dimensionUnit")]
        public string? DimensionUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitOfMeasure")]
        public string? UnitOfMeasure { get; set; } = "EA";

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateItemResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateItemSupplierCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Item-supplier relationship";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierPartNumber")]
        public string? SupplierPartNumber { get; set; } = "SUP-PART-12345";

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal? UnitCost { get; set; } = 15.5M;

        [System.Text.Json.Serialization.JsonPropertyName("leadTimeDays")]
        public int? LeadTimeDays { get; set; } = 7;

        [System.Text.Json.Serialization.JsonPropertyName("minimumOrderQuantity")]
        public int? MinimumOrderQuantity { get; set; } = 10;

        [System.Text.Json.Serialization.JsonPropertyName("packagingQuantity")]
        public int? PackagingQuantity { get; set; } = 12;

        [System.Text.Json.Serialization.JsonPropertyName("isPreferred")]
        public bool? IsPreferred { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("reliabilityRating")]
        public decimal? ReliabilityRating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateItemSupplierResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateLotNumberCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Lot Batch 2025-001";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Lot description";

        [System.Text.Json.Serialization.JsonPropertyName("lotCode")]
        public string? LotCode { get; set; } = "LOT-2025-001";

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("manufactureDate")]
        public System.DateTime? ManufactureDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]
        public System.DateTime? ExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiptDate")]
        public System.DateTime? ReceiptDate { get; set; } = System.DateTime.Parse("2025-10-04");

        [System.Text.Json.Serialization.JsonPropertyName("quantityReceived")]
        public int QuantityReceived { get; set; } = 100;

        [System.Text.Json.Serialization.JsonPropertyName("quantityRemaining")]
        public int QuantityRemaining { get; set; } = 100;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = "Active";

        [System.Text.Json.Serialization.JsonPropertyName("qualityNotes")]
        public string? QualityNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateLotNumberResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePermissionsCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string? RoleId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateProductCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("price")]
        public decimal Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("brandId")]
        public System.Guid? BrandId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateProductResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateProjectCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Updated Infrastructure Project";

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTime? StartDate { get; set; } = System.DateTime.Parse("2025-09-23");

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTime? EndDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetedAmount")]
        public decimal? BudgetedAmount { get; set; } = 150000M;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = "Active";

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]
        public string? ClientName { get; set; } = "Updated Client Name";

        [System.Text.Json.Serialization.JsonPropertyName("projectManager")]
        public string? ProjectManager { get; set; } = "Jane Doe";

        [System.Text.Json.Serialization.JsonPropertyName("department")]
        public string? Department { get; set; } = "Engineering";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Updated project description";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = "Updated project notes";

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateProjectCostingCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entryDate")]
        public System.DateTime? EntryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public decimal? Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("costCenter")]
        public string? CostCenter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("workOrderNumber")]
        public string? WorkOrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBillable")]
        public bool? IsBillable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vendor")]
        public string? Vendor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string? InvoiceNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePurchaseOrderCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]
        public string? OrderNumber { get; set; } = "PO-2025-001";

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public System.Guid? SupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]
        public System.DateTime? OrderDate { get; set; } = System.DateTime.Parse("2025-10-04");

        [System.Text.Json.Serialization.JsonPropertyName("expectedDeliveryDate")]
        public System.DateTime? ExpectedDeliveryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualDeliveryDate")]
        public System.DateTime? ActualDeliveryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = "Draft";

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]
        public decimal? TotalAmount { get; set; } = 0M;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount")]
        public decimal? TaxAmount { get; set; } = 0M;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]
        public decimal? DiscountAmount { get; set; } = 0M;

        [System.Text.Json.Serialization.JsonPropertyName("shippingCost")]
        public decimal? ShippingCost { get; set; } = 0M;

        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        public decimal? NetAmount { get; set; } = 0M;

        [System.Text.Json.Serialization.JsonPropertyName("deliveryAddress")]
        public string? DeliveryAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPhone")]
        public string? ContactPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUrgent")]
        public bool? IsUrgent { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePurchaseOrderItemPriceCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderItemId")]
        public System.Guid PurchaseOrderItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public decimal UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]
        public decimal? DiscountAmount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePurchaseOrderItemQuantityCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseOrderItemId")]
        public System.Guid PurchaseOrderItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public int Quantity { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePurchaseOrderResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSerialNumberCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Serial Number SN-12345";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Serial number description";

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberValue")]
        public string? SerialNumberValue { get; set; } = "SN-12345";

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid? WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = "Available";

        [System.Text.Json.Serialization.JsonPropertyName("receiptDate")]
        public System.DateTime? ReceiptDate { get; set; } = System.DateTime.Parse("2025-10-04");

        [System.Text.Json.Serialization.JsonPropertyName("manufactureDate")]
        public System.DateTime? ManufactureDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warrantyExpirationDate")]
        public System.DateTime? WarrantyExpirationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("externalReference")]
        public string? ExternalReference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSerialNumberResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateStockAdjustmentCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Stock Adjustment ADJ-2025-001";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Stock adjustment description";

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentNumber")]
        public string? AdjustmentNumber { get; set; } = "ADJ-2025-001";

        [System.Text.Json.Serialization.JsonPropertyName("itemId")]
        public System.Guid ItemId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentDate")]
        public System.DateTime? AdjustmentDate { get; set; } = System.DateTime.Parse("2025-10-04");

        [System.Text.Json.Serialization.JsonPropertyName("adjustmentType")]
        public string? AdjustmentType { get; set; } = "Increase";

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string? Reason { get; set; } = "Physical count correction";

        [System.Text.Json.Serialization.JsonPropertyName("quantityBefore")]
        public int QuantityBefore { get; set; } = 100;

        [System.Text.Json.Serialization.JsonPropertyName("quantityAdjusted")]
        public int QuantityAdjusted { get; set; } = 10;

        [System.Text.Json.Serialization.JsonPropertyName("quantityAfter")]
        public int QuantityAfter { get; set; } = 110;

        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public decimal UnitCost { get; set; } = 10M;

        [System.Text.Json.Serialization.JsonPropertyName("totalCostImpact")]
        public decimal TotalCostImpact { get; set; } = 100M;

        [System.Text.Json.Serialization.JsonPropertyName("reference")]
        public string? Reference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adjustedBy")]
        public string? AdjustedBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("batchNumber")]
        public string? BatchNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expiryDate")]
        public System.DateTime? ExpiryDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateStockAdjustmentResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateStockLevelCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseLocationId")]
        public System.Guid? WarehouseLocationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("binId")]
        public System.Guid? BinId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumberId")]
        public System.Guid? LotNumberId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serialNumberId")]
        public System.Guid? SerialNumberId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateStockLevelResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSupplierCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "ABC Supplies Inc.";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Reliable supplier of industrial goods";

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = "SUP-001";

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public string? ContactPerson { get; set; } = "John Smith";

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = "contact@supplier.com";

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public string? Phone { get; set; } = "+1-555-0100";

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = "123 Industrial Blvd";

        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; } = "97201";

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = "https://www.supplier.com";

        [System.Text.Json.Serialization.JsonPropertyName("creditLimit")]
        public decimal? CreditLimit { get; set; } = 50000M;

        [System.Text.Json.Serialization.JsonPropertyName("paymentTermsDays")]
        public int? PaymentTermsDays { get; set; } = 30;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool? IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("rating")]
        public decimal? Rating { get; set; } = 0M;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public string? ImageUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSupplierResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateTodoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateTodoResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateUserCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image")]
        public FileUploadCommand Image { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deleteCurrentImage")]
        public bool DeleteCurrentImage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateWarehouseCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = "WH001";

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Main Warehouse";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary storage facility";

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = "123 Storage Street, New York, NY 10001, USA";

        [System.Text.Json.Serialization.JsonPropertyName("managerName")]
        public string? ManagerName { get; set; } = "John Manager";

        [System.Text.Json.Serialization.JsonPropertyName("managerEmail")]
        public string? ManagerEmail { get; set; } = "john.manager@example.com";

        [System.Text.Json.Serialization.JsonPropertyName("managerPhone")]
        public string? ManagerPhone { get; set; } = "+1-555-123-4567";

        [System.Text.Json.Serialization.JsonPropertyName("totalCapacity")]
        public decimal TotalCapacity { get; set; } = 10000M;

        [System.Text.Json.Serialization.JsonPropertyName("capacityUnit")]
        public string? CapacityUnit { get; set; } = "sqft";

        [System.Text.Json.Serialization.JsonPropertyName("warehouseType")]
        public string? WarehouseType { get; set; } = "Standard";

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("isMainWarehouse")]
        public bool IsMainWarehouse { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateWarehouseLocationCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = "Main Location";

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = "Primary storage location";

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = "LOC001";

        [System.Text.Json.Serialization.JsonPropertyName("aisle")]
        public string? Aisle { get; set; } = "A";

        [System.Text.Json.Serialization.JsonPropertyName("section")]
        public string? Section { get; set; } = "01";

        [System.Text.Json.Serialization.JsonPropertyName("shelf")]
        public string? Shelf { get; set; } = "01";

        [System.Text.Json.Serialization.JsonPropertyName("bin")]
        public string? Bin { get; set; } = "A";

        [System.Text.Json.Serialization.JsonPropertyName("warehouseId")]
        public System.Guid WarehouseId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locationType")]
        public string? LocationType { get; set; } = "Floor";

        [System.Text.Json.Serialization.JsonPropertyName("capacity")]
        public decimal Capacity { get; set; } = 1000M;

        [System.Text.Json.Serialization.JsonPropertyName("capacityUnit")]
        public string? CapacityUnit { get; set; } = "sqft";

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("requiresTemperatureControl")]
        public bool RequiresTemperatureControl { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("minTemperature")]
        public decimal? MinTemperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxTemperature")]
        public decimal? MaxTemperature { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temperatureUnit")]
        public string? TemperatureUnit { get; set; } = "C";

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateWarehouseLocationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateWarehouseResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpgradeSubscriptionCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("tenant")]
        public string? Tenant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extendedExpiryDate")]
        public System.DateTime ExtendedExpiryDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpgradeSubscriptionResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("newValidity")]
        public System.DateTime NewValidity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tenant")]
        public string? Tenant { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string? UserName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("emailConfirmed")]
        public bool EmailConfirmed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string? PhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imageUrl")]
        public System.Uri? ImageUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRoleDetail
    {

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string? RoleId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roleName")]
        public string? RoleName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool Enabled { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoidCreditMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidReason")]
        public string? VoidReason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoidDebitMemoCommand
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("voidReason")]
        public string? VoidReason { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public string? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("managerName")]
        public string? ManagerName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("managerEmail")]
        public string? ManagerEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("managerPhone")]
        public string? ManagerPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCapacity")]
        public decimal TotalCapacity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("capacityUnit")]
        public string? CapacityUnit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("warehouseType")]
        public string? WarehouseType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActive")]
        public bool IsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isMainWarehouse")]
        public bool IsMainWarehouse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public string? Notes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WarehouseResponsePagedList
    {

        [System.Text.Json.Serialization.JsonPropertyName("items")]
        public System.Collections.Generic.ICollection<WarehouseResponse>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageNumber")]
        public int PageNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalCount")]
        public int TotalCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasPrevious")]
        public bool HasPrevious { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasNext")]
        public bool HasNext { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore  649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765
