// <auto-generated />
using System;
using Accounting.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FSH.Starter.WebApi.Migrations.PostgreSQL.Accounting
{
    [DbContext(typeof(AccountingDbContext))]
    [Migration("20251031093134_InitialAccountingDb")]
    partial class InitialAccountingDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("accounting")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Accounting.Domain.Entities.AccountingPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdjustmentPeriod")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("IsClosed");

                    b.HasIndex("StartDate");

                    b.HasIndex("FiscalYear", "PeriodType")
                        .IsUnique();

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("AccountingPeriods", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.AccountsPayableAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Current0to30")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Days31to60")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Days61to90")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DaysPayableOutstanding")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("GeneralLedgerAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastReconciliationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("Over90Days")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ReconciliationVariance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("VendorCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("YearToDateDiscountsLost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("YearToDateDiscountsTaken")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("YearToDatePayments")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("GeneralLedgerAccountId");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsReconciled");

                    b.HasIndex("PeriodId");

                    b.ToTable("AccountsPayableAccounts", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.AccountsReceivableAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("AllowanceForDoubtfulAccounts")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("BadDebtPercentage")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Current0to30")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CustomerCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Days31to60")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Days61to90")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DaysSalesOutstanding")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("GeneralLedgerAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastReconciliationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<decimal>("NetReceivables")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("Over90Days")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ReconciliationVariance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("YearToDateCollections")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("YearToDateWriteOffs")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("GeneralLedgerAccountId");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsReconciled");

                    b.HasIndex("PeriodId");

                    b.ToTable("AccountsReceivableAccounts", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Accrual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccrualDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccrualNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsReversed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime?>("ReversalDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccrualNumber")
                        .IsUnique();

                    b.ToTable("Accruals", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("RoutingNumber")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("BankCode")
                        .IsUnique();

                    b.HasIndex("RoutingNumber");

                    b.ToTable("Banks", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.BankReconciliation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AdjustedBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BankErrors")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("BookBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("BookErrors")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DepositsInTransitTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<decimal>("OutstandingChecksTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ReconciledBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ReconciledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ReconciliationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StatementBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("StatementNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("IsReconciled");

                    b.HasIndex("ReconciliationDate");

                    b.HasIndex("Status");

                    b.ToTable("BankReconciliations", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("DiscountDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ExpenseAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVoid")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("ShippingAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("SubtotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<string>("VendorInvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("BillDate");

                    b.HasIndex("BillNumber")
                        .IsUnique();

                    b.HasIndex("DueDate");

                    b.HasIndex("Status");

                    b.HasIndex("VendorId");

                    b.ToTable("Bills", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BudgetType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<decimal>("TotalActualAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalBudgetedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetType");

                    b.HasIndex("FiscalYear");

                    b.HasIndex("PeriodId");

                    b.HasIndex("Status");

                    b.HasIndex("Name", "PeriodId")
                        .IsUnique();

                    b.ToTable("Budgets", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.BudgetDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BudgetedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetId", "AccountId")
                        .IsUnique();

                    b.ToTable("BudgetDetails", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.ChartOfAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("AccountLevel")
                        .HasColumnType("integer");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("AllowDirectPosting")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsControlAccount")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsoaCompliant")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("NormalBalance")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("ParentAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ParentCode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("RegulatoryClassification")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UsoaCategory")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("AccountCode")
                        .IsUnique();

                    b.HasIndex("AccountType");

                    b.HasIndex("IsActive");

                    b.HasIndex("ParentCode");

                    b.HasIndex("UsoaCategory");

                    b.ToTable("ChartOfAccounts", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Check", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("BankAccountCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("BankAccountName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("BankId")
                        .HasColumnType("uuid");

                    b.Property<string>("BankName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("CheckNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("ClearedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPrinted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStopPayment")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IssuedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Memo")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("PayeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PayeeName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrintedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("PrintedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("StopPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StopPaymentReason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<string>("VoidReason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("VoidedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountCode")
                        .HasDatabaseName("IX_Checks_BankAccountCode");

                    b.HasIndex("BankId")
                        .HasDatabaseName("IX_Checks_BankId");

                    b.HasIndex("IssuedDate")
                        .HasDatabaseName("IX_Checks_IssuedDate");

                    b.HasIndex("PayeeId")
                        .HasDatabaseName("IX_Checks_PayeeId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Checks_Status");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("IX_Checks_VendorId");

                    b.HasIndex("CheckNumber", "BankAccountCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Checks_CheckNumber_BankAccount");

                    b.ToTable("Checks", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Consumption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentReading")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(18,3)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsValidReading")
                        .HasColumnType("boolean");

                    b.Property<decimal>("KWhUsed")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(18,3)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MeterId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Multiplier")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(10,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("PreviousReading")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReadingSource")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ReadingType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("MeterId", "ReadingDate")
                        .IsUnique();

                    b.ToTable("Consumption", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.CostCenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("BudgetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CostCenterType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid?>("ParentCostCenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CostCenterType");

                    b.HasIndex("IsActive");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ParentCostCenterId");

                    b.ToTable("CostCenters", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.CreditMemo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("AppliedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MemoDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MemoNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("OriginalDocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("RefundedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("IsApplied");

                    b.HasIndex("MemoDate");

                    b.HasIndex("MemoNumber")
                        .IsUnique();

                    b.HasIndex("OriginalDocumentId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("Status");

                    b.ToTable("CreditMemos", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AccountOpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CreditLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("CustomerNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid?>("DefaultRateScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnCreditHold")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("LastPaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastTransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("ReceivableAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("SalesRepresentative")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("TaxExempt")
                        .HasColumnType("boolean");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerName");

                    b.HasIndex("CustomerNumber")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Status");

                    b.ToTable("Customers", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.DebitMemo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("AppliedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("AppliedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsApplied")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MemoDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MemoNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("OriginalDocumentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("IsApplied");

                    b.HasIndex("MemoDate");

                    b.HasIndex("MemoNumber")
                        .IsUnique();

                    b.HasIndex("OriginalDocumentId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("Status");

                    b.ToTable("DebitMemos", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.DeferredRevenue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeferredRevenueNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsRecognized")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("RecognitionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RecognizedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("DeferredRevenues", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.DepreciationEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FixedAssetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FixedAssetId");

                    b.ToTable("DepreciationEntry", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.DepreciationMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CalculationFormula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MethodCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.HasKey("Id");

                    b.ToTable("DepreciationMethods", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.FiscalPeriodClose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("APReconciliationComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("ARReconciliationComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("AccrualsPosted")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllJournalsPosted")
                        .HasColumnType("boolean");

                    b.Property<bool>("BankReconciliationsComplete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CloseInitiatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CloseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CloseType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal?>("FinalNetIncome")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("FixedAssetDepreciationPosted")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("InitiatedBy")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IntercompanyReconciled")
                        .HasColumnType("boolean");

                    b.Property<bool>("InventoryReconciliationComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<bool>("NetIncomeTransferred")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("PrepaidExpensesAmortized")
                        .HasColumnType("boolean");

                    b.Property<string>("ReopenReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ReopenedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ReopenedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RequiredTasksComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("TasksCompleted")
                        .HasColumnType("integer");

                    b.Property<int>("TasksRemaining")
                        .HasColumnType("integer");

                    b.Property<bool>("TrialBalanceBalanced")
                        .HasColumnType("boolean");

                    b.Property<bool>("TrialBalanceGenerated")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TrialBalanceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CloseNumber")
                        .IsUnique();

                    b.HasIndex("CloseType");

                    b.HasIndex("PeriodId");

                    b.HasIndex("Status");

                    b.ToTable("FiscalPeriodCloses", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.FixedAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccumulatedDepreciationAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("AssetUsoaId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Capacity")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentBookValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("DepreciationExpenseAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepreciationMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal?>("DisposalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime?>("DisposalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GpsCoordinates")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDisposed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<DateTime?>("NextMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("RegulatoryClassification")
                        .HasColumnType("text");

                    b.Property<bool>("RequiresUsoaReporting")
                        .HasColumnType("boolean");

                    b.Property<decimal>("SalvageValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ServiceLife")
                        .HasColumnType("integer");

                    b.Property<string>("SubstationName")
                        .HasColumnType("text");

                    b.Property<decimal?>("VoltageRating")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccumulatedDepreciationAccountId");

                    b.HasIndex("DepreciationExpenseAccountId");

                    b.HasIndex("DepreciationMethodId");

                    b.HasIndex("IsDisposed");

                    b.HasIndex("PurchaseDate");

                    b.ToTable("FixedAssets", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.GeneralLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Credit")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("Debit")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid>("EntryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UsoaClass")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeneralLedgers", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.InterCompanyTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EliminationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("FromEntityName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("FromJournalEntryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsEliminated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MatchingTransactionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReconciledBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ReconciliationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("RequiresElimination")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ToEntityName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ToJournalEntryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("FromEntityId");

                    b.HasIndex("Status");

                    b.HasIndex("ToEntityId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique();

                    b.ToTable("InterCompanyTransactions", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.InterconnectionAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AgreementNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AgreementStatus")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal?>("AnnualGenerationLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentCreditBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DepositAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ExcessGenerationRate")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GenerationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("InstalledCapacityKW")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<decimal>("InterconnectionFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("InverterManufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InverterModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastInspectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LifetimeGeneration")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MonthlyServiceCharge")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<decimal>("NetMeteringRate")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTime?>("NextInspectionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<int?>("NumberOfPanels")
                        .HasColumnType("integer");

                    b.Property<string>("PanelManufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PanelModel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("YearToDateGeneration")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AgreementNumber")
                        .IsUnique();

                    b.HasIndex("AgreementStatus");

                    b.HasIndex("MemberId");

                    b.ToTable("InterconnectionAgreements", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("InventoryItems", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BasicServiceCharge")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ConsumptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DemandCharge")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal?>("DepositAmount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("KWhUsed")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("LateFee")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("OtherCharges")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("RateSchedule")
                        .HasColumnType("text");

                    b.Property<decimal?>("ReconnectionFee")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("UsageCharge")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.HasKey("Id");

                    b.ToTable("Invoices", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.InvoiceLineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceLineItem", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.JournalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("OriginalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PostingBatchId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("IsPosted");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PostingBatchId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique();

                    b.HasIndex("Source");

                    b.ToTable("JournalEntries", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactInfo")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MailingAddress")
                        .HasColumnType("text");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MemberNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MeterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("RateSchedule")
                        .HasColumnType("text");

                    b.Property<Guid?>("RateScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceClass")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Members", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Meter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AccuracyClass")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("CommunicationProtocol")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("GpsCoordinates")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSmartMeter")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("LastReading")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<DateTime?>("LastReadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("MeterConfiguration")
                        .HasColumnType("text");

                    b.Property<string>("MeterNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MeterType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Multiplier")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<DateTime?>("NextCalibrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Meters", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.MeterReading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MeterId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReadBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Reading")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReadingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("MeterReading", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PatronageCapital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountAllocated")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("AmountRetired")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PatronageCapitals", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Payee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ExpenseAccountCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("ExpenseAccountName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("PayeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tin")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseAccountCode");

                    b.HasIndex("Name");

                    b.HasIndex("PayeeCode")
                        .IsUnique();

                    b.ToTable("Payees", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepositToAccountCode")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("UnappliedAmount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.HasKey("Id");

                    b.ToTable("Payments", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PaymentAllocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentAllocations", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PostingBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BatchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PostingBatches", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PowerPurchaseAgreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ContractCapacityMW")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("CounterpartyName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DemandChargePerKW")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EnergyPricePerKWh")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<string>("EnergySource")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("EscalationRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)");

                    b.Property<Guid?>("ExpenseAccountId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasPriceEscalation")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IncludesRenewableCredits")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTakeOrPay")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LifetimeCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("LifetimeEnergyKWh")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("MaximumPurchaseKWh")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("MinimumPurchaseKWh")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("MonthlySettlementAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<DateTime?>("NextEscalationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<string>("SettlementFrequency")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("YearToDateCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("YearToDateEnergyKWh")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber")
                        .IsUnique();

                    b.HasIndex("EndDate");

                    b.HasIndex("Status");

                    b.ToTable("PowerPurchaseAgreements", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PrepaidExpense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AmortizationSchedule")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("AmortizedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("CostCenterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExpenseAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsFullyAmortized")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastAmortizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<DateTime?>("NextAmortizationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrepaidAssetAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrepaidNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("RemainingAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<string>("VendorName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("NextAmortizationDate");

                    b.HasIndex("PrepaidAssetAccountId");

                    b.HasIndex("PrepaidNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("VendorId");

                    b.ToTable("PrepaidExpenses", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ActualRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("BudgetedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ProjectManager")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Projects", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.ProjectCostEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CostCenter")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JournalEntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.Property<string>("WorkOrderNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryDate");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCostEntries", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("BilledAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("CostCenterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsFullyBilled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullyReceived")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentTerms")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ReceivedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("RequesterId")
                        .HasColumnType("uuid");

                    b.Property<string>("RequesterName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ShipToAddress")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("OrderDate");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("Status");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrders", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.RateSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DemandRatePerKw")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("EnergyRatePerKwh")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("FixedMonthlyCharge")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsTimeOfUse")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("RateCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RateSchedules", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.RateTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("RatePerKwh")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<Guid>("RateScheduleId")
                        .HasColumnType("uuid");

                    b.Property<int>("TierOrder")
                        .HasColumnType("integer");

                    b.Property<decimal>("UpToKwh")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.HasKey("Id");

                    b.HasIndex("RateScheduleId");

                    b.ToTable("RateTier", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.RecurringJournalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreditAccountId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CustomIntervalDays")
                        .HasColumnType("integer");

                    b.Property<Guid>("DebitAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("GeneratedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastGeneratedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Memo")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<DateTime>("NextRunDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid?>("PostingBatchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TemplateCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("IsActive");

                    b.HasIndex("NextRunDate");

                    b.HasIndex("PostingBatchId");

                    b.HasIndex("Status");

                    b.HasIndex("TemplateCode")
                        .IsUnique();

                    b.ToTable("RecurringJournalEntries", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.RegulatoryReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("AllowedReturn")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("AuditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuditFirm")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FilingNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<decimal?>("NetIncome")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PreparedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("RateBase")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("RegulatoryBody")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReportingPeriod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("RequiresAudit")
                        .HasColumnType("boolean");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Draft");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TotalAssets")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalEquity")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalExpenses")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalLiabilities")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("TotalRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("RegulatoryBody");

                    b.HasIndex("ReportName")
                        .IsUnique();

                    b.HasIndex("ReportType");

                    b.HasIndex("Status");

                    b.HasIndex("PeriodStartDate", "PeriodEndDate");

                    b.ToTable("RegulatoryReports", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.RetainedEarnings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ApproprietedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("CapitalContributions")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ClosingBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<int>("DistributionCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("Distributions")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FiscalYearEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FiscalYearStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastDistributionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<decimal>("NetIncome")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("OpeningBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("OtherEquityChanges")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("RetainedEarningsAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("UnappropriatedAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FiscalYear")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("RetainedEarnings", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.SecurityDeposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DepositAmount")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<DateTime>("DepositDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsRefunded")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("RefundReference")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefundedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SecurityDeposits", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.TaxCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCompound")
                        .HasColumnType("boolean");

                    b.Property<string>("Jurisdiction")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Notes")
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("Rate")
                        .HasPrecision(10, 6)
                        .HasColumnType("numeric(10,6)");

                    b.Property<string>("ReportingCategory")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TaxAuthority")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("TaxCollectedAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TaxPaidAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaxRegistrationNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("TaxCollectedAccountId");

                    b.HasIndex("TaxPaidAccountId");

                    b.HasIndex("TaxType");

                    b.ToTable("TaxCodes", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.TrialBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("FinalizedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("FinalizedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IncludeZeroBalances")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBalanced")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<decimal>("OutOfBalanceAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("TotalAssets")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalCredits")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalDebits")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalEquity")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalExpenses")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalLiabilities")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("TotalRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("TrialBalanceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex("Status");

                    b.HasIndex("TrialBalanceNumber")
                        .IsUnique();

                    b.ToTable("TrialBalances", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("text");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExpenseAccountCode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ExpenseAccountName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(2048)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Terms")
                        .HasColumnType("text");

                    b.Property<string>("Tin")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("VendorCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseAccountCode");

                    b.HasIndex("Name");

                    b.HasIndex("VendorCode")
                        .IsUnique();

                    b.ToTable("Vendors", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.WriteOff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeletedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("ExpenseAccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsRecovered")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("JournalEntryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("LastModifiedByUserName")
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Reason")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("ReceivableAccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RecoveredAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("WriteOffDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WriteOffType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExpenseAccountId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("JournalEntryId");

                    b.HasIndex("ReceivableAccountId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("WriteOffDate");

                    b.ToTable("WriteOffs", "accounting");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Bill", b =>
                {
                    b.OwnsMany("Accounting.Domain.Entities.BillLineItem", "LineItems", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid?>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("BillId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<decimal>("LineTotal")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<decimal>("Quantity")
                                .HasPrecision(18, 4)
                                .HasColumnType("numeric(18,4)");

                            b1.Property<decimal>("UnitPrice")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.HasKey("Id");

                            b1.HasIndex("BillId");

                            b1.ToTable("BillLineItems", "accounting");

                            b1.WithOwner()
                                .HasForeignKey("BillId");
                        });

                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.BudgetDetail", b =>
                {
                    b.HasOne("Accounting.Domain.Entities.Budget", null)
                        .WithMany("BudgetDetails")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Accounting.Domain.Entities.DepreciationEntry", b =>
                {
                    b.HasOne("Accounting.Domain.Entities.FixedAsset", null)
                        .WithMany("DepreciationEntries")
                        .HasForeignKey("FixedAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Accounting.Domain.Entities.FiscalPeriodClose", b =>
                {
                    b.OwnsMany("Accounting.Domain.Entities.CloseTaskItem", "Tasks", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime?>("CompletedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("FiscalPeriodCloseId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsComplete")
                                .HasColumnType("boolean");

                            b1.Property<bool>("IsRequired")
                                .HasColumnType("boolean");

                            b1.Property<string>("TaskName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.HasKey("Id");

                            b1.HasIndex("FiscalPeriodCloseId");

                            b1.ToTable("FiscalPeriodCloseTasks", "accounting");

                            b1.WithOwner()
                                .HasForeignKey("FiscalPeriodCloseId");
                        });

                    b.OwnsMany("Accounting.Domain.Entities.CloseValidationIssue", "ValidationIssues", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("FiscalPeriodCloseId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsResolved")
                                .HasColumnType("boolean");

                            b1.Property<string>("IssueDescription")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.Property<string>("Resolution")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)");

                            b1.Property<DateTime?>("ResolvedDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Severity")
                                .IsRequired()
                                .HasMaxLength(32)
                                .HasColumnType("character varying(32)");

                            b1.HasKey("Id");

                            b1.HasIndex("FiscalPeriodCloseId");

                            b1.ToTable("FiscalPeriodCloseValidationIssues", "accounting");

                            b1.WithOwner()
                                .HasForeignKey("FiscalPeriodCloseId");
                        });

                    b.Navigation("Tasks");

                    b.Navigation("ValidationIssues");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.InvoiceLineItem", b =>
                {
                    b.HasOne("Accounting.Domain.Entities.Invoice", null)
                        .WithMany("LineItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Accounting.Domain.Entities.JournalEntry", b =>
                {
                    b.HasOne("Accounting.Domain.Entities.PostingBatch", null)
                        .WithMany("JournalEntries")
                        .HasForeignKey("PostingBatchId");

                    b.OwnsMany("Accounting.Domain.Entities.JournalEntryLine", "Lines", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("CreditAmount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<decimal>("DebitAmount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<string>("Description")
                                .HasColumnType("text");

                            b1.Property<Guid>("JournalEntryId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("JournalEntryId");

                            b1.ToTable("JournalEntryLines", "accounting");

                            b1.WithOwner()
                                .HasForeignKey("JournalEntryId");
                        });

                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.MeterReading", b =>
                {
                    b.HasOne("Accounting.Domain.Entities.Meter", null)
                        .WithMany("Readings")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PaymentAllocation", b =>
                {
                    b.HasOne("Accounting.Domain.Entities.Payment", null)
                        .WithMany("Allocations")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PrepaidExpense", b =>
                {
                    b.OwnsMany("Accounting.Domain.Entities.PrepaidAmortizationEntry", "AmortizationHistory", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<decimal>("AmortizationAmount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<Guid?>("JournalEntryId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("PostingDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("PrepaidExpenseId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("RemainingBalance")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.HasKey("Id");

                            b1.HasIndex("PrepaidExpenseId");

                            b1.ToTable("PrepaidAmortizationEntries", "accounting");

                            b1.WithOwner()
                                .HasForeignKey("PrepaidExpenseId");
                        });

                    b.Navigation("AmortizationHistory");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.ProjectCostEntry", b =>
                {
                    b.HasOne("Accounting.Domain.Entities.Project", null)
                        .WithMany("CostingEntries")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Accounting.Domain.Entities.RateTier", b =>
                {
                    b.HasOne("Accounting.Domain.Entities.RateSchedule", null)
                        .WithMany("Tiers")
                        .HasForeignKey("RateScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Accounting.Domain.Entities.TrialBalance", b =>
                {
                    b.OwnsMany("Accounting.Domain.Entities.TrialBalanceLineItem", "LineItems", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("AccountCode")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("AccountName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)");

                            b1.Property<string>("AccountType")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<decimal>("CreditBalance")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<decimal>("DebitBalance")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)");

                            b1.Property<Guid>("TrialBalanceId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("TrialBalanceId");

                            b1.ToTable("TrialBalanceLineItems", "accounting");

                            b1.WithOwner()
                                .HasForeignKey("TrialBalanceId");
                        });

                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Budget", b =>
                {
                    b.Navigation("BudgetDetails");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.FixedAsset", b =>
                {
                    b.Navigation("DepreciationEntries");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("LineItems");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Meter", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Payment", b =>
                {
                    b.Navigation("Allocations");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.PostingBatch", b =>
                {
                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.Project", b =>
                {
                    b.Navigation("CostingEntries");
                });

            modelBuilder.Entity("Accounting.Domain.Entities.RateSchedule", b =>
                {
                    b.Navigation("Tiers");
                });
#pragma warning restore 612, 618
        }
    }
}
